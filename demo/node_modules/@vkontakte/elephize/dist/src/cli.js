"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference path="../types/global/index.d.ts" />
var cli = require("cli");
var path = require("path");
var fs = require("fs");
var help_1 = require("./ts2php/components/cli/help");
var retrieveConfig_1 = require("./ts2php/components/cli/retrieveConfig");
var configureLogging_1 = require("./ts2php/components/cli/configureLogging");
var transpile_1 = require("./ts2php/components/cli/transpile");
var _options = cli.parse({
    config: ['c', 'Configuration file path', 'string', undefined],
    src: ['s', 'An entry point (file or glob) to process', 'string', undefined],
    outDir: ['d', 'Directory for generated php files', 'string', undefined],
    rewriteBuiltinsRoot: [false, 'Rewritten builtins path', 'string', undefined],
    quiet: ['q', 'Do not show error messages from transpiler', 'bool', undefined],
    verbose: ['v', 'Show more verbose output from transpiler', 'bool', undefined],
    verboseUsage: ['u', 'Show var usage stats & eliminator verbose output', 'bool', undefined],
    verboseTypehints: ['t', 'Show type hinting tool verbose output', 'bool', undefined],
    noZap: ['z', 'Do not remove unused variables from resulting code', 'bool', undefined],
    bail: ['e', 'Return error code if any error occurred during transpilation', 'string', undefined],
    serverBaseDir: ['r', 'Server base folder path', 'string', undefined],
    baseDir: ['b', 'Base src directory for transpiled code', 'string', undefined],
    encoding: ['l', 'Set output encoding for non-ascii symbols', 'string', undefined],
    printImportTree: ['p', 'Print tree of imports in all modules', 'bool', undefined],
    rootNs: ['n', 'Root namespace name for generated classes', 'string', undefined],
    watch: ['w', 'Start elephize in watcher mode', 'bool', undefined],
    help: ['h', 'Show some help', 'bool', undefined],
});
help_1.help(_options);
var options = retrieveConfig_1.retrieveConfig(_options);
var outDir = path.resolve(options.outDir);
var baseDir = path.resolve(options.baseDir);
var log = configureLogging_1.configureLogging({
    baseDir: baseDir, outDir: outDir,
    verbose: options.verbose,
    verboseTypehints: options.verboseTypehints,
    verboseUsage: options.verboseUsage,
    quiet: options.quiet,
});
log.info('Running with configuration: %s', [JSON.stringify(options, null, '  ')]);
log.info('Running transpilation in glob: %s', [options.src.toString()]);
// Create output dir if absent
fs.mkdirSync(outDir, { recursive: true });
log.special('Selected source directory [base]: %s', [baseDir]);
log.special('Selected target directory [out]: %s', [outDir]);
transpile_1.transpile(options, baseDir, outDir, log);
