/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.List = void 0;
/**
 * @todo Document List<T>.
 */
var List = /** @class */ (function () {
    function List() {
    }
    /**
     * Performs a binary search of a list for a given value.
     *
     * @param {ReadonlyArray<T>} list
     *   The sorted list to search.
     * @param {T} value
     *   The value to search for.
     * @param {IComparer<T>} predicate
     *   A function that will compare list values.
     *
     * @return {number}
     *   The index where the search value was found, or a negative number that
     *   is the two's complement of the index where the search value should have
     *   been found.
     */
    List.binarySearch = function (list, value, predicate) {
        var low = 0, high = list.length - 1;
        while (low <= high) {
            // Do they even teach it like this anymore? Long story short, a + b
            // might cause an integer overflow, and x >> y == x / 2^y.
            var mid = low + ((high - low) >> 1);
            var n = predicate(list[mid], value);
            if (n == 0) {
                return mid;
            }
            else if (n > 0) {
                high = mid - 1;
            }
            else {
                low = mid + 1;
            }
        }
        return ~low;
    };
    /**
     * Creates a `Map` from a list by determining a key for each value.
     *
     * @param {ReadonlyArray<V>} list
     *   A list of values to convert into a `Map`.
     * @param {(value: V) => K} selector
     *   A callback that returns a key which is used to compare each value.
     *
     * @see Array.prototype.reduce()
     */
    List.toMap = function (list, selector) {
        var map = new Map();
        for (var i = 0; i < list.length; i++) {
            var key = selector(list[i]);
            var bucket = map.get(key);
            if (bucket) {
                bucket.push(list[i]);
                map.set(key, bucket);
            }
            else {
                map.set(key, [list[i]]);
            }
        }
        return map;
    };
    return List;
}());
exports.List = List;
