/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hash = void 0;
var Debug_1 = require("./diagnostics/Debug");
/**
 * Provides a generic hashing algorithm for common data types.
 */
var Hash = /** @class */ (function () {
    function Hash() {
    }
    /**
     * Combines a numeric value with an existing hash code.
     *
     * @param {number} value
     *   A value to combine with the hash.
     * @param {number} hash
     *   A previous hash code.
     */
    Hash.combine = function (value, hash) {
        // IMPORTANT: This is a specialized, performance critical method.
        // Do not merge with combineBoolean() or combineObject().
        // Prevent deoptimization when TypeScript fails to do its job.
        Debug_1.Debug.assert(value !== void 0 && hash !== void 0);
        var code = Math.imul(hash, Hash.Prime) + value;
        return code | 0;
    };
    /**
     * Combine a boolean value with an existing hash code.
     */
    Hash.combineBoolean = function (value, hash) {
        var add = value ? 1 : 0;
        var code = Math.imul(hash, Hash.Prime) + add;
        return code | 0;
    };
    /**
     * Combine a hashable object with an existing hash code.
     */
    Hash.combineObject = function (value, hash) {
        var add = value ? value.hashCode() : 0;
        var code = Math.imul(hash, Hash.Prime) + add;
        return code | 0;
    };
    Hash.combineFnvHash = function (text, hash) {
        if (typeof text === 'number') {
            return Math.imul(hash ^ text, Hash.FnvPrime);
        }
        for (var i = 0; i < text.length; i++) {
            hash = Math.imul(hash ^ text.charCodeAt(i), Hash.FnvPrime);
        }
        return hash;
    };
    /**
     * Computes the FNV-1a hash of a string.
     *
     * @param {string} text
     *   The input string.
     * @param {number} start
     *   The index of the first character to hash.
     * @param {number=} length
     *   The number of characters to hash.
     */
    Hash.fnv = function (text, start, length) {
        var hash = Hash.FnvOffsetBias;
        if (typeof length === 'undefined') {
            length = text.length - start;
        }
        for (var i = start; i < (start + length); i++) {
            hash = Math.imul(hash ^ text.charCodeAt(i), Hash.FnvPrime);
        }
        return hash;
    };
    /**
     * Computes a generic hash of a string.
     *
     * @param {string} text
     *   The input string.
     */
    Hash.fromString = function (text) {
        // Generate a Hash from string in Javascript/jQuery
        // https://stackoverflow.com/q/7616461
        var hash = 0, length = text.length;
        for (var i = 0; i < length; i++) {
            hash = (hash * 31) + text.charCodeAt(i);
        }
        return hash | 0;
    };
    /**
     * The FNV offset bias for 32-bit integers.
     *
     * See: [Fowler-Noll-Vo hash](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function)
     */
    Hash.FnvOffsetBias = 2166136261 | 0;
    /**
     * The FNV prime for 32-bit integers.
     *
     * See: [Fowler-Noll-Vo hash](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function)
     */
    Hash.FnvPrime = 16777619;
    /**
     * @todo Test hash table hit/miss rate with 31 or 33?
     */
    Hash.Prime = 0xA5555529 | 0;
    return Hash;
}());
exports.Hash = Hash;
