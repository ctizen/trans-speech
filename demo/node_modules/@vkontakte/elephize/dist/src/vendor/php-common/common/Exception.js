/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotSupportedException = exports.NotImplementedException = exports.InvalidOperationException = exports.IndexOutOfRangeException = exports.ArgumentOutOfRangeException = exports.ArgumentNullException = exports.ArgumentException = exports.Exception = void 0;
/**
 * An error that occured during program execution.
 */
var Exception = /** @class */ (function (_super) {
    __extends(Exception, _super);
    function Exception(message) {
        var _this = _super.call(this, message) || this;
        _this.name = _this.constructor.name;
        _this.captureStackTrace();
        return _this;
    }
    Exception.prototype.captureStackTrace = function (fn) {
        if (typeof fn === 'undefined') {
            fn = this.constructor;
        }
        if (Exception.isNodeError(Error)) {
            Error.captureStackTrace(this, fn);
        }
    };
    Exception.isNodeError = function (type) {
        return typeof type.captureStackTrace === 'function';
    };
    return Exception;
}(Error));
exports.Exception = Exception;
/**
 * An exception thrown when one of the arguments provided to a method is
 * invalid.
 */
var ArgumentException = /** @class */ (function (_super) {
    __extends(ArgumentException, _super);
    function ArgumentException() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ArgumentException;
}(Exception));
exports.ArgumentException = ArgumentException;
/**
 * An exception thrown when an argument is null.
 */
var ArgumentNullException = /** @class */ (function (_super) {
    __extends(ArgumentNullException, _super);
    function ArgumentNullException() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ArgumentNullException;
}(ArgumentException));
exports.ArgumentNullException = ArgumentNullException;
/**
 * An exception thrown when an argument is not within an expected range.
 */
var ArgumentOutOfRangeException = /** @class */ (function (_super) {
    __extends(ArgumentOutOfRangeException, _super);
    function ArgumentOutOfRangeException() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ArgumentOutOfRangeException;
}(ArgumentException));
exports.ArgumentOutOfRangeException = ArgumentOutOfRangeException;
/**
 * An exception thrown when an attempt is made to access an element of an array
 * or collection with an index that is outside its bounds.
 */
var IndexOutOfRangeException = /** @class */ (function (_super) {
    __extends(IndexOutOfRangeException, _super);
    function IndexOutOfRangeException() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IndexOutOfRangeException;
}(Exception));
exports.IndexOutOfRangeException = IndexOutOfRangeException;
/**
 * An exception thrown when a method call is invalid for the object's current
 * state.
 */
var InvalidOperationException = /** @class */ (function (_super) {
    __extends(InvalidOperationException, _super);
    function InvalidOperationException() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return InvalidOperationException;
}(Exception));
exports.InvalidOperationException = InvalidOperationException;
/**
 * An exception thrown when a requested method or operation is not implemented.
 */
var NotImplementedException = /** @class */ (function (_super) {
    __extends(NotImplementedException, _super);
    function NotImplementedException() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NotImplementedException;
}(Exception));
exports.NotImplementedException = NotImplementedException;
/**
 * An exception thrown when an invoked method is not supported, or when there
 * is an attempt to read or write to a stream that does not support it.
 */
var NotSupportedException = /** @class */ (function (_super) {
    __extends(NotSupportedException, _super);
    function NotSupportedException() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NotSupportedException;
}(Exception));
exports.NotSupportedException = NotSupportedException;
