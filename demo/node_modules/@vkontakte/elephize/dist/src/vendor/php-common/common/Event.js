/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventEmitter = exports.EventArgs = void 0;
/**
 * A generic event argument.
 */
var EventArgs = /** @class */ (function () {
    function EventArgs() {
    }
    /**
     * An event argument with no data.
     */
    EventArgs.Empty = new EventArgs();
    return EventArgs;
}());
exports.EventArgs = EventArgs;
/**
 * Allows a providing class to implement events that an observer can subscribe
 * to. When triggered, the subscribing handler is provided with the sender and
 * any custom event arguments.
 */
var EventEmitter = /** @class */ (function () {
    function EventEmitter() {
        /**
         * A map of subscribed event handlers and their contexts.
         */
        this.handlers = new Map();
    }
    /**
     * @inheritdoc
     */
    EventEmitter.prototype.addHandler = function (handler, context) {
        var contexts = this.handlers.get(handler);
        if (contexts === undefined) {
            var set = new Set();
            set.add(context);
            this.handlers.set(handler, set);
        }
        else {
            contexts.add(context);
        }
    };
    /**
     * @inheritdoc
     */
    EventEmitter.prototype.removeHandler = function (handler, context) {
        var contexts = this.handlers.get(handler);
        if (contexts === undefined) {
            return;
        }
        contexts.delete(context);
        if (contexts.size === 0) {
            this.handlers.delete(handler);
        }
    };
    /**
     * @inheritdoc
     */
    EventEmitter.prototype.trigger = function (sender, args) {
        var e_1, _a, e_2, _b;
        var handlers = this.cloneHandlers();
        try {
            for (var handlers_1 = __values(handlers), handlers_1_1 = handlers_1.next(); !handlers_1_1.done; handlers_1_1 = handlers_1.next()) {
                var _c = __read(handlers_1_1.value, 2), handler = _c[0], contexts = _c[1];
                try {
                    for (var contexts_1 = (e_2 = void 0, __values(contexts)), contexts_1_1 = contexts_1.next(); !contexts_1_1.done; contexts_1_1 = contexts_1.next()) {
                        var context = contexts_1_1.value;
                        handler.call(context, sender, args);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (contexts_1_1 && !contexts_1_1.done && (_b = contexts_1.return)) _b.call(contexts_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (handlers_1_1 && !handlers_1_1.done && (_a = handlers_1.return)) _a.call(handlers_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Releases all references to event handlers.
     */
    EventEmitter.prototype.dispose = function () {
        this.handlers.clear();
    };
    /**
     * Performs a deep clone of the subscribed event handlers.
     */
    EventEmitter.prototype.cloneHandlers = function () {
        var e_3, _a;
        var handlers = new Map();
        try {
            for (var _b = __values(this.handlers), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), handler = _d[0], contexts = _d[1];
                handlers.set(handler, new Set(contexts));
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return handlers;
    };
    return EventEmitter;
}());
exports.EventEmitter = EventEmitter;
