/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trace = void 0;
var Exception_1 = require("../Exception");
var LogLevel_1 = require("./LogLevel");
/**
 * @todo Experimental.
 */
var Trace = /** @class */ (function () {
    function Trace() {
    }
    Object.defineProperty(Trace, "indentLevel", {
        /**
         * Gets the current indentation level.
         */
        get: function () {
            return Trace._indentLevel;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Trace, "indentSize", {
        /**
         * Gets the number of spaces used for indentation.
         */
        get: function () {
            return Trace._indentSize;
        },
        /**
         * Sets the number of spaces used for indentation.
         */
        set: function (value) {
            if (value < 1) {
                throw new Exception_1.ArgumentOutOfRangeException('Indent size must be greater than 0');
            }
            Trace._indentSize = value;
            Trace.updateIndent();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Removes an indentation level from the trace output.
     */
    Trace.deindent = function () {
        if (Trace._indentLevel > 0) {
            Trace._indentLevel--;
            Trace.updateIndent();
        }
    };
    /**
     * Adds an indentation level to the trace output.
     */
    Trace.indent = function () {
        Trace._indentLevel++;
        Trace.updateIndent();
    };
    /**
     * Updates the indentation prefix used when logging a message.
     */
    Trace.updateIndent = function () {
        // Save the prefix so that it isn't recreated for every trace message.
        var indent = ' '.repeat(Trace._indentSize);
        Trace._indent = indent.repeat(Trace._indentLevel);
    };
    /**
     * Adds a logger to the list of trace listeners.
     */
    Trace.addListener = function (listener) {
        for (var i = 0; i < Trace.listeners.length; i++) {
            if (Trace.listeners[i] === listener) {
                return;
            }
        }
        Trace.listeners.push(listener);
    };
    /**
     * Removes all trace listeners.
     */
    Trace.removeAllListeners = function () {
        Trace.listeners = [];
    };
    /**
     * Removes a logger from the list of trace listeners.
     */
    Trace.removeListener = function (listener) {
        for (var i = 0; i < Trace.listeners.length; i++) {
            if (Trace.listeners[i] === listener) {
                Trace.listeners.splice(i, 1);
            }
        }
    };
    /**
     * Logs a message to all trace listeners.
     */
    Trace.log = function (message) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        for (var i = 0; i < Trace.listeners.length; i++) {
            (_a = Trace.listeners[i]).log.apply(_a, __spreadArray([LogLevel_1.LogLevel.Trace, Trace._indent + message], __read(args)));
        }
    };
    /**
     * An indentation prefix used when logging messages.
     */
    Trace._indent = '';
    /**
     * The current number of indents.
     */
    Trace._indentLevel = 0;
    /**
     * The number of spaces used for an indent.
     */
    Trace._indentSize = 4;
    /**
     * A list of loggers that receive trace messages.
     */
    Trace.listeners = [];
    return Trace;
}());
exports.Trace = Trace;
