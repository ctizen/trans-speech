/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NullLogger = exports.LoggerBase = void 0;
var LogLevel_1 = require("./LogLevel");
/**
 * A base class for logging messages.
 */
var LoggerBase = /** @class */ (function () {
    function LoggerBase() {
    }
    /**
     * @inheritdoc
     */
    LoggerBase.prototype.error = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.log.apply(this, __spreadArray([LogLevel_1.LogLevel.Error, message], __read(args)));
    };
    /**
     * @inheritdoc
     */
    LoggerBase.prototype.info = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.log.apply(this, __spreadArray([LogLevel_1.LogLevel.Information, message], __read(args)));
    };
    /**
     * @inheritdoc
     */
    LoggerBase.prototype.warn = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.log.apply(this, __spreadArray([LogLevel_1.LogLevel.Warning, message], __read(args)));
    };
    /**
     * Formats a message with substitution placeholders.
     *
     * @param {string} message
     *   The message, with zero or more of the following formatting placeholders:
     *   - '%d': Outputs a replacement value as an integer.
     *   - '%f': Outputs a replacement value as a floating-point number.
     *   - '%s': Outputs a replacement value as a string.
     *   - '%x': Outputs a replacement value as a hexadecimal number.
     * @param {...any} values
     *   The replacement values for each placeholder.
     *
     * @return {string}
     *   A string with formatted replacement values.
     */
    LoggerBase.format = function (message) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        return message.replace(/%[dfsx]/g, function (match, offset, template) {
            var value = '' + values.shift();
            switch (match) {
                case '%d':
                    return Number.parseInt(value).toString(10);
                case '%f':
                    // Defaults to a variable precision of up to 15 digits.
                    return Number.parseFloat(value).toString();
                case '%x':
                    return Number.parseInt(value).toString(16);
                default:
                    return value;
            }
        });
    };
    return LoggerBase;
}());
exports.LoggerBase = LoggerBase;
/**
 * A fallback logger that does nothing.
 */
var NullLogger = /** @class */ (function (_super) {
    __extends(NullLogger, _super);
    function NullLogger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritdoc
     */
    NullLogger.prototype.log = function (level, message) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        // Do nothing.
    };
    return NullLogger;
}(LoggerBase));
exports.NullLogger = NullLogger;
