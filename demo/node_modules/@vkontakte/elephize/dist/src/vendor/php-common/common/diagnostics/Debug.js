/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssertException = exports.Debug = void 0;
var Exception_1 = require("../Exception");
/**
 * Provides helpful methods to debug your code.
 */
var Debug = /** @class */ (function () {
    function Debug() {
    }
    /**
     * @internal
     */
    Debug.assertInternal = function (condition, message) {
        if (!condition) {
            throw new AssertException(message, Debug.assertInternal);
        }
    };
    /**
     * Enables assertion methods.
     *
     * This method should be called as early as possible to prevent code
     * deoptimization.
     */
    Debug.enable = function () {
        Debug.assert = Debug.assertInternal;
    };
    /**
     * Asserts that a condition is `true` and throws an exception if not.
     *
     * This method does nothing until `Debug.enable()` is called.
     */
    Debug.assert = function (condition, message) {
        // No-op.
    };
    /**
     * Makes an assertion that always fails.
     */
    Debug.fail = function (message) {
        Debug.assert(false, message);
    };
    /**
     * Makes an assertion that always passes.
     */
    Debug.pass = function (message) {
        Debug.assert(true, message);
    };
    return Debug;
}());
exports.Debug = Debug;
/**
 * An exception thrown when an assert condition is `false`.
 */
var AssertException = /** @class */ (function (_super) {
    __extends(AssertException, _super);
    function AssertException(message, constructorFn) {
        var _this = _super.call(this, message) || this;
        _this.captureStackTrace(constructorFn);
        return _this;
    }
    return AssertException;
}(Exception_1.Exception));
exports.AssertException = AssertException;
