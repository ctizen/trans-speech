/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stopwatch = void 0;
/**
 * Provides methods to measure an elapsed time period.
 */
var Stopwatch = /** @class */ (function () {
    /**
     * Creates a new `Stopwatch` object.
     */
    function Stopwatch() {
        this._elapsed = 0.0;
        this._isRunning = false;
        this.timestamp = 0.0;
        // Do nothing.
    }
    Object.defineProperty(Stopwatch.prototype, "elapsed", {
        /**
         * The total elapsed time, in milliseconds.
         */
        get: function () {
            return this._elapsed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Stopwatch.prototype, "isRunning", {
        /**
         * Indicates if the stopwatch is currently measuring an elapsed time period.
         */
        get: function () {
            return this._isRunning;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Resets the elapsed time and stops the timer.
     */
    Stopwatch.prototype.reset = function () {
        this._elapsed = 0.0;
        this._isRunning = false;
    };
    /**
     * Resets the elapsed time and starts the timer.
     */
    Stopwatch.prototype.restart = function () {
        this._elapsed = 0.0;
        this._isRunning = true;
        this.timestamp = this.getTimestamp();
    };
    /**
     * Starts the timer.
     */
    Stopwatch.prototype.start = function () {
        if (!this._isRunning) {
            this._isRunning = true;
            this.timestamp = this.getTimestamp();
        }
    };
    /**
     * Stops the timer and measures the elapsed time since starting.
     */
    Stopwatch.prototype.stop = function () {
        if (this._isRunning) {
            var stop_1 = this.getTimestamp();
            this._elapsed = this._elapsed + (stop_1 - this.timestamp);
            this._isRunning = false;
        }
    };
    /**
     * Gets a timestamp with at least millisecond resolution.
     */
    Stopwatch.prototype.getTimestamp = function () {
        if (typeof process !== 'undefined' && typeof process.nextTick === 'function') {
            return Stopwatch.fromNodeTime(process.hrtime());
        }
        else if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
            return performance.now();
        }
        else {
            // This method is subject to external factors such as NTP adjustments, or
            // even a user manually changing their system clock.
            return Date.now();
        }
    };
    /**
     * Converts a Node.js high-resolution timestamp to milliseconds.
     */
    Stopwatch.fromNodeTime = function (time) {
        return (time[0] * 1000) + (time[1] / 1000000);
    };
    return Stopwatch;
}());
exports.Stopwatch = Stopwatch;
