/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxWalker = void 0;
var SyntaxVisitor_Generated_1 = require("./SyntaxVisitor.Generated");
var SyntaxWalkerDepth_1 = require("./SyntaxWalkerDepth");
/**
 * A syntax visitor that descends through an entire syntax tree.
 *
 * Nodes and tokens are visited in a depth-first order.
 */
var SyntaxWalker = /** @class */ (function (_super) {
    __extends(SyntaxWalker, _super);
    /**
     * Constructs a `SyntaxWalker` object.
     *
     * @param {SyntaxWalkerDepth=} depth
     *   The maximum depth to walk in the syntax tree.
     */
    function SyntaxWalker(depth) {
        if (depth === void 0) { depth = SyntaxWalkerDepth_1.SyntaxWalkerDepth.Nodes; }
        var _this = _super.call(this) || this;
        _this.walkerDepth = depth;
        return _this;
    }
    /**
     * Visits all children of a node.
     */
    SyntaxWalker.prototype.defaultVisit = function (node) {
        var e_1, _a;
        try {
            for (var _b = __values(node.getAllChildren()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                if (child.isToken) {
                    if (this.walkerDepth >= SyntaxWalkerDepth_1.SyntaxWalkerDepth.NodesAndTokens) {
                        this.visitToken(child);
                    }
                }
                else {
                    this.visit(child);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Visits a token in the syntax tree.
     */
    SyntaxWalker.prototype.visitToken = function (token) {
        if (this.walkerDepth >= SyntaxWalkerDepth_1.SyntaxWalkerDepth.AllExceptStructuredTrivia) {
            if (!token.leadingTrivia) {
                return;
            }
            var leadingTrivia = token.leadingTrivia;
            for (var i = 0; i < leadingTrivia.count; i++) {
                this.visitTrivia(leadingTrivia.triviaAt(i));
            }
        }
    };
    /**
     * Visits the trivia attached to a token.
     */
    SyntaxWalker.prototype.visitTrivia = function (trivia) {
        // if (this.depth == SyntaxWalkerDepth.All && trivia.containsStructuredTrivia) {
        //   this.visit(trivia.getStructure());
        // }
    };
    return SyntaxWalker;
}(SyntaxVisitor_Generated_1.SyntaxVisitor));
exports.SyntaxWalker = SyntaxWalker;
