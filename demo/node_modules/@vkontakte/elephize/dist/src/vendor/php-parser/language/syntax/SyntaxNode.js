/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxNode = void 0;
var SyntaxNodeBase_1 = require("./SyntaxNodeBase");
/**
 * A non-terminal node in a syntax tree.
 */
var SyntaxNode = /** @class */ (function (_super) {
    __extends(SyntaxNode, _super);
    function SyntaxNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a syntax node for a child at the given index.
     *
     * @return {T|null}
     *   A child syntax node, or `null` if the child was undefined or not a node.
     *
     * @see createFirstChildNode()
     */
    SyntaxNode.prototype.createChildNode = function (index) {
        var node = this.node.childAt(index);
        if (node !== null) {
            // Suppress TS2322: Type `ISyntaxNodeOrList` is assignable to `ISyntaxNodeOrList`.
            return node.createSyntaxNode(this, this.offsetAt(index));
        }
        return null;
    };
    /**
     * Creates the first child syntax node of the current node.
     *
     * This is a slight optimization of `createChildNode()`.
     *
     * @return {T|null}
     *   A child syntax node, or `null` if the first child was undefined or not a
     *   node.
     */
    SyntaxNode.prototype.createFirstChildNode = function () {
        var node = this.node.childAt(0);
        if (node !== null) {
            // Suppress TS2322: Type `ISyntaxNodeOrList` is assignable to `ISyntaxNodeOrList`.
            return node.createSyntaxNode(this, this.offset);
        }
        return null;
    };
    return SyntaxNode;
}(SyntaxNodeBase_1.SyntaxNodeBase));
exports.SyntaxNode = SyntaxNode;
