/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.CharacterInfo = void 0;
var PhpVersion_1 = require("./PhpVersion");
/**
 * Defines the language-specific characteristics of certain characters.
 */
var CharacterInfo = /** @class */ (function () {
    function CharacterInfo() {
    }
    /**
     * Determines if a character is a binary digit (0-1).
     */
    CharacterInfo.isBinDigit = function (ch) {
        return ch === 48 /* _0 */ || ch === 49 /* _1 */;
    };
    /**
     * Determines if a character is a digit (0-9).
     */
    CharacterInfo.isDigit = function (ch) {
        return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;
    };
    /**
     * Determines if a character is a valid escape sequence in a double-quoted
     * string. The escape sequence may still be valid if it consists of multiple
     * characters however.
     */
    CharacterInfo.isDoubleQuoteEscape = function (ch) {
        return ch === 92 /* Backslash */ ||
            ch === 36 /* Dollar */ ||
            ch === 34 /* DoubleQuote */ ||
            ch === 101 /* e */ ||
            ch === 102 /* f */ ||
            ch === 110 /* n */ ||
            ch === 114 /* r */ ||
            ch === 116 /* t */ ||
            ch === 118 /* v */;
    };
    /**
     * Determines if a character is a hexadecimal digit (0-9, A-F).
     */
    CharacterInfo.isHexDigit = function (ch) {
        return (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) ||
            (ch >= 65 /* A */ && ch <= 70 /* F */) ||
            (ch >= 97 /* a */ && ch <= 102 /* f */);
    };
    /**
     * Determines if the character may be part of an identifier.
     *
     * This is similar to `isIdentifierStart()` but allows for digits.
     */
    CharacterInfo.isIdentifierPart = function (ch, languageVersion) {
        if (languageVersion === void 0) { languageVersion = PhpVersion_1.PhpVersion.Latest; }
        if (ch < 97 /* a */) {
            if (ch < 65 /* A */) {
                return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;
            }
            return ch <= 90 /* Z */ || ch === 95 /* Underscore */;
        }
        if (ch <= 122 /* z */) {
            return true;
        }
        if (ch <= 127 /* Delete */) {
            return languageVersion === PhpVersion_1.PhpVersion.PHP7_0 && ch === 127 /* Delete */;
        }
        return true;
    };
    /**
     * Determines if a character may start an identifier.
     */
    CharacterInfo.isIdentifierStart = function (ch, languageVersion) {
        if (languageVersion === void 0) { languageVersion = PhpVersion_1.PhpVersion.Latest; }
        if (ch < 97 /* a */) {
            if (ch < 65 /* A */) {
                return false;
            }
            return ch <= 90 /* Z */ || ch === 95 /* Underscore */;
        }
        if (ch <= 122 /* z */) {
            return true;
        }
        if (ch <= 127 /* Delete */) {
            return languageVersion === PhpVersion_1.PhpVersion.PHP7_0 && ch === 127 /* Delete */;
        }
        return true;
    };
    /**
     * Determines if a character is a line break (CR or LF).
     */
    CharacterInfo.isLineBreak = function (ch) {
        // LineSeparator (U+2028), ParagraphSeparator (U+2029)
        return ch === 13 /* CarriageReturn */ || ch === 10 /* LineFeed */;
    };
    /**
     * Determines if a character is an octal digit (0-7).
     */
    CharacterInfo.isOctDigit = function (ch) {
        return ch >= 48 /* _0 */ && ch <= 55 /* _7 */;
    };
    /**
     * Determines if a character is a valid escape sequence in a single-quoted
     * string.
     */
    CharacterInfo.isSingleQuoteEscape = function (ch) {
        return ch === 92 /* Backslash */ || ch === 39 /* SingleQuote */;
    };
    /**
     * Determines if a character is whitespace (but not a line break).
     */
    CharacterInfo.isWhitespace = function (ch) {
        // PHP does not recognize FormFeed or VerticalTab as whitespace.
        return ch === 32 /* Space */ || ch === 9 /* Tab */;
    };
    /**
     * Determines if a character is whitespace or a line break.
     */
    CharacterInfo.isWhitespaceLike = function (ch) {
        return CharacterInfo.isLineBreak(ch) || CharacterInfo.isWhitespace(ch);
    };
    return CharacterInfo;
}());
exports.CharacterInfo = CharacterInfo;
