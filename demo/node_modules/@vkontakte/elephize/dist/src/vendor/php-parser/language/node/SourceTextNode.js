/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceTextNode = void 0;
var php_common_1 = require("../../../php-common");
var Node_1 = require("./Node");
var SourceTextSyntaxNode_1 = require("../syntax/SourceTextSyntaxNode");
/**
 * The root node of a token metadata tree.
 */
var SourceTextNode = /** @class */ (function (_super) {
    __extends(SourceTextNode, _super);
    /**
     * Constructs a `SourceTextNode` object.
     *
     * @param {NodeList|null} statements
     *   A list of top-level statements in the parsed source text.
     * @param {TokenNode} eof
     *   The EOF token that contains any trailing trivia at the end of a file.
     * @param {ReadonlyArray<SyntaxDiagnostic>=} diagnostics
     *   A list of diagnostics associated with this node.
     */
    function SourceTextNode(statements, eof, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.statements = statements;
        _this.eof = eof;
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        _this.updateFlagsAndWidth(eof.flags, eof.fullWidth);
        return _this;
    }
    Object.defineProperty(SourceTextNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceTextNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceTextNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    SourceTextNode.prototype.accept = function (visitor) {
        visitor.visitSourceText(this);
    };
    SourceTextNode.prototype.acceptResult = function (visitor) {
        return visitor.visitSourceText(this);
    };
    SourceTextNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.statements;
            case 1:
                return this.eof;
            default:
                return null;
        }
    };
    SourceTextNode.prototype.createSyntaxNode = function () {
        return new SourceTextSyntaxNode_1.SourceTextSyntaxNode(this);
    };
    SourceTextNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = SourceTextNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    SourceTextNode.prototype.withDiagnostics = function (diagnostics) {
        return new SourceTextNode(this.statements, this.eof, diagnostics);
    };
    SourceTextNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ (4 + 8192 + 512));
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.eof.hashCode(), hash);
        return hash;
    };
    SourceTextNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return SourceTextNode;
}(Node_1.Node));
exports.SourceTextNode = SourceTextNode;
