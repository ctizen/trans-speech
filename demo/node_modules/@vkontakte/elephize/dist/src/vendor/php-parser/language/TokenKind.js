/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenKindInfo = exports.TokenKind = void 0;
/**
 * A list of possible token types.
 */
var TokenKind;
(function (TokenKind) {
    TokenKind[TokenKind["Unknown"] = 0] = "Unknown";
    TokenKind[TokenKind["Error"] = 1] = "Error";
    // Keywords
    TokenKind[TokenKind["Abstract"] = 2] = "Abstract";
    TokenKind[TokenKind["Array"] = 3] = "Array";
    TokenKind[TokenKind["As"] = 4] = "As";
    TokenKind[TokenKind["Break"] = 5] = "Break";
    TokenKind[TokenKind["Callable"] = 6] = "Callable";
    TokenKind[TokenKind["Case"] = 7] = "Case";
    TokenKind[TokenKind["Catch"] = 8] = "Catch";
    TokenKind[TokenKind["Class"] = 9] = "Class";
    TokenKind[TokenKind["Clone"] = 10] = "Clone";
    TokenKind[TokenKind["Const"] = 11] = "Const";
    TokenKind[TokenKind["Continue"] = 12] = "Continue";
    TokenKind[TokenKind["Declare"] = 13] = "Declare";
    TokenKind[TokenKind["Default"] = 14] = "Default";
    TokenKind[TokenKind["Die"] = 15] = "Die";
    TokenKind[TokenKind["Do"] = 16] = "Do";
    TokenKind[TokenKind["Echo"] = 17] = "Echo";
    TokenKind[TokenKind["Else"] = 18] = "Else";
    TokenKind[TokenKind["ElseIf"] = 19] = "ElseIf";
    TokenKind[TokenKind["Empty"] = 20] = "Empty";
    TokenKind[TokenKind["EndDeclare"] = 21] = "EndDeclare";
    TokenKind[TokenKind["EndFor"] = 22] = "EndFor";
    TokenKind[TokenKind["EndForEach"] = 23] = "EndForEach";
    TokenKind[TokenKind["EndIf"] = 24] = "EndIf";
    TokenKind[TokenKind["EndSwitch"] = 25] = "EndSwitch";
    TokenKind[TokenKind["EndWhile"] = 26] = "EndWhile";
    TokenKind[TokenKind["Eval"] = 27] = "Eval";
    TokenKind[TokenKind["Exit"] = 28] = "Exit";
    TokenKind[TokenKind["Extends"] = 29] = "Extends";
    TokenKind[TokenKind["Final"] = 30] = "Final";
    TokenKind[TokenKind["Finally"] = 31] = "Finally";
    TokenKind[TokenKind["Fn"] = 32] = "Fn";
    TokenKind[TokenKind["For"] = 33] = "For";
    TokenKind[TokenKind["ForEach"] = 34] = "ForEach";
    TokenKind[TokenKind["Function"] = 35] = "Function";
    TokenKind[TokenKind["Global"] = 36] = "Global";
    TokenKind[TokenKind["GoTo"] = 37] = "GoTo";
    TokenKind[TokenKind["HaltCompiler"] = 38] = "HaltCompiler";
    TokenKind[TokenKind["If"] = 39] = "If";
    TokenKind[TokenKind["Implements"] = 40] = "Implements";
    TokenKind[TokenKind["Include"] = 41] = "Include";
    TokenKind[TokenKind["IncludeOnce"] = 42] = "IncludeOnce";
    TokenKind[TokenKind["InstanceOf"] = 43] = "InstanceOf";
    TokenKind[TokenKind["InsteadOf"] = 44] = "InsteadOf";
    TokenKind[TokenKind["Interface"] = 45] = "Interface";
    TokenKind[TokenKind["IsSet"] = 46] = "IsSet";
    TokenKind[TokenKind["List"] = 47] = "List";
    TokenKind[TokenKind["LogicalAnd"] = 48] = "LogicalAnd";
    TokenKind[TokenKind["LogicalOr"] = 49] = "LogicalOr";
    TokenKind[TokenKind["LogicalXor"] = 50] = "LogicalXor";
    TokenKind[TokenKind["MagicClass"] = 51] = "MagicClass";
    TokenKind[TokenKind["MagicDirectory"] = 52] = "MagicDirectory";
    TokenKind[TokenKind["MagicFile"] = 53] = "MagicFile";
    TokenKind[TokenKind["MagicFunction"] = 54] = "MagicFunction";
    TokenKind[TokenKind["MagicLine"] = 55] = "MagicLine";
    TokenKind[TokenKind["MagicMethod"] = 56] = "MagicMethod";
    TokenKind[TokenKind["MagicNamespace"] = 57] = "MagicNamespace";
    TokenKind[TokenKind["MagicTrait"] = 58] = "MagicTrait";
    TokenKind[TokenKind["Namespace"] = 59] = "Namespace";
    TokenKind[TokenKind["New"] = 60] = "New";
    TokenKind[TokenKind["Print"] = 61] = "Print";
    TokenKind[TokenKind["Private"] = 62] = "Private";
    TokenKind[TokenKind["Protected"] = 63] = "Protected";
    TokenKind[TokenKind["Public"] = 64] = "Public";
    TokenKind[TokenKind["Require"] = 65] = "Require";
    TokenKind[TokenKind["RequireOnce"] = 66] = "RequireOnce";
    TokenKind[TokenKind["Return"] = 67] = "Return";
    TokenKind[TokenKind["Static"] = 68] = "Static";
    TokenKind[TokenKind["Switch"] = 69] = "Switch";
    TokenKind[TokenKind["Throw"] = 70] = "Throw";
    TokenKind[TokenKind["Trait"] = 71] = "Trait";
    TokenKind[TokenKind["Try"] = 72] = "Try";
    TokenKind[TokenKind["While"] = 73] = "While";
    TokenKind[TokenKind["Unset"] = 74] = "Unset";
    TokenKind[TokenKind["Use"] = 75] = "Use";
    TokenKind[TokenKind["Var"] = 76] = "Var";
    TokenKind[TokenKind["Yield"] = 77] = "Yield";
    // Punctuation
    TokenKind[TokenKind["Ampersand"] = 78] = "Ampersand";
    TokenKind[TokenKind["Asterisk"] = 79] = "Asterisk";
    TokenKind[TokenKind["At"] = 80] = "At";
    TokenKind[TokenKind["BackQuote"] = 81] = "BackQuote";
    TokenKind[TokenKind["Backslash"] = 82] = "Backslash";
    TokenKind[TokenKind["Caret"] = 83] = "Caret";
    TokenKind[TokenKind["CloseBrace"] = 84] = "CloseBrace";
    TokenKind[TokenKind["CloseBracket"] = 85] = "CloseBracket";
    TokenKind[TokenKind["CloseParen"] = 86] = "CloseParen";
    TokenKind[TokenKind["Colon"] = 87] = "Colon";
    TokenKind[TokenKind["Comma"] = 88] = "Comma";
    TokenKind[TokenKind["Dollar"] = 89] = "Dollar";
    TokenKind[TokenKind["DoubleQuote"] = 90] = "DoubleQuote";
    TokenKind[TokenKind["Equal"] = 91] = "Equal";
    TokenKind[TokenKind["Exclamation"] = 92] = "Exclamation";
    TokenKind[TokenKind["GreaterThan"] = 93] = "GreaterThan";
    TokenKind[TokenKind["LessThan"] = 94] = "LessThan";
    TokenKind[TokenKind["Minus"] = 95] = "Minus";
    TokenKind[TokenKind["OpenBrace"] = 96] = "OpenBrace";
    TokenKind[TokenKind["OpenBracket"] = 97] = "OpenBracket";
    TokenKind[TokenKind["OpenParen"] = 98] = "OpenParen";
    TokenKind[TokenKind["Percent"] = 99] = "Percent";
    TokenKind[TokenKind["Period"] = 100] = "Period";
    TokenKind[TokenKind["Plus"] = 101] = "Plus";
    TokenKind[TokenKind["Question"] = 102] = "Question";
    TokenKind[TokenKind["Semicolon"] = 103] = "Semicolon";
    TokenKind[TokenKind["SingleQuote"] = 104] = "SingleQuote";
    TokenKind[TokenKind["Slash"] = 105] = "Slash";
    TokenKind[TokenKind["Tilde"] = 106] = "Tilde";
    TokenKind[TokenKind["VerticalBar"] = 107] = "VerticalBar";
    // Compound punctuation
    TokenKind[TokenKind["AndEqual"] = 108] = "AndEqual";
    TokenKind[TokenKind["BooleanAnd"] = 109] = "BooleanAnd";
    TokenKind[TokenKind["BooleanOr"] = 110] = "BooleanOr";
    TokenKind[TokenKind["Coalesce"] = 111] = "Coalesce";
    TokenKind[TokenKind["CoalesceEqual"] = 112] = "CoalesceEqual";
    TokenKind[TokenKind["ConcatEqual"] = 113] = "ConcatEqual";
    TokenKind[TokenKind["Decrement"] = 114] = "Decrement";
    TokenKind[TokenKind["DivideEqual"] = 115] = "DivideEqual";
    TokenKind[TokenKind["DollarOpenBrace"] = 116] = "DollarOpenBrace";
    TokenKind[TokenKind["DoubleArrow"] = 117] = "DoubleArrow";
    TokenKind[TokenKind["DoubleColon"] = 118] = "DoubleColon";
    TokenKind[TokenKind["Ellipsis"] = 119] = "Ellipsis";
    TokenKind[TokenKind["Increment"] = 120] = "Increment";
    TokenKind[TokenKind["Inequality"] = 121] = "Inequality";
    TokenKind[TokenKind["IsEqual"] = 122] = "IsEqual";
    TokenKind[TokenKind["IsGreaterThanOrEqual"] = 123] = "IsGreaterThanOrEqual";
    TokenKind[TokenKind["IsIdentical"] = 124] = "IsIdentical";
    TokenKind[TokenKind["IsLessThanOrEqual"] = 125] = "IsLessThanOrEqual";
    TokenKind[TokenKind["IsNotEqual"] = 126] = "IsNotEqual";
    TokenKind[TokenKind["IsNotIdentical"] = 127] = "IsNotIdentical";
    TokenKind[TokenKind["MinusEqual"] = 128] = "MinusEqual";
    TokenKind[TokenKind["ModEqual"] = 129] = "ModEqual";
    TokenKind[TokenKind["MultiplyEqual"] = 130] = "MultiplyEqual";
    TokenKind[TokenKind["ObjectOperator"] = 131] = "ObjectOperator";
    TokenKind[TokenKind["OpenBraceDollar"] = 132] = "OpenBraceDollar";
    TokenKind[TokenKind["OrEqual"] = 133] = "OrEqual";
    TokenKind[TokenKind["PlusEqual"] = 134] = "PlusEqual";
    TokenKind[TokenKind["Pow"] = 135] = "Pow";
    TokenKind[TokenKind["PowEqual"] = 136] = "PowEqual";
    TokenKind[TokenKind["ShiftLeft"] = 137] = "ShiftLeft";
    TokenKind[TokenKind["ShiftLeftEqual"] = 138] = "ShiftLeftEqual";
    TokenKind[TokenKind["ShiftRight"] = 139] = "ShiftRight";
    TokenKind[TokenKind["ShiftRightEqual"] = 140] = "ShiftRightEqual";
    TokenKind[TokenKind["Spaceship"] = 141] = "Spaceship";
    TokenKind[TokenKind["XorEqual"] = 142] = "XorEqual";
    // This should be trivia, but is equivalent to ';'.
    TokenKind[TokenKind["CloseTag"] = 143] = "CloseTag";
    // This should be trivia, but is equivalent to 'echo'.
    TokenKind[TokenKind["OpenTagWithEcho"] = 144] = "OpenTagWithEcho";
    // End of file (also marks the end of language-defined tokens)
    TokenKind[TokenKind["EOF"] = 145] = "EOF";
    // Keywords (with whitespace)
    TokenKind[TokenKind["ArrayCast"] = 146] = "ArrayCast";
    TokenKind[TokenKind["BinaryCast"] = 147] = "BinaryCast";
    TokenKind[TokenKind["BoolCast"] = 148] = "BoolCast";
    TokenKind[TokenKind["BooleanCast"] = 149] = "BooleanCast";
    TokenKind[TokenKind["DoubleCast"] = 150] = "DoubleCast";
    TokenKind[TokenKind["FloatCast"] = 151] = "FloatCast";
    TokenKind[TokenKind["IntCast"] = 152] = "IntCast";
    TokenKind[TokenKind["IntegerCast"] = 153] = "IntegerCast";
    TokenKind[TokenKind["ObjectCast"] = 154] = "ObjectCast";
    TokenKind[TokenKind["RealCast"] = 155] = "RealCast";
    TokenKind[TokenKind["StringCast"] = 156] = "StringCast";
    TokenKind[TokenKind["UnsetCast"] = 157] = "UnsetCast";
    TokenKind[TokenKind["YieldFrom"] = 158] = "YieldFrom";
    // Literals
    TokenKind[TokenKind["DNumber"] = 159] = "DNumber";
    TokenKind[TokenKind["FlexdocTemplate"] = 160] = "FlexdocTemplate";
    TokenKind[TokenKind["HeredocEnd"] = 161] = "HeredocEnd";
    TokenKind[TokenKind["HeredocStart"] = 162] = "HeredocStart";
    TokenKind[TokenKind["HeredocTemplate"] = 163] = "HeredocTemplate";
    TokenKind[TokenKind["Identifier"] = 164] = "Identifier";
    TokenKind[TokenKind["InlineText"] = 165] = "InlineText";
    TokenKind[TokenKind["LNumber"] = 166] = "LNumber";
    TokenKind[TokenKind["ShellCommandTemplate"] = 167] = "ShellCommandTemplate";
    TokenKind[TokenKind["StringIdentifier"] = 168] = "StringIdentifier";
    TokenKind[TokenKind["StringIndent"] = 169] = "StringIndent";
    TokenKind[TokenKind["StringLineBreak"] = 170] = "StringLineBreak";
    TokenKind[TokenKind["StringLiteral"] = 171] = "StringLiteral";
    TokenKind[TokenKind["StringNumber"] = 172] = "StringNumber";
    TokenKind[TokenKind["StringTemplate"] = 173] = "StringTemplate";
    TokenKind[TokenKind["StringTemplateLiteral"] = 174] = "StringTemplateLiteral";
    TokenKind[TokenKind["Variable"] = 175] = "Variable";
    // Trivia
    TokenKind[TokenKind["ConflictMarkerEnd"] = 176] = "ConflictMarkerEnd";
    TokenKind[TokenKind["ConflictMarkerStart"] = 177] = "ConflictMarkerStart";
    TokenKind[TokenKind["DocumentationComment"] = 178] = "DocumentationComment";
    TokenKind[TokenKind["ElasticSpace"] = 179] = "ElasticSpace";
    TokenKind[TokenKind["ElasticTab"] = 180] = "ElasticTab";
    TokenKind[TokenKind["LineBreak"] = 181] = "LineBreak";
    TokenKind[TokenKind["MultipleLineComment"] = 182] = "MultipleLineComment";
    TokenKind[TokenKind["OpenTag"] = 183] = "OpenTag";
    TokenKind[TokenKind["RegionEnd"] = 184] = "RegionEnd";
    TokenKind[TokenKind["RegionStart"] = 185] = "RegionStart";
    TokenKind[TokenKind["ShortOpenTag"] = 186] = "ShortOpenTag";
    TokenKind[TokenKind["SingleLineComment"] = 187] = "SingleLineComment";
    TokenKind[TokenKind["Whitespace"] = 188] = "Whitespace";
})(TokenKind = exports.TokenKind || (exports.TokenKind = {}));
/**
 * Useful methods that return information about the various types of tokens.
 */
var TokenKindInfo = /** @class */ (function () {
    function TokenKindInfo() {
    }
    /**
     * Gets the text representation of a language-defined token kind, or the
     * machine name of a user-defined token kind.
     */
    TokenKindInfo.getText = function (kind) {
        switch (kind) {
            // Keywords
            case TokenKind.Abstract:
                return 'abstract';
            case TokenKind.Array:
                return 'array';
            case TokenKind.As:
                return 'as';
            case TokenKind.Break:
                return 'break';
            case TokenKind.Callable:
                return 'callable';
            case TokenKind.Case:
                return 'case';
            case TokenKind.Catch:
                return 'catch';
            case TokenKind.Class:
                return 'class';
            case TokenKind.Clone:
                return 'clone';
            case TokenKind.Const:
                return 'const';
            case TokenKind.Continue:
                return 'continue';
            case TokenKind.Declare:
                return 'declare';
            case TokenKind.Default:
                return 'default';
            case TokenKind.Die:
                return 'die';
            case TokenKind.Do:
                return 'do';
            case TokenKind.Echo:
                return 'echo';
            case TokenKind.Else:
                return 'else';
            case TokenKind.ElseIf:
                return 'elseif';
            case TokenKind.Empty:
                return 'empty';
            case TokenKind.EndDeclare:
                return 'enddeclare';
            case TokenKind.EndFor:
                return 'endfor';
            case TokenKind.EndForEach:
                return 'endforeach';
            case TokenKind.EndIf:
                return 'endif';
            case TokenKind.EndSwitch:
                return 'endswitch';
            case TokenKind.EndWhile:
                return 'endwhile';
            case TokenKind.Eval:
                return 'eval';
            case TokenKind.Exit:
                return 'exit';
            case TokenKind.Extends:
                return 'extends';
            case TokenKind.Final:
                return 'final';
            case TokenKind.Finally:
                return 'finally';
            case TokenKind.Fn:
                return 'fn';
            case TokenKind.For:
                return 'for';
            case TokenKind.ForEach:
                return 'foreach';
            case TokenKind.Function:
                return 'function';
            case TokenKind.Global:
                return 'global';
            case TokenKind.GoTo:
                return 'goto';
            case TokenKind.HaltCompiler:
                return '__halt_compiler';
            case TokenKind.If:
                return 'if';
            case TokenKind.Implements:
                return 'implements';
            case TokenKind.Include:
                return 'include';
            case TokenKind.IncludeOnce:
                return 'include_once';
            case TokenKind.InstanceOf:
                return 'instanceof';
            case TokenKind.InsteadOf:
                return 'insteadof';
            case TokenKind.Interface:
                return 'interface';
            case TokenKind.IsSet:
                return 'isset';
            case TokenKind.List:
                return 'list';
            case TokenKind.LogicalAnd:
                return 'and';
            case TokenKind.LogicalOr:
                return 'or';
            case TokenKind.LogicalXor:
                return 'xor';
            case TokenKind.MagicClass:
                return '__class__';
            case TokenKind.MagicDirectory:
                return '__dir__';
            case TokenKind.MagicFile:
                return '__file__';
            case TokenKind.MagicFunction:
                return '__function__';
            case TokenKind.MagicLine:
                return '__line__';
            case TokenKind.MagicMethod:
                return '__method__';
            case TokenKind.MagicNamespace:
                return '__namespace__';
            case TokenKind.MagicTrait:
                return '__trait__';
            case TokenKind.Namespace:
                return 'namespace';
            case TokenKind.New:
                return 'new';
            case TokenKind.Print:
                return 'print';
            case TokenKind.Private:
                return 'private';
            case TokenKind.Protected:
                return 'protected';
            case TokenKind.Public:
                return 'public';
            case TokenKind.Require:
                return 'require';
            case TokenKind.RequireOnce:
                return 'require_once';
            case TokenKind.Return:
                return 'return';
            case TokenKind.Static:
                return 'static';
            case TokenKind.Switch:
                return 'switch';
            case TokenKind.Throw:
                return 'throw';
            case TokenKind.Trait:
                return 'trait';
            case TokenKind.Try:
                return 'try';
            case TokenKind.While:
                return 'while';
            case TokenKind.Unset:
                return 'unset';
            case TokenKind.Use:
                return 'use';
            case TokenKind.Var:
                return 'var';
            case TokenKind.Yield:
                return 'yield';
            // Punctuation
            case TokenKind.Ampersand:
                return '&';
            case TokenKind.Asterisk:
                return '*';
            case TokenKind.At:
                return '@';
            case TokenKind.BackQuote:
                return '`';
            case TokenKind.Backslash:
                return '\\';
            case TokenKind.Caret:
                return '^';
            case TokenKind.CloseBrace:
                return '}';
            case TokenKind.CloseBracket:
                return ']';
            case TokenKind.CloseParen:
                return ')';
            case TokenKind.Colon:
                return ':';
            case TokenKind.Comma:
                return ',';
            case TokenKind.Dollar:
                return '$';
            case TokenKind.DoubleQuote:
                return '"';
            case TokenKind.Equal:
                return '=';
            case TokenKind.Exclamation:
                return '!';
            case TokenKind.GreaterThan:
                return '>';
            case TokenKind.LessThan:
                return '<';
            case TokenKind.Minus:
                return '-';
            case TokenKind.OpenBrace:
                return '{';
            case TokenKind.OpenBracket:
                return '[';
            case TokenKind.OpenParen:
                return '(';
            case TokenKind.Percent:
                return '%';
            case TokenKind.Period:
                return '.';
            case TokenKind.Plus:
                return '+';
            case TokenKind.Question:
                return '?';
            case TokenKind.Semicolon:
                return ';';
            case TokenKind.SingleQuote:
                return '\'';
            case TokenKind.Slash:
                return '/';
            case TokenKind.Tilde:
                return '~';
            case TokenKind.VerticalBar:
                return '|';
            // Compound punctuation
            case TokenKind.AndEqual:
                return '&=';
            case TokenKind.BooleanAnd:
                return '&&';
            case TokenKind.BooleanOr:
                return '||';
            case TokenKind.Coalesce:
                return '??';
            case TokenKind.CoalesceEqual:
                return '??=';
            case TokenKind.ConcatEqual:
                return '.=';
            case TokenKind.Decrement:
                return '--';
            case TokenKind.DivideEqual:
                return '/=';
            case TokenKind.DollarOpenBrace:
                return '${';
            case TokenKind.DoubleArrow:
                return '=>';
            case TokenKind.DoubleColon:
                return '::';
            case TokenKind.Ellipsis:
                return '...';
            case TokenKind.Increment:
                return '++';
            case TokenKind.Inequality:
                return '<>';
            case TokenKind.IsEqual:
                return '==';
            case TokenKind.IsGreaterThanOrEqual:
                return '>=';
            case TokenKind.IsIdentical:
                return '===';
            case TokenKind.IsLessThanOrEqual:
                return '<=';
            case TokenKind.IsNotEqual:
                return '!=';
            case TokenKind.IsNotIdentical:
                return '!==';
            case TokenKind.MinusEqual:
                return '-=';
            case TokenKind.ModEqual:
                return '%=';
            case TokenKind.MultiplyEqual:
                return '*=';
            case TokenKind.ObjectOperator:
                return '->';
            case TokenKind.OpenBraceDollar:
                return '{$';
            case TokenKind.OrEqual:
                return '|=';
            case TokenKind.PlusEqual:
                return '+=';
            case TokenKind.Pow:
                return '**';
            case TokenKind.PowEqual:
                return '**=';
            case TokenKind.ShiftLeft:
                return '<<';
            case TokenKind.ShiftLeftEqual:
                return '<<=';
            case TokenKind.ShiftRight:
                return '>>';
            case TokenKind.ShiftRightEqual:
                return '>>=';
            case TokenKind.Spaceship:
                return '<=>';
            case TokenKind.XorEqual:
                return '^=';
            // Tags
            case TokenKind.CloseTag:
                return '?>';
            case TokenKind.OpenTagWithEcho:
                return '<?=';
            default:
                return TokenKind[kind].toUpperCase();
        }
    };
    /**
     * Determines if the token kind represents punctuation.
     */
    TokenKindInfo.isPunctuation = function (kind) {
        if (kind >= TokenKind.Ampersand && kind <= TokenKind.XorEqual) {
            return true;
        }
        return false;
    };
    /**
     * Determines if the token kind represents a semi-reserved keyword.
     */
    TokenKindInfo.isSemiReservedKeyword = function (kind) {
        if (kind >= TokenKind.Abstract && kind <= TokenKind.Yield) {
            return true;
        }
        return false;
    };
    /**
     * Determines if the token kind is non-essential.
     */
    TokenKindInfo.isTrivia = function (kind) {
        if (kind >= TokenKind.ConflictMarkerEnd && kind <= TokenKind.Whitespace) {
            return true;
        }
        return false;
    };
    return TokenKindInfo;
}());
exports.TokenKindInfo = TokenKindInfo;
