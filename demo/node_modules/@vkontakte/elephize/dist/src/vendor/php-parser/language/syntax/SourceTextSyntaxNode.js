/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceTextSyntaxNode = void 0;
var SyntaxNode_1 = require("./SyntaxNode");
var SyntaxToken_1 = require("./SyntaxToken");
/**
 * The root node of a syntax tree.
 */
var SourceTextSyntaxNode = /** @class */ (function (_super) {
    __extends(SourceTextSyntaxNode, _super);
    function SourceTextSyntaxNode(node) {
        return _super.call(this, node, null, 0) || this;
    }
    Object.defineProperty(SourceTextSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createFirstChildNode();
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceTextSyntaxNode.prototype, "eof", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.eof, this, this.offsetAt(1), 1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceTextSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    SourceTextSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitSourceText(this);
    };
    SourceTextSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitSourceText(this);
    };
    SourceTextSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    SourceTextSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (typeof this._statements === 'undefined') {
                    this._statements = this.createFirstChildNode();
                }
                return this._statements;
            default:
                return null;
        }
    };
    return SourceTextSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.SourceTextSyntaxNode = SourceTextSyntaxNode;
