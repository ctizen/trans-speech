/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelimitedSyntaxList = exports.ManyChildSyntaxList = exports.TwoChildSyntaxList = exports.SingleChildSyntaxList = exports.SyntaxList = void 0;
var php_common_1 = require("../../../php-common");
var SyntaxNodeBase_1 = require("./SyntaxNodeBase");
/**
 * Provides a base class for a node containing a list of children.
 */
var SyntaxList = /** @class */ (function (_super) {
    __extends(SyntaxList, _super);
    /**
     * Constructs a `SyntaxList` object.
     */
    function SyntaxList(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    /**
     * Creates a syntax node for a child where its parent is the parent of this
     * list node (normally it would be the current node).
     *
     * @return {ISyntaxNode|null}
     *   The child node, or `null` if the index did not contain a node.
     */
    SyntaxList.prototype.createChildNode = function (index) {
        // Caller is assumed to have validated index range.
        php_common_1.Debug.assert(index >= 0 && index < this.node.count);
        var node = this.node.childAt(index);
        if (node !== null && !node.isToken) {
            // Lists cannot contain other lists, so this should always be a node.
            // @todo Technically there should be an assertion using a type guard here.
            return node.createSyntaxNode(this.parent, this.offsetAt(index));
        }
        return null;
    };
    return SyntaxList;
}(SyntaxNodeBase_1.SyntaxNodeBase));
exports.SyntaxList = SyntaxList;
/**
 * A syntax node that only contains a single child.
 *
 * @internal
 */
var SingleChildSyntaxList = /** @class */ (function (_super) {
    __extends(SingleChildSyntaxList, _super);
    /**
     * Constructs a `SingleChildSyntaxList` object.
     */
    function SingleChildSyntaxList(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
        // @todo Probably need to define child here to prevent check-map failures.
    }
    /**
     * @inheritDoc
     */
    SingleChildSyntaxList.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.child !== void 0 ? this.child : null;
            default:
                return null;
        }
    };
    /**
     * @inheritDoc
     */
    SingleChildSyntaxList.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this.child === void 0) {
                    this.child = this.createChildNode(0);
                }
                return this.child;
            default:
                return null;
        }
    };
    return SingleChildSyntaxList;
}(SyntaxList));
exports.SingleChildSyntaxList = SingleChildSyntaxList;
/**
 * A syntax node that only contains two children.
 *
 * @internal
 */
var TwoChildSyntaxList = /** @class */ (function (_super) {
    __extends(TwoChildSyntaxList, _super);
    /**
     * Constructs a `TwoChildSyntaxList` object.
     */
    function TwoChildSyntaxList(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    /**
     * @inheritDoc
     */
    TwoChildSyntaxList.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.firstChild !== void 0 ? this.firstChild : null;
            case 1:
                return this.secondChild !== void 0 ? this.secondChild : null;
            default:
                return null;
        }
    };
    /**
     * @inheritDoc
     */
    TwoChildSyntaxList.prototype.defineChildAt = function (index /*, createNode = true*/) {
        switch (index) {
            case 0:
                if (this.firstChild === void 0) {
                    this.firstChild = this.createChildNode(0);
                }
                return this.firstChild;
            case 1:
                if (this.secondChild === void 0) {
                    this.secondChild = this.createChildNode(1);
                }
                return this.secondChild;
            default:
                return null;
        }
    };
    return TwoChildSyntaxList;
}(SyntaxList));
exports.TwoChildSyntaxList = TwoChildSyntaxList;
/**
 * A syntax node that contains an arbitrary number of children.
 *
 * @internal
 */
var ManyChildSyntaxList = /** @class */ (function (_super) {
    __extends(ManyChildSyntaxList, _super);
    /**
     * Constructs a `ManyChildSyntaxList` object.
     */
    function ManyChildSyntaxList(list, parent, offset) {
        var _this = _super.call(this, list, parent, offset) || this;
        _this.children = new Array(list.count);
        return _this;
    }
    /**
     * @inheritDoc
     */
    ManyChildSyntaxList.prototype.childAt = function (index) {
        if (index >= 0 && index < this.children.length) {
            return this.children[index] !== void 0 ? this.children[index] : null;
        }
        return null;
    };
    /**
     * @inheritDoc
     */
    ManyChildSyntaxList.prototype.defineChildAt = function (index) {
        // Caller is assumed to have validated index range.
        php_common_1.Debug.assert(index >= 0 && index < this.children.length);
        if (this.children[index] === void 0) {
            this.children[index] = this.createChildNode(index);
        }
        return this.children[index];
    };
    return ManyChildSyntaxList;
}(SyntaxList));
exports.ManyChildSyntaxList = ManyChildSyntaxList;
/**
 * A syntax node that contains an arbitrary number of children and every other
 * child is a token.
 *
 * @todo Unused.
 *
 * @internal
 */
var DelimitedSyntaxList = /** @class */ (function (_super) {
    __extends(DelimitedSyntaxList, _super);
    function DelimitedSyntaxList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritDoc
     */
    DelimitedSyntaxList.prototype.childAt = function (index) {
        if ((index & 1) === 0) {
            return null;
        }
        return _super.prototype.childAt.call(this, index);
    };
    /**
     * @inheritDoc
     */
    DelimitedSyntaxList.prototype.defineChildAt = function (index) {
        if ((index & 1) === 0) {
            return null;
        }
        return _super.prototype.defineChildAt.call(this, index);
    };
    return DelimitedSyntaxList;
}(ManyChildSyntaxList));
exports.DelimitedSyntaxList = DelimitedSyntaxList;
