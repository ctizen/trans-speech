/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxNodeExtensions = void 0;
var SyntaxToken_1 = require("./SyntaxToken");
/**
 * Provides helper methods for working with `ISyntaxNode` objects.
 */
var SyntaxNodeExtensions = /** @class */ (function () {
    function SyntaxNodeExtensions() {
    }
    /**
     * Determines if the given object is shaped like `ISourceTextSyntaxNode`.
     */
    SyntaxNodeExtensions.isSourceTextSyntaxNode = function (node) {
        return node.eof !== void 0;
    };
    /**
     * Attempts to get the first token within the given node.
     *
     * @param {ISyntaxNodeOrList} node
     *   The parent node.
     * @param {SyntaxTokenFilter=} tokenFilter
     *   A callback used to limit what tokens are returned.
     */
    SyntaxNodeExtensions.tryGetFirstToken = function (node, tokenFilter /*, triviaFilter?: SyntaxTriviaFilter */) {
        // A recursive implementation would be simpler, but trees can be deep and
        // this method will probably be called quite a few times...
        var stack = [];
        stack.push(node.getAllChildren());
        while (stack.length > 0) {
            // Suppress TS2322: Result cannot be undefined due to while condition.
            var iterator = stack.pop();
            var result = iterator.next();
            if (result.value) {
                var child = result.value;
                if (child.isToken) {
                    var token = SyntaxToken_1.SyntaxToken.tryGetFirstToken(child, tokenFilter);
                    if (token !== null) {
                        return token;
                    }
                }
                if (!result.done) {
                    stack.push(iterator);
                }
                if (!child.isToken) {
                    stack.push(child.getAllChildren());
                }
            }
        }
        return null;
    };
    /**
     * Attempts to get the last token within the given node.
     *
     * @param {ISyntaxNodeOrList} node
     *   The parent node.
     * @param {SyntaxTokenFilter=} tokenFilter
     *   A callback used to limit what tokens are returned.
     */
    SyntaxNodeExtensions.tryGetLastToken = function (node, tokenFilter /*, triviaFilter?: SyntaxTriviaFilter */) {
        var stack = [];
        stack.push(node.getAllChildrenReversed());
        while (stack.length > 0) {
            // Suppress TS2322: Result cannot be undefined due to while condition.
            var iterator = stack.pop();
            var result = iterator.next();
            if (result.value) {
                var child = result.value;
                if (child.isToken) {
                    var token = SyntaxToken_1.SyntaxToken.tryGetLastToken(child, tokenFilter);
                    if (token !== null) {
                        return token;
                    }
                }
                if (!result.done) {
                    stack.push(iterator);
                }
                if (!child.isToken) {
                    stack.push(child.getAllChildrenReversed());
                }
            }
        }
        return null;
    };
    /**
     * Attempts to get the first token within the next node.
     *
     * So if parent node `A` has two children `B` and `C`, and the given node
     * is `B`, then this method will return the first token within `C`.
     *
     * @param {ISyntaxNode} node
     *   The current node.
     * @param {SyntaxTokenFilter=} tokenFilter
     *   A callback used to limit what tokens are returned.
     */
    SyntaxNodeExtensions.tryGetNextToken = function (node, tokenFilter) {
        var e_1, _a;
        while (node.parent !== null) {
            var found = false;
            try {
                for (var _b = (e_1 = void 0, __values(node.parent.getAllChildren())), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var child = _c.value;
                    if (found) {
                        if (child.isToken) {
                            var result = SyntaxToken_1.SyntaxToken.tryGetFirstToken(child, tokenFilter);
                            if (result !== null) {
                                return result;
                            }
                        }
                        else {
                            var result = SyntaxNodeExtensions.tryGetFirstToken(child, tokenFilter);
                            if (result !== null) {
                                return result;
                            }
                        }
                    }
                    else if (!child.isToken && node.equals(child)) {
                        found = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            node = node.parent;
        }
        return null;
    };
    /**
     * Attempts to get the last token within the previous node.
     *
     * So if parent node `A` has two children `B` and `C`, and the given node
     * is `C`, then this method will return the last token within `B`.
     *
     * @param {ISyntaxNode} node
     *   The current node.
     * @param {SyntaxTokenFilter=} tokenFilter
     *   A callback used to limit what tokens are returned.
     */
    SyntaxNodeExtensions.tryGetPreviousToken = function (node, tokenFilter) {
        var e_2, _a;
        while (node.parent !== null) {
            var found = false;
            try {
                for (var _b = (e_2 = void 0, __values(node.parent.getAllChildrenReversed())), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var child = _c.value;
                    if (found) {
                        if (child.isToken) {
                            var result = SyntaxToken_1.SyntaxToken.tryGetLastToken(child, tokenFilter);
                            if (result !== null) {
                                return result;
                            }
                        }
                        else {
                            var result = SyntaxNodeExtensions.tryGetLastToken(child, tokenFilter);
                            if (result !== null) {
                                return result;
                            }
                        }
                    }
                    else if (!child.isToken && node.equals(child)) {
                        found = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            node = node.parent;
        }
        return null;
    };
    return SyntaxNodeExtensions;
}());
exports.SyntaxNodeExtensions = SyntaxNodeExtensions;
