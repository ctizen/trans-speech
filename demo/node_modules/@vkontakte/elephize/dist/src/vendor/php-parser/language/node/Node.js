/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = void 0;
var NodeBase_1 = require("./NodeBase");
/**
 * Provides a base class for all non-terminal nodes in a tree.
 */
var Node = /** @class */ (function (_super) {
    __extends(Node, _super);
    function Node() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritDoc
     */
    Node.prototype.equals = function (value) {
        // IMPORTANT: This is a performance critical method.
        // Reference equality, skip everything.
        if (this === value) {
            return true;
        }
        var count = this.count; // This property is actually a "getter".
        if (this._flags === value.flags && this._fullWidth === value.fullWidth && count === value.count) {
            for (var i = 0; i < count; i++) {
                var child1 = this.childAt(i);
                var child2 = value.childAt(i);
                if ((child1 !== null) !== (child2 !== null)) {
                    return false;
                }
                // Suppress TS2345: Transitive property prevents value(s) from being `null`.
                if (child1 !== null && !child1.equals(child2)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    return Node;
}(NodeBase_1.NodeBase));
exports.Node = Node;
