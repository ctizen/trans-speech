/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxDiagnostic = void 0;
var Diagnostic_1 = require("./Diagnostic");
var ErrorCodeInfo_Generated_1 = require("./ErrorCodeInfo.Generated");
/**
 * Represents a diagnostic in a syntax tree.
 */
var SyntaxDiagnostic = /** @class */ (function (_super) {
    __extends(SyntaxDiagnostic, _super);
    /**
     * Constructs a `SyntaxDiagnostic` object.
     *
     * @param {number} offset
     *   The location of the diagnostic relative to a node.
     * @param {number} width
     *   The width of the diagnostic.
     * @param {ErrorCode} code
     *   An identification number for the diagnostic.
     * @param {...any[]} messageArgs
     *   A list of replacement values for a diagnostic message.
     */
    function SyntaxDiagnostic(offset, width, code) {
        var messageArgs = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            messageArgs[_i - 3] = arguments[_i];
        }
        var _this = _super.apply(this, __spreadArray([code], __read(messageArgs))) || this;
        _this.offset = offset;
        _this.width = width;
        var severity = ErrorCodeInfo_Generated_1.ErrorCodeInfo.getSeverity(code);
        _this.setOriginalSeverity(severity);
        _this.setSeverity(severity);
        return _this;
    }
    /**
     * Creates a copy of the diagnostic with the given offset.
     */
    SyntaxDiagnostic.prototype.withOffset = function (offset) {
        return new SyntaxDiagnostic(offset, this.width, this.code, this.messageArgs);
    };
    /**
     * Creates a copy of the diagnostic with the given severity.
     *
     * @todo Unused.
     */
    SyntaxDiagnostic.prototype.withSeverity = function (severity) {
        // @todo Should probably check if the diagnostic is configurable.
        var diagnostic = new (SyntaxDiagnostic.bind.apply(SyntaxDiagnostic, __spreadArray([void 0, this.offset, this.width, this.code], __read(this.messageArgs))))();
        diagnostic.setSeverity(severity);
        return diagnostic;
    };
    return SyntaxDiagnostic;
}(Diagnostic_1.Diagnostic));
exports.SyntaxDiagnostic = SyntaxDiagnostic;
