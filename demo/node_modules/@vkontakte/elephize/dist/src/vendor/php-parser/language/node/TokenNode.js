/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MissingTokenWithTriviaNode = exports.TokenWithTriviaNode = exports.TokenNode = void 0;
var php_common_1 = require("../../../php-common");
var Node_1 = require("./Node");
/**
 * A token that is part of the language syntax.
 */
var TokenNode = /** @class */ (function (_super) {
    __extends(TokenNode, _super);
    /**
     * Constructs a `TokenNode` object.
     *
     * @param {TokenKind} kind
     *   The type of the token.
     * @param {number} width
     *   The width of the token.
     * @param {ReadonlyArray<SyntaxDiagnostic>=} diagnostics
     *   A list of diagnostics associated with the trivia token.
     */
    function TokenNode(kind, width, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 8 /* IsNotMissing */;
        _this._fullWidth = width;
        _this.hash = 0;
        _this.kind = kind;
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(TokenNode.prototype, "flags", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TokenNode.prototype, "fullWidth", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TokenNode.prototype, "isToken", {
        /**
         * @inheritDoc
         */
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TokenNode.prototype, "leadingTrivia", {
        /**
         * @inheritdoc
         */
        get: function () {
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TokenNode.prototype, "leadingTriviaWidth", {
        /**
         * @inheritDoc
         */
        get: function () {
            var trivia = this.leadingTrivia;
            return trivia !== null ? trivia.fullWidth : 0;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    TokenNode.prototype.accept = function (visitor) {
        visitor.visitToken(this);
    };
    /**
     * @inheritDoc
     */
    TokenNode.prototype.acceptResult = function (visitor) {
        return visitor.visitToken(this);
    };
    /**
     * @inheritDoc
     */
    TokenNode.prototype.childAt = function (index) {
        throw new php_common_1.InvalidOperationException('Unreachable');
    };
    /**
     * @inheritDoc
     */
    TokenNode.prototype.createSyntaxNode = function (parent, offset) {
        throw new php_common_1.InvalidOperationException('Unreachable');
    };
    /**
     * @inheritDoc
     */
    TokenNode.prototype.equals = function (value) {
        // IMPORTANT: This is a performance critical method.
        if (this === value) {
            return true;
        }
        if (this.kind === value.kind && this._fullWidth === value.fullWidth && this._flags === value.flags) {
            return true;
        }
        return false;
    };
    /**
     * @inheritDoc
     */
    TokenNode.prototype.hashCode = function () {
        // IMPORTANT: This is a performance critical method.
        if (this.hash === 0) {
            this.hash = TokenNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    /**
     * @inheritDoc
     */
    TokenNode.prototype.withDiagnostics = function (diagnostics) {
        return new TokenNode(this.kind, this._fullWidth, diagnostics);
    };
    /**
     * Returns a new token with the given leading trivia.
     */
    TokenNode.prototype.withLeadingTrivia = function (leadingTrivia) {
        // This is already a token without trivia; do not create a new object.
        if (leadingTrivia === null) {
            return this;
        }
        return new TokenWithTriviaNode(this.kind, this.width, leadingTrivia, this.diagnostics);
    };
    /**
     * @inheritDoc
     */
    TokenNode.prototype.computeHashCode = function () {
        return php_common_1.Hash.combine(this._fullWidth, this._flags ^ (this.kind + 8192));
    };
    /**
     * @inheritDoc
     */
    TokenNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return TokenNode;
}(Node_1.Node));
exports.TokenNode = TokenNode;
/**
 * A token that is part of the language syntax and is preceeded by trivia.
 *
 * @internal
 */
var TokenWithTriviaNode = /** @class */ (function (_super) {
    __extends(TokenWithTriviaNode, _super);
    /**
     * Constructs a `TokenWithTriviaNode`.
     *
     * @param {TokenKind} kind
     *   The type of the token.
     * @param {number} width
     *   The width of the token.
     * @param {NodeList|null} leadingTrivia
     *   A collection of irrelevant tokens prior to the token.
     * @param {ReadonlyArray<SyntaxDiagnostic>=} diagnostics
     *   A list of diagnostics associated with the trivia token.
     */
    function TokenWithTriviaNode(kind, width, leadingTrivia, diagnostics) {
        var _this = _super.call(this, kind, width, diagnostics) || this;
        _this._leadingTrivia = leadingTrivia;
        if (leadingTrivia !== null) {
            _this.updateFlagsAndWidth(leadingTrivia.flags, leadingTrivia.fullWidth);
        }
        return _this;
    }
    Object.defineProperty(TokenWithTriviaNode.prototype, "leadingTrivia", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._leadingTrivia;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    TokenWithTriviaNode.prototype.equals = function (value) {
        // IMPORTANT: This is a performance critical method.
        if (this === value) {
            return true;
        }
        if ((this._leadingTrivia !== null) !== (value._leadingTrivia !== null)) {
            return false;
        }
        if (value._leadingTrivia !== null && !this.triviaEquals(value._leadingTrivia)) {
            return false;
        }
        // Do not use `super`. Call the parent method directly.
        return TokenNode.prototype.equals.call(this, value);
    };
    /**
     * @inheritDoc
     */
    TokenWithTriviaNode.prototype.hashCode = function () {
        // IMPORTANT: This is a performance critical method.
        if (this.hash === 0) {
            this.hash = TokenWithTriviaNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    /**
     * @inheritDoc
     */
    TokenWithTriviaNode.prototype.withDiagnostics = function (diagnostics) {
        return new TokenWithTriviaNode(this.kind, this.width, this._leadingTrivia, diagnostics);
    };
    /**
     * Returns a new token with the given leading trivia.
     */
    TokenWithTriviaNode.prototype.withLeadingTrivia = function (leadingTrivia) {
        return new TokenWithTriviaNode(this.kind, this.width, leadingTrivia, this.diagnostics);
    };
    /**
     * @inheritDoc
     */
    TokenWithTriviaNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ (this.kind + 8192));
        hash = this._leadingTrivia !== null ? php_common_1.Hash.combine(this._leadingTrivia.hashCode(), hash) : hash;
        return hash;
    };
    /**
     * Isolates the leading trivia `equals()` call for V8 optimization.
     */
    TokenWithTriviaNode.prototype.triviaEquals = function (leadingTrivia) {
        return this._leadingTrivia !== null && this._leadingTrivia.equals(leadingTrivia);
    };
    return TokenWithTriviaNode;
}(TokenNode));
exports.TokenWithTriviaNode = TokenWithTriviaNode;
/**
 * A token that is part of the language syntax, but is not present in the
 * source text.
 *
 * @internal
 */
var MissingTokenWithTriviaNode = /** @class */ (function (_super) {
    __extends(MissingTokenWithTriviaNode, _super);
    /**
     * Constructs a `MissingTokenWithTriviaNode`.
     *
     * @param {TokenKind} kind
     *   The type of the token.
     * @param {NodeList|null} leadingTrivia
     *   A collection of irrelevant tokens prior to the token.
     * @param {SyntaxDiagnostic[]=} diagnostics
     *   A list of diagnostics associated with the trivia token.
     */
    function MissingTokenWithTriviaNode(kind, leadingTrivia, diagnostics) {
        var _this = _super.call(this, kind, 0, leadingTrivia, diagnostics) || this;
        _this._flags &= ~8 /* IsNotMissing */;
        return _this;
    }
    /**
     * @inheritDoc
     */
    MissingTokenWithTriviaNode.prototype.withDiagnostics = function (diagnostics) {
        return new MissingTokenWithTriviaNode(this.kind, this._leadingTrivia, diagnostics);
    };
    /**
     * Returns a new token with the given leading trivia.
     */
    MissingTokenWithTriviaNode.prototype.withLeadingTrivia = function (leadingTrivia) {
        return new MissingTokenWithTriviaNode(this.kind, leadingTrivia, this.diagnostics);
    };
    return MissingTokenWithTriviaNode;
}(TokenWithTriviaNode));
exports.MissingTokenWithTriviaNode = MissingTokenWithTriviaNode;
