/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SegmentedText = void 0;
var php_common_1 = require("../../php-common");
var SourceTextBase_1 = require("./SourceTextBase");
var SourceTextFactory_1 = require("./SourceTextFactory");
var TextSpan_1 = require("./TextSpan");
/**
 * A segment of another source text.
 *
 * @internal
 */
var SegmentedText = /** @class */ (function (_super) {
    __extends(SegmentedText, _super);
    /**
     * Constructs a `SegmentedText` object.
     *
     * @param {ISourceText} text
     *   The source text that contains the segment.
     * @param {TextSpan} span
     *   The starting position and length of the segment.
     * @param {Encoding} encoding
     *   The original encoding of the source text.
     *
     * @throws {ArgumentOutOfRangeException}
     *   The span did not specify a region within the source text.
     */
    function SegmentedText(text, span, encoding) {
        var _this = _super.call(this) || this;
        if (span.start < 0 || span.start >= text.length || span.end < 0 || span.end > text.length) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        _this.encoding = encoding;
        _this.length = span.length;
        _this.sourceKey = text;
        _this.sourceLength = text.length;
        _this.sources = [_this];
        _this.span = span;
        _this.text = text;
        return _this;
    }
    /**
     * @inheritDoc
     */
    SegmentedText.prototype.charCodeAt = function (offset) {
        if (offset < 0 || offset >= this.length) {
            return NaN;
        }
        return this.text.charCodeAt(this.span.start + offset);
    };
    /**
     * @inheritDoc
     */
    SegmentedText.prototype.slice = function (position) {
        if (typeof position === 'number') {
            position = TextSpan_1.TextSpan.fromBounds(position, this.length);
        }
        if (!this.isSpanInText(position)) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        if (position.length === 0) {
            return SourceTextFactory_1.SourceTextFactory.EmptyText;
        }
        var segmentSpan = this.createSegmentSpan(position.start, position.length);
        return new SegmentedText(this.text, segmentSpan, this.encoding);
    };
    /**
     * @inheritDoc
     */
    SegmentedText.prototype.substring = function (start, length) {
        if (start < 0) {
            start = this.length + start;
        }
        if (start < 0 || start > this.length) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        if (length === void 0) {
            length = this.length - start;
        }
        if (length < 0) {
            length = 0;
        }
        if (length > this.length - start) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        var segmentSpan = this.createSegmentSpan(start, length);
        return this.text.substring(segmentSpan.start, segmentSpan.length);
    };
    /**
     * @inheritDoc
     */
    SegmentedText.prototype.withEncoding = function (encoding) {
        return new SegmentedText(this.text, this.span, encoding);
    };
    /**
     * Creates a span relative to the source text that contains this segment.
     *
     * @param {number} start
     *   The starting location of the span.
     * @param {number} length
     *   The number of characters in the span.
     */
    SegmentedText.prototype.createSegmentSpan = function (start, length) {
        var spanStart = Math.min(this.text.length, this.span.start + start);
        var spanEnd = Math.min(this.text.length, spanStart + length);
        return new TextSpan_1.TextSpan(spanStart, spanEnd - spanStart);
    };
    return SegmentedText;
}(SourceTextBase_1.SourceTextBase));
exports.SegmentedText = SegmentedText;
