/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Diagnostic = void 0;
var DiagnosticSeverity_1 = require("./DiagnosticSeverity");
/**
 * A base class for storing diagnostic information.
 */
var Diagnostic = /** @class */ (function () {
    /**
     * Constructs a `Diagnostic` object.
     *
     * @todo Add parameter to override severity?
     *
     * @param {number} code
     *   An identification number for the diagnostic.
     * @param {...any[]} messageArgs
     *   A list of replacement values for a diagnostic message.
     */
    function Diagnostic(code) {
        var messageArgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            messageArgs[_i - 1] = arguments[_i];
        }
        this.code = code;
        this.messageArgs = messageArgs;
        this.internalSeverity = 0; // Equivalent to `DiagnosticSeverity.Hint`.
    }
    Object.defineProperty(Diagnostic.prototype, "isConfigurable", {
        /**
         * Determines if the diagnostic severity can be changed.
         */
        get: function () {
            return this.originalSeverity !== DiagnosticSeverity_1.DiagnosticSeverity.Error;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Diagnostic.prototype, "isElevatedWarning", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.originalSeverity === DiagnosticSeverity_1.DiagnosticSeverity.Warning &&
                this.severity === DiagnosticSeverity_1.DiagnosticSeverity.Error;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Diagnostic.prototype, "originalSeverity", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.internalSeverity >> 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Diagnostic.prototype, "severity", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.internalSeverity & Diagnostic.SeverityMask;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the original severity of the diagnostic.
     */
    Diagnostic.prototype.setOriginalSeverity = function (severity) {
        this.internalSeverity = (this.internalSeverity & Diagnostic.SeverityMask) | (severity << 3);
    };
    /**
     * Sets the current severity of the diagnostic.
     */
    Diagnostic.prototype.setSeverity = function (severity) {
        this.internalSeverity = (this.internalSeverity & (Diagnostic.SeverityMask << 3)) | severity;
    };
    /**
     * A bit mask used to store and retrieve severity information.
     */
    Diagnostic.SeverityMask = (1 << 3) - 1; // 0b000111
    return Diagnostic;
}());
exports.Diagnostic = Diagnostic;
