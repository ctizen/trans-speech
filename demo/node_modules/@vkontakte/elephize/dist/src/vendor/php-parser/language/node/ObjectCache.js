/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectCache = exports.ObjectCacheEntry = void 0;
/**
 * An entry in the object cache hash table.
 *
 * This class is really just a minor optimization to prevent recalculating
 * the hash code of the stored value.
 *
 * @template T
 */
var ObjectCacheEntry = /** @class */ (function () {
    /**
     * Constructs an `ObjectCacheEntry<T>` object.
     *
     * @param {number} hashCode
     *   The hash code of the object.
     * @param {T} value
     *   The object.
     */
    function ObjectCacheEntry(hashCode, value) {
        this.hashCode = hashCode;
        this.value = value;
    }
    return ObjectCacheEntry;
}());
exports.ObjectCacheEntry = ObjectCacheEntry;
/**
 * Provides a cache for storing objects.
 *
 * @template T
 */
var ObjectCache = /** @class */ (function () {
    /**
     * Constructs an `ObjectCache` object.
     *
     * @param {number} bitSize
     *   The size of the cache, in bits, so the size will be 2^n.
     */
    function ObjectCache(bitSize) {
        this.cacheSize = 1 << bitSize;
        this.cacheMask = this.cacheSize - 1;
        this.cache = new Array(this.cacheSize);
    }
    /**
     * Determines if an object has already been cached.
     *
     * NOTE: In order to prevent V8 from dereferencing the value, this method
     * takes the hash code as a parameter. This may be changed in the future.
     */
    ObjectCache.prototype.has = function (value, hash) {
        if (value === null) {
            return true;
        }
        var index = hash & this.cacheMask;
        var entry = this.cache[index];
        return entry !== void 0 && entry.value === value;
    };
    /**
     * Adds an object to the cache.
     *
     * NOTE: In order to prevent V8 from dereferencing the value, this method
     * takes the hash code as a parameter. This may be changed in the future.
     */
    ObjectCache.prototype.set = function (value, hash) {
        var index = hash & this.cacheMask;
        this.cache[index] = new ObjectCacheEntry(hash, value);
    };
    /**
     * Attempts to get an equivalent object from the cache.
     */
    ObjectCache.prototype.tryGetObject = function (value, hash) {
        var index = hash & this.cacheMask;
        var entry = this.cache[index];
        // Not cached.
        if (entry === void 0) {
            return null;
        }
        // Reference equality.
        if (entry.value === value) {
            return value;
        }
        // Object at index must be equivalent.
        if (entry.hashCode === hash && entry.value.equals(value)) {
            return entry.value;
        }
        return null;
    };
    return ObjectCache;
}());
exports.ObjectCache = ObjectCache;
