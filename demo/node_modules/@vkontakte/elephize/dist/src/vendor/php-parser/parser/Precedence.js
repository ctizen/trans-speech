/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Precedence = void 0;
/**
 * Represents the precedence levels of a terminal symbol.
 *
 * This is used to resolve conflicts by comparing a rule's precedence to that
 * of the look-ahead token. If the token's precedence is higher, the parser
 * will consume it (shift). If the rule's precedence is higher, the parser will
 * create a node using the previously parsed tokens (reduce). If both precedence
 * levels are equal, the decision is made using the token's associativity.
 */
var Precedence;
(function (Precedence) {
    Precedence[Precedence["None"] = 0] = "None";
    Precedence[Precedence["LogicalOr"] = 1] = "LogicalOr";
    Precedence[Precedence["LogicalXor"] = 2] = "LogicalXor";
    Precedence[Precedence["LogicalAnd"] = 3] = "LogicalAnd";
    Precedence[Precedence["Assignment"] = 4] = "Assignment";
    Precedence[Precedence["Ternary"] = 5] = "Ternary";
    Precedence[Precedence["Coalesce"] = 6] = "Coalesce";
    Precedence[Precedence["BooleanOr"] = 7] = "BooleanOr";
    Precedence[Precedence["BooleanAnd"] = 8] = "BooleanAnd";
    Precedence[Precedence["BitwiseOr"] = 9] = "BitwiseOr";
    Precedence[Precedence["BitwiseXor"] = 10] = "BitwiseXor";
    Precedence[Precedence["BitwiseAnd"] = 11] = "BitwiseAnd";
    Precedence[Precedence["Equality"] = 12] = "Equality";
    Precedence[Precedence["Relational"] = 13] = "Relational";
    Precedence[Precedence["Shift"] = 14] = "Shift";
    Precedence[Precedence["Add"] = 15] = "Add";
    Precedence[Precedence["Multiply"] = 16] = "Multiply";
    Precedence[Precedence["LogicalNot"] = 17] = "LogicalNot";
    Precedence[Precedence["InstanceOf"] = 18] = "InstanceOf";
    Precedence[Precedence["Unary"] = 19] = "Unary";
    Precedence[Precedence["Pow"] = 20] = "Pow";
})(Precedence = exports.Precedence || (exports.Precedence = {}));
