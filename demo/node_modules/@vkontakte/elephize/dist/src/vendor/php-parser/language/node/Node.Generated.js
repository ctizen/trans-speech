/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ----------------------------------------------------------------------------
// THIS IS A GENERATED FILE. DO NOT MODIFY.
// ----------------------------------------------------------------------------
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassConstantDeclarationNode = exports.ClassConstantNode = exports.BreakNode = exports.BinaryNode = exports.AssignmentNode = exports.ArrowFunctionNode = exports.ArrayNode = exports.AnonymousObjectCreationNode = exports.AnonymousFunctionNode = exports.VariableNode = exports.TypeDeclarationNode = exports.SelectionNode = exports.ScopedInvocationNode = exports.ScopedAccessNode = exports.ObjectCreationNode = exports.MemberInvocationNode = exports.MemberAccessNode = exports.JumpNode = exports.IterationNode = exports.InvocationNode = exports.IntrinsicNode = exports.UseElementNode = exports.TryFinallyNode = exports.TryCatchNode = exports.TraitPrecedenceNode = exports.SwitchCaseNode = exports.StaticElementNode = exports.PropertyElementNode = exports.ParameterNode = exports.MethodReferenceNode = exports.ListDestructureElementNode = exports.ListDestructureNode = exports.IncompleteReferencedTraitAdaptationNode = exports.IncompleteNamedTraitAdaptationNode = exports.FlexibleHeredocElementNode = exports.ElseIfBlockNode = exports.ElseIfNode = exports.ElseBlockNode = exports.ElseNode = exports.ConstantElementNode = exports.ClosureUseNode = exports.ClassConstantElementNode = exports.ArrayElementNode = exports.ArgumentNode = exports.AnonymousClassNode = exports.TypeNode = exports.TraitAliasNode = exports.StatementNode = exports.NameNode = exports.ExpressionNode = void 0;
exports.NamedObjectCreationNode = exports.NamedMethodInvocationNode = exports.NamedMemberAccessNode = exports.MethodDeclarationNode = exports.LocalVariableNode = exports.LiteralNode = exports.LexicalVariableNode = exports.LabelNode = exports.IsSetIntrinsicNode = exports.InterfaceDeclarationNode = exports.InstanceOfNode = exports.IndirectVariableNode = exports.IndirectStringVariableNode = exports.IndirectScopedInvocationNode = exports.IndirectObjectCreationNode = exports.IndirectMethodInvocationNode = exports.IndirectMemberAccessNode = exports.IncompleteMemberNode = exports.IfBlockNode = exports.IfNode = exports.HeredocTemplateNode = exports.HaltCompilerNode = exports.GoToNode = exports.GlobalNode = exports.FunctionInvocationNode = exports.FunctionDeclarationNode = exports.FullyQualifiedNameNode = exports.ForEachBlockNode = exports.ForEachNode = exports.ForBlockNode = exports.ForNode = exports.FlexibleHeredocTemplateNode = exports.ExpressionStatementNode = exports.ExpressionGroupNode = exports.ExitIntrinsicNode = exports.EvalIntrinsicNode = exports.ErrorControlNode = exports.EmptyIntrinsicNode = exports.ElementAccessNode = exports.EchoNode = exports.DoWhileNode = exports.DestructuringAssignmentNode = exports.DeclareBlockNode = exports.DeclareNode = exports.ContinueNode = exports.ConstantDeclarationNode = exports.ConstantNode = exports.ConditionalNode = exports.CloneNode = exports.ClassDeclarationNode = void 0;
exports.YieldFromNode = exports.YieldNode = exports.WhileBlockNode = exports.WhileNode = exports.UseGroupDeclarationNode = exports.UseDeclarationNode = exports.UnsetNode = exports.UnaryNode = exports.TryNode = exports.TraitUseGroupNode = exports.TraitUseNode = exports.TraitDeclarationNode = exports.ThrowNode = exports.SwitchBlockNode = exports.SwitchNode = exports.StringVariableNode = exports.StringTemplateNode = exports.StringExpressionNode = exports.StringElementAccessNode = exports.StaticPropertyNode = exports.StaticNode = exports.StatementBlockNode = exports.ShellCommandTemplateNode = exports.ScriptInclusionNode = exports.ReturnNode = exports.RelativeNameNode = exports.ReferencedTraitAliasNode = exports.PropertyDeclarationNode = exports.PrintIntrinsicNode = exports.PredefinedTypeNode = exports.PostfixUnaryNode = exports.PartiallyQualifiedNameNode = exports.NamespaceGroupDeclarationNode = exports.NamespaceDeclarationNode = exports.NamedTypeNode = exports.NamedTraitAliasNode = exports.NamedScopedInvocationNode = void 0;
var php_common_1 = require("../../../php-common");
var SyntaxNode_Generated_1 = require("../syntax/SyntaxNode.Generated");
var Node_1 = require("./Node");
var ExpressionNode = /** @class */ (function (_super) {
    __extends(ExpressionNode, _super);
    function ExpressionNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ExpressionNode;
}(Node_1.Node));
exports.ExpressionNode = ExpressionNode;
var NameNode = /** @class */ (function (_super) {
    __extends(NameNode, _super);
    function NameNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NameNode;
}(Node_1.Node));
exports.NameNode = NameNode;
var StatementNode = /** @class */ (function (_super) {
    __extends(StatementNode, _super);
    function StatementNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return StatementNode;
}(Node_1.Node));
exports.StatementNode = StatementNode;
var TraitAliasNode = /** @class */ (function (_super) {
    __extends(TraitAliasNode, _super);
    function TraitAliasNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TraitAliasNode;
}(Node_1.Node));
exports.TraitAliasNode = TraitAliasNode;
var TypeNode = /** @class */ (function (_super) {
    __extends(TypeNode, _super);
    function TypeNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TypeNode;
}(Node_1.Node));
exports.TypeNode = TypeNode;
var AnonymousClassNode = /** @class */ (function (_super) {
    __extends(AnonymousClassNode, _super);
    function AnonymousClassNode(classKeyword, openParen, argumentList, closeParen, extendsKeyword, baseType, implementsKeyword, interfaces, openBrace, members, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.classKeyword = classKeyword;
        _this.openParen = openParen;
        _this.argumentList = argumentList;
        _this.closeParen = closeParen;
        _this.extendsKeyword = extendsKeyword;
        _this.baseType = baseType;
        _this.implementsKeyword = implementsKeyword;
        _this.interfaces = interfaces;
        _this.openBrace = openBrace;
        _this.members = members;
        _this.closeBrace = closeBrace;
        _this.updateFlagsAndWidth(classKeyword.flags, classKeyword.fullWidth);
        if (openParen !== null) {
            _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        }
        if (argumentList !== null) {
            _this.updateFlagsAndWidth(argumentList.flags, argumentList.fullWidth);
        }
        if (closeParen !== null) {
            _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        }
        if (extendsKeyword !== null) {
            _this.updateFlagsAndWidth(extendsKeyword.flags, extendsKeyword.fullWidth);
        }
        if (baseType !== null) {
            _this.updateFlagsAndWidth(baseType.flags, baseType.fullWidth);
        }
        if (implementsKeyword !== null) {
            _this.updateFlagsAndWidth(implementsKeyword.flags, implementsKeyword.fullWidth);
        }
        if (interfaces !== null) {
            _this.updateFlagsAndWidth(interfaces.flags, interfaces.fullWidth);
        }
        _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        if (members !== null) {
            _this.updateFlagsAndWidth(members.flags, members.fullWidth);
        }
        _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(AnonymousClassNode.prototype, "count", {
        get: function () {
            return 11;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    AnonymousClassNode.prototype.accept = function (visitor) {
        visitor.visitAnonymousClass(this);
    };
    AnonymousClassNode.prototype.acceptResult = function (visitor) {
        return visitor.visitAnonymousClass(this);
    };
    AnonymousClassNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.classKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.argumentList;
            case 3:
                return this.closeParen;
            case 4:
                return this.extendsKeyword;
            case 5:
                return this.baseType;
            case 6:
                return this.implementsKeyword;
            case 7:
                return this.interfaces;
            case 8:
                return this.openBrace;
            case 9:
                return this.members;
            case 10:
                return this.closeBrace;
            default:
                return null;
        }
    };
    AnonymousClassNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.AnonymousClassSyntaxNode(this, parent, offset);
    };
    AnonymousClassNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = AnonymousClassNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    AnonymousClassNode.prototype.withDiagnostics = function (diagnostics) {
        return new AnonymousClassNode(this.classKeyword, this.openParen, this.argumentList, this.closeParen, this.extendsKeyword, this.baseType, this.implementsKeyword, this.interfaces, this.openBrace, this.members, this.closeBrace, diagnostics);
    };
    AnonymousClassNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8714);
        hash = php_common_1.Hash.combine(this.classKeyword.hashCode(), hash);
        hash = this.openParen !== null ? php_common_1.Hash.combine(this.openParen.hashCode(), hash) : hash;
        hash = this.argumentList !== null ? php_common_1.Hash.combine(this.argumentList.hashCode(), hash) : hash;
        hash = this.closeParen !== null ? php_common_1.Hash.combine(this.closeParen.hashCode(), hash) : hash;
        hash = this.extendsKeyword !== null ? php_common_1.Hash.combine(this.extendsKeyword.hashCode(), hash) : hash;
        hash = this.baseType !== null ? php_common_1.Hash.combine(this.baseType.hashCode(), hash) : hash;
        hash = this.implementsKeyword !== null ? php_common_1.Hash.combine(this.implementsKeyword.hashCode(), hash) : hash;
        hash = this.interfaces !== null ? php_common_1.Hash.combine(this.interfaces.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.openBrace.hashCode(), hash);
        hash = this.members !== null ? php_common_1.Hash.combine(this.members.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeBrace.hashCode(), hash);
        return hash;
    };
    AnonymousClassNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return AnonymousClassNode;
}(Node_1.Node));
exports.AnonymousClassNode = AnonymousClassNode;
var ArgumentNode = /** @class */ (function (_super) {
    __extends(ArgumentNode, _super);
    function ArgumentNode(ellipsis, value, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.ellipsis = ellipsis;
        _this.value = value;
        if (ellipsis !== null) {
            _this.updateFlagsAndWidth(ellipsis.flags, ellipsis.fullWidth);
        }
        _this.updateFlagsAndWidth(value.flags, value.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ArgumentNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArgumentNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArgumentNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ArgumentNode.prototype.accept = function (visitor) {
        visitor.visitArgument(this);
    };
    ArgumentNode.prototype.acceptResult = function (visitor) {
        return visitor.visitArgument(this);
    };
    ArgumentNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.ellipsis;
            case 1:
                return this.value;
            default:
                return null;
        }
    };
    ArgumentNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ArgumentSyntaxNode(this, parent, offset);
    };
    ArgumentNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ArgumentNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ArgumentNode.prototype.withDiagnostics = function (diagnostics) {
        return new ArgumentNode(this.ellipsis, this.value, diagnostics);
    };
    ArgumentNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8715);
        hash = this.ellipsis !== null ? php_common_1.Hash.combine(this.ellipsis.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.value.hashCode(), hash);
        return hash;
    };
    ArgumentNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ArgumentNode;
}(Node_1.Node));
exports.ArgumentNode = ArgumentNode;
var ArrayElementNode = /** @class */ (function (_super) {
    __extends(ArrayElementNode, _super);
    function ArrayElementNode(key, doubleArrow, valueOperator, value, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.key = key;
        _this.doubleArrow = doubleArrow;
        _this.valueOperator = valueOperator;
        _this.value = value;
        if (key !== null) {
            _this.updateFlagsAndWidth(key.flags, key.fullWidth);
        }
        if (doubleArrow !== null) {
            _this.updateFlagsAndWidth(doubleArrow.flags, doubleArrow.fullWidth);
        }
        if (valueOperator !== null) {
            _this.updateFlagsAndWidth(valueOperator.flags, valueOperator.fullWidth);
        }
        _this.updateFlagsAndWidth(value.flags, value.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ArrayElementNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrayElementNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrayElementNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ArrayElementNode.prototype.accept = function (visitor) {
        visitor.visitArrayElement(this);
    };
    ArrayElementNode.prototype.acceptResult = function (visitor) {
        return visitor.visitArrayElement(this);
    };
    ArrayElementNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.key;
            case 1:
                return this.doubleArrow;
            case 2:
                return this.valueOperator;
            case 3:
                return this.value;
            default:
                return null;
        }
    };
    ArrayElementNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ArrayElementSyntaxNode(this, parent, offset);
    };
    ArrayElementNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ArrayElementNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ArrayElementNode.prototype.withDiagnostics = function (diagnostics) {
        return new ArrayElementNode(this.key, this.doubleArrow, this.valueOperator, this.value, diagnostics);
    };
    ArrayElementNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8716);
        hash = this.key !== null ? php_common_1.Hash.combine(this.key.hashCode(), hash) : hash;
        hash = this.doubleArrow !== null ? php_common_1.Hash.combine(this.doubleArrow.hashCode(), hash) : hash;
        hash = this.valueOperator !== null ? php_common_1.Hash.combine(this.valueOperator.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.value.hashCode(), hash);
        return hash;
    };
    ArrayElementNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ArrayElementNode;
}(Node_1.Node));
exports.ArrayElementNode = ArrayElementNode;
var ClassConstantElementNode = /** @class */ (function (_super) {
    __extends(ClassConstantElementNode, _super);
    function ClassConstantElementNode(identifierOrKeyword, equal, expression, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.identifierOrKeyword = identifierOrKeyword;
        _this.equal = equal;
        _this.expression = expression;
        _this.updateFlagsAndWidth(identifierOrKeyword.flags, identifierOrKeyword.fullWidth);
        _this.updateFlagsAndWidth(equal.flags, equal.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ClassConstantElementNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantElementNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantElementNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ClassConstantElementNode.prototype.accept = function (visitor) {
        visitor.visitClassConstantElement(this);
    };
    ClassConstantElementNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClassConstantElement(this);
    };
    ClassConstantElementNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.identifierOrKeyword;
            case 1:
                return this.equal;
            case 2:
                return this.expression;
            default:
                return null;
        }
    };
    ClassConstantElementNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ClassConstantElementSyntaxNode(this, parent, offset);
    };
    ClassConstantElementNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ClassConstantElementNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ClassConstantElementNode.prototype.withDiagnostics = function (diagnostics) {
        return new ClassConstantElementNode(this.identifierOrKeyword, this.equal, this.expression, diagnostics);
    };
    ClassConstantElementNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8717);
        hash = php_common_1.Hash.combine(this.identifierOrKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.equal.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        return hash;
    };
    ClassConstantElementNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ClassConstantElementNode;
}(Node_1.Node));
exports.ClassConstantElementNode = ClassConstantElementNode;
var ClosureUseNode = /** @class */ (function (_super) {
    __extends(ClosureUseNode, _super);
    function ClosureUseNode(useKeyword, openParen, variables, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.useKeyword = useKeyword;
        _this.openParen = openParen;
        _this.variables = variables;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(useKeyword.flags, useKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(variables.flags, variables.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ClosureUseNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosureUseNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosureUseNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ClosureUseNode.prototype.accept = function (visitor) {
        visitor.visitClosureUse(this);
    };
    ClosureUseNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClosureUse(this);
    };
    ClosureUseNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.useKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.variables;
            case 3:
                return this.closeParen;
            default:
                return null;
        }
    };
    ClosureUseNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ClosureUseSyntaxNode(this, parent, offset);
    };
    ClosureUseNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ClosureUseNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ClosureUseNode.prototype.withDiagnostics = function (diagnostics) {
        return new ClosureUseNode(this.useKeyword, this.openParen, this.variables, this.closeParen, diagnostics);
    };
    ClosureUseNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8718);
        hash = php_common_1.Hash.combine(this.useKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.variables.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        return hash;
    };
    ClosureUseNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ClosureUseNode;
}(Node_1.Node));
exports.ClosureUseNode = ClosureUseNode;
var ConstantElementNode = /** @class */ (function (_super) {
    __extends(ConstantElementNode, _super);
    function ConstantElementNode(identifier, equal, expression, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.identifier = identifier;
        _this.equal = equal;
        _this.expression = expression;
        _this.updateFlagsAndWidth(identifier.flags, identifier.fullWidth);
        _this.updateFlagsAndWidth(equal.flags, equal.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ConstantElementNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantElementNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantElementNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ConstantElementNode.prototype.accept = function (visitor) {
        visitor.visitConstantElement(this);
    };
    ConstantElementNode.prototype.acceptResult = function (visitor) {
        return visitor.visitConstantElement(this);
    };
    ConstantElementNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.identifier;
            case 1:
                return this.equal;
            case 2:
                return this.expression;
            default:
                return null;
        }
    };
    ConstantElementNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ConstantElementSyntaxNode(this, parent, offset);
    };
    ConstantElementNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ConstantElementNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ConstantElementNode.prototype.withDiagnostics = function (diagnostics) {
        return new ConstantElementNode(this.identifier, this.equal, this.expression, diagnostics);
    };
    ConstantElementNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8719);
        hash = php_common_1.Hash.combine(this.identifier.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.equal.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        return hash;
    };
    ConstantElementNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ConstantElementNode;
}(Node_1.Node));
exports.ConstantElementNode = ConstantElementNode;
var ElseNode = /** @class */ (function (_super) {
    __extends(ElseNode, _super);
    function ElseNode(elseKeyword, statement, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.elseKeyword = elseKeyword;
        _this.statement = statement;
        _this.updateFlagsAndWidth(elseKeyword.flags, elseKeyword.fullWidth);
        _this.updateFlagsAndWidth(statement.flags, statement.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ElseNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ElseNode.prototype.accept = function (visitor) {
        visitor.visitElse(this);
    };
    ElseNode.prototype.acceptResult = function (visitor) {
        return visitor.visitElse(this);
    };
    ElseNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.elseKeyword;
            case 1:
                return this.statement;
            default:
                return null;
        }
    };
    ElseNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ElseSyntaxNode(this, parent, offset);
    };
    ElseNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ElseNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ElseNode.prototype.withDiagnostics = function (diagnostics) {
        return new ElseNode(this.elseKeyword, this.statement, diagnostics);
    };
    ElseNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8720);
        hash = php_common_1.Hash.combine(this.elseKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.statement.hashCode(), hash);
        return hash;
    };
    ElseNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ElseNode;
}(Node_1.Node));
exports.ElseNode = ElseNode;
var ElseBlockNode = /** @class */ (function (_super) {
    __extends(ElseBlockNode, _super);
    function ElseBlockNode(elseKeyword, colon, statements, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.elseKeyword = elseKeyword;
        _this.colon = colon;
        _this.statements = statements;
        _this.updateFlagsAndWidth(elseKeyword.flags, elseKeyword.fullWidth);
        _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ElseBlockNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseBlockNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseBlockNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ElseBlockNode.prototype.accept = function (visitor) {
        visitor.visitElseBlock(this);
    };
    ElseBlockNode.prototype.acceptResult = function (visitor) {
        return visitor.visitElseBlock(this);
    };
    ElseBlockNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.elseKeyword;
            case 1:
                return this.colon;
            case 2:
                return this.statements;
            default:
                return null;
        }
    };
    ElseBlockNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ElseBlockSyntaxNode(this, parent, offset);
    };
    ElseBlockNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ElseBlockNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ElseBlockNode.prototype.withDiagnostics = function (diagnostics) {
        return new ElseBlockNode(this.elseKeyword, this.colon, this.statements, diagnostics);
    };
    ElseBlockNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8721);
        hash = php_common_1.Hash.combine(this.elseKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.colon.hashCode(), hash);
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        return hash;
    };
    ElseBlockNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ElseBlockNode;
}(Node_1.Node));
exports.ElseBlockNode = ElseBlockNode;
var ElseIfNode = /** @class */ (function (_super) {
    __extends(ElseIfNode, _super);
    function ElseIfNode(elseIfKeyword, openParen, condition, closeParen, statement, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.elseIfKeyword = elseIfKeyword;
        _this.openParen = openParen;
        _this.condition = condition;
        _this.closeParen = closeParen;
        _this.statement = statement;
        _this.updateFlagsAndWidth(elseIfKeyword.flags, elseIfKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(condition.flags, condition.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(statement.flags, statement.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ElseIfNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ElseIfNode.prototype.accept = function (visitor) {
        visitor.visitElseIf(this);
    };
    ElseIfNode.prototype.acceptResult = function (visitor) {
        return visitor.visitElseIf(this);
    };
    ElseIfNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.elseIfKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.condition;
            case 3:
                return this.closeParen;
            case 4:
                return this.statement;
            default:
                return null;
        }
    };
    ElseIfNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ElseIfSyntaxNode(this, parent, offset);
    };
    ElseIfNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ElseIfNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ElseIfNode.prototype.withDiagnostics = function (diagnostics) {
        return new ElseIfNode(this.elseIfKeyword, this.openParen, this.condition, this.closeParen, this.statement, diagnostics);
    };
    ElseIfNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8722);
        hash = php_common_1.Hash.combine(this.elseIfKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.condition.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.statement.hashCode(), hash);
        return hash;
    };
    ElseIfNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ElseIfNode;
}(Node_1.Node));
exports.ElseIfNode = ElseIfNode;
var ElseIfBlockNode = /** @class */ (function (_super) {
    __extends(ElseIfBlockNode, _super);
    function ElseIfBlockNode(elseIfKeyword, openParen, condition, closeParen, colon, statements, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.elseIfKeyword = elseIfKeyword;
        _this.openParen = openParen;
        _this.condition = condition;
        _this.closeParen = closeParen;
        _this.colon = colon;
        _this.statements = statements;
        _this.updateFlagsAndWidth(elseIfKeyword.flags, elseIfKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(condition.flags, condition.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ElseIfBlockNode.prototype, "count", {
        get: function () {
            return 6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfBlockNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfBlockNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ElseIfBlockNode.prototype.accept = function (visitor) {
        visitor.visitElseIfBlock(this);
    };
    ElseIfBlockNode.prototype.acceptResult = function (visitor) {
        return visitor.visitElseIfBlock(this);
    };
    ElseIfBlockNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.elseIfKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.condition;
            case 3:
                return this.closeParen;
            case 4:
                return this.colon;
            case 5:
                return this.statements;
            default:
                return null;
        }
    };
    ElseIfBlockNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ElseIfBlockSyntaxNode(this, parent, offset);
    };
    ElseIfBlockNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ElseIfBlockNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ElseIfBlockNode.prototype.withDiagnostics = function (diagnostics) {
        return new ElseIfBlockNode(this.elseIfKeyword, this.openParen, this.condition, this.closeParen, this.colon, this.statements, diagnostics);
    };
    ElseIfBlockNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8723);
        hash = php_common_1.Hash.combine(this.elseIfKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.condition.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.colon.hashCode(), hash);
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        return hash;
    };
    ElseIfBlockNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ElseIfBlockNode;
}(Node_1.Node));
exports.ElseIfBlockNode = ElseIfBlockNode;
var FlexibleHeredocElementNode = /** @class */ (function (_super) {
    __extends(FlexibleHeredocElementNode, _super);
    function FlexibleHeredocElementNode(indent, template, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.indent = indent;
        _this.template = template;
        _this.updateFlagsAndWidth(indent.flags, indent.fullWidth);
        if (template !== null) {
            _this.updateFlagsAndWidth(template.flags, template.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(FlexibleHeredocElementNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FlexibleHeredocElementNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FlexibleHeredocElementNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    FlexibleHeredocElementNode.prototype.accept = function (visitor) {
        visitor.visitFlexibleHeredocElement(this);
    };
    FlexibleHeredocElementNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFlexibleHeredocElement(this);
    };
    FlexibleHeredocElementNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.indent;
            case 1:
                return this.template;
            default:
                return null;
        }
    };
    FlexibleHeredocElementNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.FlexibleHeredocElementSyntaxNode(this, parent, offset);
    };
    FlexibleHeredocElementNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = FlexibleHeredocElementNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    FlexibleHeredocElementNode.prototype.withDiagnostics = function (diagnostics) {
        return new FlexibleHeredocElementNode(this.indent, this.template, diagnostics);
    };
    FlexibleHeredocElementNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8724);
        hash = php_common_1.Hash.combine(this.indent.hashCode(), hash);
        hash = this.template !== null ? php_common_1.Hash.combine(this.template.hashCode(), hash) : hash;
        return hash;
    };
    FlexibleHeredocElementNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return FlexibleHeredocElementNode;
}(Node_1.Node));
exports.FlexibleHeredocElementNode = FlexibleHeredocElementNode;
var IncompleteNamedTraitAdaptationNode = /** @class */ (function (_super) {
    __extends(IncompleteNamedTraitAdaptationNode, _super);
    function IncompleteNamedTraitAdaptationNode(identifierOrKeyword, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.identifierOrKeyword = identifierOrKeyword;
        _this.updateFlagsAndWidth(identifierOrKeyword.flags, identifierOrKeyword.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IncompleteNamedTraitAdaptationNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IncompleteNamedTraitAdaptationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IncompleteNamedTraitAdaptationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IncompleteNamedTraitAdaptationNode.prototype.accept = function (visitor) {
        visitor.visitIncompleteNamedTraitAdapatation(this);
    };
    IncompleteNamedTraitAdaptationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIncompleteNamedTraitAdapatation(this);
    };
    IncompleteNamedTraitAdaptationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.identifierOrKeyword;
            default:
                return null;
        }
    };
    IncompleteNamedTraitAdaptationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IncompleteNamedTraitAdaptationSyntaxNode(this, parent, offset);
    };
    IncompleteNamedTraitAdaptationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IncompleteNamedTraitAdaptationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IncompleteNamedTraitAdaptationNode.prototype.withDiagnostics = function (diagnostics) {
        return new IncompleteNamedTraitAdaptationNode(this.identifierOrKeyword, diagnostics);
    };
    IncompleteNamedTraitAdaptationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8725);
        hash = php_common_1.Hash.combine(this.identifierOrKeyword.hashCode(), hash);
        return hash;
    };
    IncompleteNamedTraitAdaptationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IncompleteNamedTraitAdaptationNode;
}(Node_1.Node));
exports.IncompleteNamedTraitAdaptationNode = IncompleteNamedTraitAdaptationNode;
var IncompleteReferencedTraitAdaptationNode = /** @class */ (function (_super) {
    __extends(IncompleteReferencedTraitAdaptationNode, _super);
    function IncompleteReferencedTraitAdaptationNode(reference, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.reference = reference;
        _this.updateFlagsAndWidth(reference.flags, reference.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IncompleteReferencedTraitAdaptationNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IncompleteReferencedTraitAdaptationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IncompleteReferencedTraitAdaptationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IncompleteReferencedTraitAdaptationNode.prototype.accept = function (visitor) {
        visitor.visitIncompleteReferencedTraitAdaptation(this);
    };
    IncompleteReferencedTraitAdaptationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIncompleteReferencedTraitAdaptation(this);
    };
    IncompleteReferencedTraitAdaptationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.reference;
            default:
                return null;
        }
    };
    IncompleteReferencedTraitAdaptationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IncompleteReferencedTraitAdaptationSyntaxNode(this, parent, offset);
    };
    IncompleteReferencedTraitAdaptationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IncompleteReferencedTraitAdaptationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IncompleteReferencedTraitAdaptationNode.prototype.withDiagnostics = function (diagnostics) {
        return new IncompleteReferencedTraitAdaptationNode(this.reference, diagnostics);
    };
    IncompleteReferencedTraitAdaptationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8726);
        hash = php_common_1.Hash.combine(this.reference.hashCode(), hash);
        return hash;
    };
    IncompleteReferencedTraitAdaptationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IncompleteReferencedTraitAdaptationNode;
}(Node_1.Node));
exports.IncompleteReferencedTraitAdaptationNode = IncompleteReferencedTraitAdaptationNode;
var ListDestructureNode = /** @class */ (function (_super) {
    __extends(ListDestructureNode, _super);
    function ListDestructureNode(listKeyword, openParen, variables, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.listKeyword = listKeyword;
        _this.openParen = openParen;
        _this.variables = variables;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(listKeyword.flags, listKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (variables !== null) {
            _this.updateFlagsAndWidth(variables.flags, variables.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ListDestructureNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ListDestructureNode.prototype.accept = function (visitor) {
        visitor.visitListDestructure(this);
    };
    ListDestructureNode.prototype.acceptResult = function (visitor) {
        return visitor.visitListDestructure(this);
    };
    ListDestructureNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.listKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.variables;
            case 3:
                return this.closeParen;
            default:
                return null;
        }
    };
    ListDestructureNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ListDestructureSyntaxNode(this, parent, offset);
    };
    ListDestructureNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ListDestructureNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ListDestructureNode.prototype.withDiagnostics = function (diagnostics) {
        return new ListDestructureNode(this.listKeyword, this.openParen, this.variables, this.closeParen, diagnostics);
    };
    ListDestructureNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8727);
        hash = php_common_1.Hash.combine(this.listKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.variables !== null ? php_common_1.Hash.combine(this.variables.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        return hash;
    };
    ListDestructureNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ListDestructureNode;
}(Node_1.Node));
exports.ListDestructureNode = ListDestructureNode;
var ListDestructureElementNode = /** @class */ (function (_super) {
    __extends(ListDestructureElementNode, _super);
    function ListDestructureElementNode(key, doubleArrow, ampersand, value, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.key = key;
        _this.doubleArrow = doubleArrow;
        _this.ampersand = ampersand;
        _this.value = value;
        if (key !== null) {
            _this.updateFlagsAndWidth(key.flags, key.fullWidth);
        }
        if (doubleArrow !== null) {
            _this.updateFlagsAndWidth(doubleArrow.flags, doubleArrow.fullWidth);
        }
        if (ampersand !== null) {
            _this.updateFlagsAndWidth(ampersand.flags, ampersand.fullWidth);
        }
        _this.updateFlagsAndWidth(value.flags, value.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ListDestructureElementNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureElementNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureElementNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ListDestructureElementNode.prototype.accept = function (visitor) {
        visitor.visitListDestructureElement(this);
    };
    ListDestructureElementNode.prototype.acceptResult = function (visitor) {
        return visitor.visitListDestructureElement(this);
    };
    ListDestructureElementNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.key;
            case 1:
                return this.doubleArrow;
            case 2:
                return this.ampersand;
            case 3:
                return this.value;
            default:
                return null;
        }
    };
    ListDestructureElementNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ListDestructureElementSyntaxNode(this, parent, offset);
    };
    ListDestructureElementNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ListDestructureElementNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ListDestructureElementNode.prototype.withDiagnostics = function (diagnostics) {
        return new ListDestructureElementNode(this.key, this.doubleArrow, this.ampersand, this.value, diagnostics);
    };
    ListDestructureElementNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8728);
        hash = this.key !== null ? php_common_1.Hash.combine(this.key.hashCode(), hash) : hash;
        hash = this.doubleArrow !== null ? php_common_1.Hash.combine(this.doubleArrow.hashCode(), hash) : hash;
        hash = this.ampersand !== null ? php_common_1.Hash.combine(this.ampersand.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.value.hashCode(), hash);
        return hash;
    };
    ListDestructureElementNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ListDestructureElementNode;
}(Node_1.Node));
exports.ListDestructureElementNode = ListDestructureElementNode;
var MethodReferenceNode = /** @class */ (function (_super) {
    __extends(MethodReferenceNode, _super);
    function MethodReferenceNode(className, doubleColon, methodName, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.className = className;
        _this.doubleColon = doubleColon;
        _this.methodName = methodName;
        _this.updateFlagsAndWidth(className.flags, className.fullWidth);
        _this.updateFlagsAndWidth(doubleColon.flags, doubleColon.fullWidth);
        _this.updateFlagsAndWidth(methodName.flags, methodName.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(MethodReferenceNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodReferenceNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodReferenceNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    MethodReferenceNode.prototype.accept = function (visitor) {
        visitor.visitMethodReference(this);
    };
    MethodReferenceNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMethodReference(this);
    };
    MethodReferenceNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.className;
            case 1:
                return this.doubleColon;
            case 2:
                return this.methodName;
            default:
                return null;
        }
    };
    MethodReferenceNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.MethodReferenceSyntaxNode(this, parent, offset);
    };
    MethodReferenceNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = MethodReferenceNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    MethodReferenceNode.prototype.withDiagnostics = function (diagnostics) {
        return new MethodReferenceNode(this.className, this.doubleColon, this.methodName, diagnostics);
    };
    MethodReferenceNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8729);
        hash = php_common_1.Hash.combine(this.className.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.doubleColon.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.methodName.hashCode(), hash);
        return hash;
    };
    MethodReferenceNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return MethodReferenceNode;
}(Node_1.Node));
exports.MethodReferenceNode = MethodReferenceNode;
var ParameterNode = /** @class */ (function (_super) {
    __extends(ParameterNode, _super);
    function ParameterNode(type, ampersand, ellipsis, variable, equal, expression, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.type = type;
        _this.ampersand = ampersand;
        _this.ellipsis = ellipsis;
        _this.variable = variable;
        _this.equal = equal;
        _this.expression = expression;
        if (type !== null) {
            _this.updateFlagsAndWidth(type.flags, type.fullWidth);
        }
        if (ampersand !== null) {
            _this.updateFlagsAndWidth(ampersand.flags, ampersand.fullWidth);
        }
        if (ellipsis !== null) {
            _this.updateFlagsAndWidth(ellipsis.flags, ellipsis.fullWidth);
        }
        _this.updateFlagsAndWidth(variable.flags, variable.fullWidth);
        if (equal !== null) {
            _this.updateFlagsAndWidth(equal.flags, equal.fullWidth);
        }
        if (expression !== null) {
            _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ParameterNode.prototype, "count", {
        get: function () {
            return 6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ParameterNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ParameterNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ParameterNode.prototype.accept = function (visitor) {
        visitor.visitParameter(this);
    };
    ParameterNode.prototype.acceptResult = function (visitor) {
        return visitor.visitParameter(this);
    };
    ParameterNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.type;
            case 1:
                return this.ampersand;
            case 2:
                return this.ellipsis;
            case 3:
                return this.variable;
            case 4:
                return this.equal;
            case 5:
                return this.expression;
            default:
                return null;
        }
    };
    ParameterNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ParameterSyntaxNode(this, parent, offset);
    };
    ParameterNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ParameterNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ParameterNode.prototype.withDiagnostics = function (diagnostics) {
        return new ParameterNode(this.type, this.ampersand, this.ellipsis, this.variable, this.equal, this.expression, diagnostics);
    };
    ParameterNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8730);
        hash = this.type !== null ? php_common_1.Hash.combine(this.type.hashCode(), hash) : hash;
        hash = this.ampersand !== null ? php_common_1.Hash.combine(this.ampersand.hashCode(), hash) : hash;
        hash = this.ellipsis !== null ? php_common_1.Hash.combine(this.ellipsis.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.variable.hashCode(), hash);
        hash = this.equal !== null ? php_common_1.Hash.combine(this.equal.hashCode(), hash) : hash;
        hash = this.expression !== null ? php_common_1.Hash.combine(this.expression.hashCode(), hash) : hash;
        return hash;
    };
    ParameterNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ParameterNode;
}(Node_1.Node));
exports.ParameterNode = ParameterNode;
var PropertyElementNode = /** @class */ (function (_super) {
    __extends(PropertyElementNode, _super);
    function PropertyElementNode(variable, equal, expression, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.variable = variable;
        _this.equal = equal;
        _this.expression = expression;
        _this.updateFlagsAndWidth(variable.flags, variable.fullWidth);
        if (equal !== null) {
            _this.updateFlagsAndWidth(equal.flags, equal.fullWidth);
        }
        if (expression !== null) {
            _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(PropertyElementNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyElementNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyElementNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    PropertyElementNode.prototype.accept = function (visitor) {
        visitor.visitPropertyElement(this);
    };
    PropertyElementNode.prototype.acceptResult = function (visitor) {
        return visitor.visitPropertyElement(this);
    };
    PropertyElementNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.variable;
            case 1:
                return this.equal;
            case 2:
                return this.expression;
            default:
                return null;
        }
    };
    PropertyElementNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.PropertyElementSyntaxNode(this, parent, offset);
    };
    PropertyElementNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = PropertyElementNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    PropertyElementNode.prototype.withDiagnostics = function (diagnostics) {
        return new PropertyElementNode(this.variable, this.equal, this.expression, diagnostics);
    };
    PropertyElementNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8731);
        hash = php_common_1.Hash.combine(this.variable.hashCode(), hash);
        hash = this.equal !== null ? php_common_1.Hash.combine(this.equal.hashCode(), hash) : hash;
        hash = this.expression !== null ? php_common_1.Hash.combine(this.expression.hashCode(), hash) : hash;
        return hash;
    };
    PropertyElementNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return PropertyElementNode;
}(Node_1.Node));
exports.PropertyElementNode = PropertyElementNode;
var StaticElementNode = /** @class */ (function (_super) {
    __extends(StaticElementNode, _super);
    function StaticElementNode(variable, equal, expression, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.variable = variable;
        _this.equal = equal;
        _this.expression = expression;
        _this.updateFlagsAndWidth(variable.flags, variable.fullWidth);
        if (equal !== null) {
            _this.updateFlagsAndWidth(equal.flags, equal.fullWidth);
        }
        if (expression !== null) {
            _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(StaticElementNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticElementNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticElementNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    StaticElementNode.prototype.accept = function (visitor) {
        visitor.visitStaticElement(this);
    };
    StaticElementNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStaticElement(this);
    };
    StaticElementNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.variable;
            case 1:
                return this.equal;
            case 2:
                return this.expression;
            default:
                return null;
        }
    };
    StaticElementNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.StaticElementSyntaxNode(this, parent, offset);
    };
    StaticElementNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = StaticElementNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    StaticElementNode.prototype.withDiagnostics = function (diagnostics) {
        return new StaticElementNode(this.variable, this.equal, this.expression, diagnostics);
    };
    StaticElementNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8732);
        hash = php_common_1.Hash.combine(this.variable.hashCode(), hash);
        hash = this.equal !== null ? php_common_1.Hash.combine(this.equal.hashCode(), hash) : hash;
        hash = this.expression !== null ? php_common_1.Hash.combine(this.expression.hashCode(), hash) : hash;
        return hash;
    };
    StaticElementNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return StaticElementNode;
}(Node_1.Node));
exports.StaticElementNode = StaticElementNode;
var SwitchCaseNode = /** @class */ (function (_super) {
    __extends(SwitchCaseNode, _super);
    function SwitchCaseNode(clauseKeyword, expression, separator, statements, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.clauseKeyword = clauseKeyword;
        _this.expression = expression;
        _this.separator = separator;
        _this.statements = statements;
        _this.updateFlagsAndWidth(clauseKeyword.flags, clauseKeyword.fullWidth);
        if (expression !== null) {
            _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        }
        _this.updateFlagsAndWidth(separator.flags, separator.fullWidth);
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(SwitchCaseNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchCaseNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchCaseNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    SwitchCaseNode.prototype.accept = function (visitor) {
        visitor.visitSwitchCase(this);
    };
    SwitchCaseNode.prototype.acceptResult = function (visitor) {
        return visitor.visitSwitchCase(this);
    };
    SwitchCaseNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.clauseKeyword;
            case 1:
                return this.expression;
            case 2:
                return this.separator;
            case 3:
                return this.statements;
            default:
                return null;
        }
    };
    SwitchCaseNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.SwitchCaseSyntaxNode(this, parent, offset);
    };
    SwitchCaseNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = SwitchCaseNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    SwitchCaseNode.prototype.withDiagnostics = function (diagnostics) {
        return new SwitchCaseNode(this.clauseKeyword, this.expression, this.separator, this.statements, diagnostics);
    };
    SwitchCaseNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8733);
        hash = php_common_1.Hash.combine(this.clauseKeyword.hashCode(), hash);
        hash = this.expression !== null ? php_common_1.Hash.combine(this.expression.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.separator.hashCode(), hash);
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        return hash;
    };
    SwitchCaseNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return SwitchCaseNode;
}(Node_1.Node));
exports.SwitchCaseNode = SwitchCaseNode;
var TraitPrecedenceNode = /** @class */ (function (_super) {
    __extends(TraitPrecedenceNode, _super);
    function TraitPrecedenceNode(methodReference, insteadOfKeyword, traitNames, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.methodReference = methodReference;
        _this.insteadOfKeyword = insteadOfKeyword;
        _this.traitNames = traitNames;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(methodReference.flags, methodReference.fullWidth);
        _this.updateFlagsAndWidth(insteadOfKeyword.flags, insteadOfKeyword.fullWidth);
        _this.updateFlagsAndWidth(traitNames.flags, traitNames.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(TraitPrecedenceNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitPrecedenceNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitPrecedenceNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    TraitPrecedenceNode.prototype.accept = function (visitor) {
        visitor.visitTraitPrecedence(this);
    };
    TraitPrecedenceNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitPrecedence(this);
    };
    TraitPrecedenceNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.methodReference;
            case 1:
                return this.insteadOfKeyword;
            case 2:
                return this.traitNames;
            case 3:
                return this.semicolon;
            default:
                return null;
        }
    };
    TraitPrecedenceNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.TraitPrecedenceSyntaxNode(this, parent, offset);
    };
    TraitPrecedenceNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = TraitPrecedenceNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    TraitPrecedenceNode.prototype.withDiagnostics = function (diagnostics) {
        return new TraitPrecedenceNode(this.methodReference, this.insteadOfKeyword, this.traitNames, this.semicolon, diagnostics);
    };
    TraitPrecedenceNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8734);
        hash = php_common_1.Hash.combine(this.methodReference.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.insteadOfKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.traitNames.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    TraitPrecedenceNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return TraitPrecedenceNode;
}(Node_1.Node));
exports.TraitPrecedenceNode = TraitPrecedenceNode;
var TryCatchNode = /** @class */ (function (_super) {
    __extends(TryCatchNode, _super);
    function TryCatchNode(catchKeyword, openParen, typeNames, variable, closeParen, statements, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.catchKeyword = catchKeyword;
        _this.openParen = openParen;
        _this.typeNames = typeNames;
        _this.variable = variable;
        _this.closeParen = closeParen;
        _this.statements = statements;
        _this.updateFlagsAndWidth(catchKeyword.flags, catchKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(typeNames.flags, typeNames.fullWidth);
        _this.updateFlagsAndWidth(variable.flags, variable.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(TryCatchNode.prototype, "count", {
        get: function () {
            return 6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryCatchNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryCatchNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    TryCatchNode.prototype.accept = function (visitor) {
        visitor.visitTryCatch(this);
    };
    TryCatchNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTryCatch(this);
    };
    TryCatchNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.catchKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.typeNames;
            case 3:
                return this.variable;
            case 4:
                return this.closeParen;
            case 5:
                return this.statements;
            default:
                return null;
        }
    };
    TryCatchNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.TryCatchSyntaxNode(this, parent, offset);
    };
    TryCatchNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = TryCatchNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    TryCatchNode.prototype.withDiagnostics = function (diagnostics) {
        return new TryCatchNode(this.catchKeyword, this.openParen, this.typeNames, this.variable, this.closeParen, this.statements, diagnostics);
    };
    TryCatchNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8735);
        hash = php_common_1.Hash.combine(this.catchKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.typeNames.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.variable.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.statements.hashCode(), hash);
        return hash;
    };
    TryCatchNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return TryCatchNode;
}(Node_1.Node));
exports.TryCatchNode = TryCatchNode;
var TryFinallyNode = /** @class */ (function (_super) {
    __extends(TryFinallyNode, _super);
    function TryFinallyNode(finallyKeyword, statements, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.finallyKeyword = finallyKeyword;
        _this.statements = statements;
        _this.updateFlagsAndWidth(finallyKeyword.flags, finallyKeyword.fullWidth);
        _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(TryFinallyNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryFinallyNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryFinallyNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    TryFinallyNode.prototype.accept = function (visitor) {
        visitor.visitTryFinally(this);
    };
    TryFinallyNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTryFinally(this);
    };
    TryFinallyNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.finallyKeyword;
            case 1:
                return this.statements;
            default:
                return null;
        }
    };
    TryFinallyNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.TryFinallySyntaxNode(this, parent, offset);
    };
    TryFinallyNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = TryFinallyNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    TryFinallyNode.prototype.withDiagnostics = function (diagnostics) {
        return new TryFinallyNode(this.finallyKeyword, this.statements, diagnostics);
    };
    TryFinallyNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8736);
        hash = php_common_1.Hash.combine(this.finallyKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.statements.hashCode(), hash);
        return hash;
    };
    TryFinallyNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return TryFinallyNode;
}(Node_1.Node));
exports.TryFinallyNode = TryFinallyNode;
var UseElementNode = /** @class */ (function (_super) {
    __extends(UseElementNode, _super);
    function UseElementNode(typeKeyword, target, asKeyword, alias, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.typeKeyword = typeKeyword;
        _this.target = target;
        _this.asKeyword = asKeyword;
        _this.alias = alias;
        if (typeKeyword !== null) {
            _this.updateFlagsAndWidth(typeKeyword.flags, typeKeyword.fullWidth);
        }
        _this.updateFlagsAndWidth(target.flags, target.fullWidth);
        if (asKeyword !== null) {
            _this.updateFlagsAndWidth(asKeyword.flags, asKeyword.fullWidth);
        }
        if (alias !== null) {
            _this.updateFlagsAndWidth(alias.flags, alias.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(UseElementNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseElementNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseElementNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    UseElementNode.prototype.accept = function (visitor) {
        visitor.visitUseElement(this);
    };
    UseElementNode.prototype.acceptResult = function (visitor) {
        return visitor.visitUseElement(this);
    };
    UseElementNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.typeKeyword;
            case 1:
                return this.target;
            case 2:
                return this.asKeyword;
            case 3:
                return this.alias;
            default:
                return null;
        }
    };
    UseElementNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.UseElementSyntaxNode(this, parent, offset);
    };
    UseElementNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = UseElementNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    UseElementNode.prototype.withDiagnostics = function (diagnostics) {
        return new UseElementNode(this.typeKeyword, this.target, this.asKeyword, this.alias, diagnostics);
    };
    UseElementNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8737);
        hash = this.typeKeyword !== null ? php_common_1.Hash.combine(this.typeKeyword.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.target.hashCode(), hash);
        hash = this.asKeyword !== null ? php_common_1.Hash.combine(this.asKeyword.hashCode(), hash) : hash;
        hash = this.alias !== null ? php_common_1.Hash.combine(this.alias.hashCode(), hash) : hash;
        return hash;
    };
    UseElementNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return UseElementNode;
}(Node_1.Node));
exports.UseElementNode = UseElementNode;
var IntrinsicNode = /** @class */ (function (_super) {
    __extends(IntrinsicNode, _super);
    function IntrinsicNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntrinsicNode;
}(ExpressionNode));
exports.IntrinsicNode = IntrinsicNode;
var InvocationNode = /** @class */ (function (_super) {
    __extends(InvocationNode, _super);
    function InvocationNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return InvocationNode;
}(ExpressionNode));
exports.InvocationNode = InvocationNode;
var IterationNode = /** @class */ (function (_super) {
    __extends(IterationNode, _super);
    function IterationNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IterationNode;
}(StatementNode));
exports.IterationNode = IterationNode;
var JumpNode = /** @class */ (function (_super) {
    __extends(JumpNode, _super);
    function JumpNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return JumpNode;
}(StatementNode));
exports.JumpNode = JumpNode;
var MemberAccessNode = /** @class */ (function (_super) {
    __extends(MemberAccessNode, _super);
    function MemberAccessNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MemberAccessNode;
}(ExpressionNode));
exports.MemberAccessNode = MemberAccessNode;
var MemberInvocationNode = /** @class */ (function (_super) {
    __extends(MemberInvocationNode, _super);
    function MemberInvocationNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MemberInvocationNode;
}(InvocationNode));
exports.MemberInvocationNode = MemberInvocationNode;
var ObjectCreationNode = /** @class */ (function (_super) {
    __extends(ObjectCreationNode, _super);
    function ObjectCreationNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ObjectCreationNode;
}(ExpressionNode));
exports.ObjectCreationNode = ObjectCreationNode;
var ScopedAccessNode = /** @class */ (function (_super) {
    __extends(ScopedAccessNode, _super);
    function ScopedAccessNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ScopedAccessNode;
}(ExpressionNode));
exports.ScopedAccessNode = ScopedAccessNode;
var ScopedInvocationNode = /** @class */ (function (_super) {
    __extends(ScopedInvocationNode, _super);
    function ScopedInvocationNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ScopedInvocationNode;
}(InvocationNode));
exports.ScopedInvocationNode = ScopedInvocationNode;
var SelectionNode = /** @class */ (function (_super) {
    __extends(SelectionNode, _super);
    function SelectionNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SelectionNode;
}(StatementNode));
exports.SelectionNode = SelectionNode;
var TypeDeclarationNode = /** @class */ (function (_super) {
    __extends(TypeDeclarationNode, _super);
    function TypeDeclarationNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TypeDeclarationNode;
}(StatementNode));
exports.TypeDeclarationNode = TypeDeclarationNode;
var VariableNode = /** @class */ (function (_super) {
    __extends(VariableNode, _super);
    function VariableNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return VariableNode;
}(ExpressionNode));
exports.VariableNode = VariableNode;
var AnonymousFunctionNode = /** @class */ (function (_super) {
    __extends(AnonymousFunctionNode, _super);
    function AnonymousFunctionNode(staticKeyword, functionKeyword, ampersand, openParen, parameters, closeParen, useClause, colon, returnType, statements, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.staticKeyword = staticKeyword;
        _this.functionKeyword = functionKeyword;
        _this.ampersand = ampersand;
        _this.openParen = openParen;
        _this.parameters = parameters;
        _this.closeParen = closeParen;
        _this.useClause = useClause;
        _this.colon = colon;
        _this.returnType = returnType;
        _this.statements = statements;
        if (staticKeyword !== null) {
            _this.updateFlagsAndWidth(staticKeyword.flags, staticKeyword.fullWidth);
        }
        _this.updateFlagsAndWidth(functionKeyword.flags, functionKeyword.fullWidth);
        if (ampersand !== null) {
            _this.updateFlagsAndWidth(ampersand.flags, ampersand.fullWidth);
        }
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (parameters !== null) {
            _this.updateFlagsAndWidth(parameters.flags, parameters.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (useClause !== null) {
            _this.updateFlagsAndWidth(useClause.flags, useClause.fullWidth);
        }
        if (colon !== null) {
            _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        }
        if (returnType !== null) {
            _this.updateFlagsAndWidth(returnType.flags, returnType.fullWidth);
        }
        _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(AnonymousFunctionNode.prototype, "count", {
        get: function () {
            return 10;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    AnonymousFunctionNode.prototype.accept = function (visitor) {
        visitor.visitAnonymousFunction(this);
    };
    AnonymousFunctionNode.prototype.acceptResult = function (visitor) {
        return visitor.visitAnonymousFunction(this);
    };
    AnonymousFunctionNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.staticKeyword;
            case 1:
                return this.functionKeyword;
            case 2:
                return this.ampersand;
            case 3:
                return this.openParen;
            case 4:
                return this.parameters;
            case 5:
                return this.closeParen;
            case 6:
                return this.useClause;
            case 7:
                return this.colon;
            case 8:
                return this.returnType;
            case 9:
                return this.statements;
            default:
                return null;
        }
    };
    AnonymousFunctionNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.AnonymousFunctionSyntaxNode(this, parent, offset);
    };
    AnonymousFunctionNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = AnonymousFunctionNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    AnonymousFunctionNode.prototype.withDiagnostics = function (diagnostics) {
        return new AnonymousFunctionNode(this.staticKeyword, this.functionKeyword, this.ampersand, this.openParen, this.parameters, this.closeParen, this.useClause, this.colon, this.returnType, this.statements, diagnostics);
    };
    AnonymousFunctionNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8750);
        hash = this.staticKeyword !== null ? php_common_1.Hash.combine(this.staticKeyword.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.functionKeyword.hashCode(), hash);
        hash = this.ampersand !== null ? php_common_1.Hash.combine(this.ampersand.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.parameters !== null ? php_common_1.Hash.combine(this.parameters.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = this.useClause !== null ? php_common_1.Hash.combine(this.useClause.hashCode(), hash) : hash;
        hash = this.colon !== null ? php_common_1.Hash.combine(this.colon.hashCode(), hash) : hash;
        hash = this.returnType !== null ? php_common_1.Hash.combine(this.returnType.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.statements.hashCode(), hash);
        return hash;
    };
    AnonymousFunctionNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return AnonymousFunctionNode;
}(ExpressionNode));
exports.AnonymousFunctionNode = AnonymousFunctionNode;
var AnonymousObjectCreationNode = /** @class */ (function (_super) {
    __extends(AnonymousObjectCreationNode, _super);
    function AnonymousObjectCreationNode(newKeyword, anonymousClass, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.newKeyword = newKeyword;
        _this.anonymousClass = anonymousClass;
        _this.updateFlagsAndWidth(newKeyword.flags, newKeyword.fullWidth);
        _this.updateFlagsAndWidth(anonymousClass.flags, anonymousClass.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(AnonymousObjectCreationNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousObjectCreationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousObjectCreationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    AnonymousObjectCreationNode.prototype.accept = function (visitor) {
        visitor.visitAnonymousObjectCreation(this);
    };
    AnonymousObjectCreationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitAnonymousObjectCreation(this);
    };
    AnonymousObjectCreationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.newKeyword;
            case 1:
                return this.anonymousClass;
            default:
                return null;
        }
    };
    AnonymousObjectCreationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.AnonymousObjectCreationSyntaxNode(this, parent, offset);
    };
    AnonymousObjectCreationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = AnonymousObjectCreationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    AnonymousObjectCreationNode.prototype.withDiagnostics = function (diagnostics) {
        return new AnonymousObjectCreationNode(this.newKeyword, this.anonymousClass, diagnostics);
    };
    AnonymousObjectCreationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8751);
        hash = php_common_1.Hash.combine(this.newKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.anonymousClass.hashCode(), hash);
        return hash;
    };
    AnonymousObjectCreationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return AnonymousObjectCreationNode;
}(ObjectCreationNode));
exports.AnonymousObjectCreationNode = AnonymousObjectCreationNode;
var ArrayNode = /** @class */ (function (_super) {
    __extends(ArrayNode, _super);
    function ArrayNode(arrayKeyword, openParenOrBracket, initializerList, closeParenOrBracket, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.arrayKeyword = arrayKeyword;
        _this.openParenOrBracket = openParenOrBracket;
        _this.initializerList = initializerList;
        _this.closeParenOrBracket = closeParenOrBracket;
        if (arrayKeyword !== null) {
            _this.updateFlagsAndWidth(arrayKeyword.flags, arrayKeyword.fullWidth);
        }
        _this.updateFlagsAndWidth(openParenOrBracket.flags, openParenOrBracket.fullWidth);
        if (initializerList !== null) {
            _this.updateFlagsAndWidth(initializerList.flags, initializerList.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParenOrBracket.flags, closeParenOrBracket.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ArrayNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrayNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrayNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ArrayNode.prototype.accept = function (visitor) {
        visitor.visitArray(this);
    };
    ArrayNode.prototype.acceptResult = function (visitor) {
        return visitor.visitArray(this);
    };
    ArrayNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.arrayKeyword;
            case 1:
                return this.openParenOrBracket;
            case 2:
                return this.initializerList;
            case 3:
                return this.closeParenOrBracket;
            default:
                return null;
        }
    };
    ArrayNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ArraySyntaxNode(this, parent, offset);
    };
    ArrayNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ArrayNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ArrayNode.prototype.withDiagnostics = function (diagnostics) {
        return new ArrayNode(this.arrayKeyword, this.openParenOrBracket, this.initializerList, this.closeParenOrBracket, diagnostics);
    };
    ArrayNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8752);
        hash = this.arrayKeyword !== null ? php_common_1.Hash.combine(this.arrayKeyword.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.openParenOrBracket.hashCode(), hash);
        hash = this.initializerList !== null ? php_common_1.Hash.combine(this.initializerList.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParenOrBracket.hashCode(), hash);
        return hash;
    };
    ArrayNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ArrayNode;
}(ExpressionNode));
exports.ArrayNode = ArrayNode;
var ArrowFunctionNode = /** @class */ (function (_super) {
    __extends(ArrowFunctionNode, _super);
    function ArrowFunctionNode(staticKeyword, fnKeyword, ampersand, openParen, parameters, closeParen, colon, returnType, doubleArrow, expr, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.staticKeyword = staticKeyword;
        _this.fnKeyword = fnKeyword;
        _this.ampersand = ampersand;
        _this.openParen = openParen;
        _this.parameters = parameters;
        _this.closeParen = closeParen;
        _this.colon = colon;
        _this.returnType = returnType;
        _this.doubleArrow = doubleArrow;
        _this.expr = expr;
        if (staticKeyword !== null) {
            _this.updateFlagsAndWidth(staticKeyword.flags, staticKeyword.fullWidth);
        }
        _this.updateFlagsAndWidth(fnKeyword.flags, fnKeyword.fullWidth);
        if (ampersand !== null) {
            _this.updateFlagsAndWidth(ampersand.flags, ampersand.fullWidth);
        }
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (parameters !== null) {
            _this.updateFlagsAndWidth(parameters.flags, parameters.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (colon !== null) {
            _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        }
        if (returnType !== null) {
            _this.updateFlagsAndWidth(returnType.flags, returnType.fullWidth);
        }
        _this.updateFlagsAndWidth(doubleArrow.flags, doubleArrow.fullWidth);
        _this.updateFlagsAndWidth(expr.flags, expr.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ArrowFunctionNode.prototype, "count", {
        get: function () {
            return 10;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ArrowFunctionNode.prototype.accept = function (visitor) {
        visitor.visitArrowFunction(this);
    };
    ArrowFunctionNode.prototype.acceptResult = function (visitor) {
        return visitor.visitArrowFunction(this);
    };
    ArrowFunctionNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.staticKeyword;
            case 1:
                return this.fnKeyword;
            case 2:
                return this.ampersand;
            case 3:
                return this.openParen;
            case 4:
                return this.parameters;
            case 5:
                return this.closeParen;
            case 6:
                return this.colon;
            case 7:
                return this.returnType;
            case 8:
                return this.doubleArrow;
            case 9:
                return this.expr;
            default:
                return null;
        }
    };
    ArrowFunctionNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ArrowFunctionSyntaxNode(this, parent, offset);
    };
    ArrowFunctionNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ArrowFunctionNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ArrowFunctionNode.prototype.withDiagnostics = function (diagnostics) {
        return new ArrowFunctionNode(this.staticKeyword, this.fnKeyword, this.ampersand, this.openParen, this.parameters, this.closeParen, this.colon, this.returnType, this.doubleArrow, this.expr, diagnostics);
    };
    ArrowFunctionNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8753);
        hash = this.staticKeyword !== null ? php_common_1.Hash.combine(this.staticKeyword.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.fnKeyword.hashCode(), hash);
        hash = this.ampersand !== null ? php_common_1.Hash.combine(this.ampersand.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.parameters !== null ? php_common_1.Hash.combine(this.parameters.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = this.colon !== null ? php_common_1.Hash.combine(this.colon.hashCode(), hash) : hash;
        hash = this.returnType !== null ? php_common_1.Hash.combine(this.returnType.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.doubleArrow.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expr.hashCode(), hash);
        return hash;
    };
    ArrowFunctionNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ArrowFunctionNode;
}(ExpressionNode));
exports.ArrowFunctionNode = ArrowFunctionNode;
var AssignmentNode = /** @class */ (function (_super) {
    __extends(AssignmentNode, _super);
    function AssignmentNode(leftOperand, operator, ampersand, rightOperand, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.leftOperand = leftOperand;
        _this.operator = operator;
        _this.ampersand = ampersand;
        _this.rightOperand = rightOperand;
        _this.updateFlagsAndWidth(leftOperand.flags, leftOperand.fullWidth);
        _this.updateFlagsAndWidth(operator.flags, operator.fullWidth);
        if (ampersand !== null) {
            _this.updateFlagsAndWidth(ampersand.flags, ampersand.fullWidth);
        }
        _this.updateFlagsAndWidth(rightOperand.flags, rightOperand.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(AssignmentNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AssignmentNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AssignmentNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    AssignmentNode.prototype.accept = function (visitor) {
        visitor.visitAssignmentExpression(this);
    };
    AssignmentNode.prototype.acceptResult = function (visitor) {
        return visitor.visitAssignmentExpression(this);
    };
    AssignmentNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.leftOperand;
            case 1:
                return this.operator;
            case 2:
                return this.ampersand;
            case 3:
                return this.rightOperand;
            default:
                return null;
        }
    };
    AssignmentNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.AssignmentSyntaxNode(this, parent, offset);
    };
    AssignmentNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = AssignmentNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    AssignmentNode.prototype.withDiagnostics = function (diagnostics) {
        return new AssignmentNode(this.leftOperand, this.operator, this.ampersand, this.rightOperand, diagnostics);
    };
    AssignmentNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8754);
        hash = php_common_1.Hash.combine(this.leftOperand.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.operator.hashCode(), hash);
        hash = this.ampersand !== null ? php_common_1.Hash.combine(this.ampersand.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.rightOperand.hashCode(), hash);
        return hash;
    };
    AssignmentNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return AssignmentNode;
}(ExpressionNode));
exports.AssignmentNode = AssignmentNode;
var BinaryNode = /** @class */ (function (_super) {
    __extends(BinaryNode, _super);
    function BinaryNode(leftOperand, operator, rightOperand, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.leftOperand = leftOperand;
        _this.operator = operator;
        _this.rightOperand = rightOperand;
        _this.updateFlagsAndWidth(leftOperand.flags, leftOperand.fullWidth);
        _this.updateFlagsAndWidth(operator.flags, operator.fullWidth);
        _this.updateFlagsAndWidth(rightOperand.flags, rightOperand.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(BinaryNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    BinaryNode.prototype.accept = function (visitor) {
        visitor.visitBinaryExpression(this);
    };
    BinaryNode.prototype.acceptResult = function (visitor) {
        return visitor.visitBinaryExpression(this);
    };
    BinaryNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.leftOperand;
            case 1:
                return this.operator;
            case 2:
                return this.rightOperand;
            default:
                return null;
        }
    };
    BinaryNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.BinarySyntaxNode(this, parent, offset);
    };
    BinaryNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = BinaryNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    BinaryNode.prototype.withDiagnostics = function (diagnostics) {
        return new BinaryNode(this.leftOperand, this.operator, this.rightOperand, diagnostics);
    };
    BinaryNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8755);
        hash = php_common_1.Hash.combine(this.leftOperand.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.operator.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.rightOperand.hashCode(), hash);
        return hash;
    };
    BinaryNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return BinaryNode;
}(ExpressionNode));
exports.BinaryNode = BinaryNode;
var BreakNode = /** @class */ (function (_super) {
    __extends(BreakNode, _super);
    function BreakNode(breakKeyword, depth, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.breakKeyword = breakKeyword;
        _this.depth = depth;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(breakKeyword.flags, breakKeyword.fullWidth);
        if (depth !== null) {
            _this.updateFlagsAndWidth(depth.flags, depth.fullWidth);
        }
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(BreakNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BreakNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BreakNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    BreakNode.prototype.accept = function (visitor) {
        visitor.visitBreak(this);
    };
    BreakNode.prototype.acceptResult = function (visitor) {
        return visitor.visitBreak(this);
    };
    BreakNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.breakKeyword;
            case 1:
                return this.depth;
            case 2:
                return this.semicolon;
            default:
                return null;
        }
    };
    BreakNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.BreakSyntaxNode(this, parent, offset);
    };
    BreakNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = BreakNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    BreakNode.prototype.withDiagnostics = function (diagnostics) {
        return new BreakNode(this.breakKeyword, this.depth, this.semicolon, diagnostics);
    };
    BreakNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8756);
        hash = php_common_1.Hash.combine(this.breakKeyword.hashCode(), hash);
        hash = this.depth !== null ? php_common_1.Hash.combine(this.depth.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    BreakNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return BreakNode;
}(JumpNode));
exports.BreakNode = BreakNode;
var ClassConstantNode = /** @class */ (function (_super) {
    __extends(ClassConstantNode, _super);
    function ClassConstantNode(qualifier, doubleColon, identifier, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.qualifier = qualifier;
        _this.doubleColon = doubleColon;
        _this.identifier = identifier;
        _this.updateFlagsAndWidth(qualifier.flags, qualifier.fullWidth);
        _this.updateFlagsAndWidth(doubleColon.flags, doubleColon.fullWidth);
        _this.updateFlagsAndWidth(identifier.flags, identifier.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ClassConstantNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ClassConstantNode.prototype.accept = function (visitor) {
        visitor.visitClassConstant(this);
    };
    ClassConstantNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClassConstant(this);
    };
    ClassConstantNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.qualifier;
            case 1:
                return this.doubleColon;
            case 2:
                return this.identifier;
            default:
                return null;
        }
    };
    ClassConstantNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ClassConstantSyntaxNode(this, parent, offset);
    };
    ClassConstantNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ClassConstantNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ClassConstantNode.prototype.withDiagnostics = function (diagnostics) {
        return new ClassConstantNode(this.qualifier, this.doubleColon, this.identifier, diagnostics);
    };
    ClassConstantNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8757);
        hash = php_common_1.Hash.combine(this.qualifier.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.doubleColon.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.identifier.hashCode(), hash);
        return hash;
    };
    ClassConstantNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ClassConstantNode;
}(ScopedAccessNode));
exports.ClassConstantNode = ClassConstantNode;
var ClassConstantDeclarationNode = /** @class */ (function (_super) {
    __extends(ClassConstantDeclarationNode, _super);
    function ClassConstantDeclarationNode(modifiers, constKeyword, elements, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.modifiers = modifiers;
        _this.constKeyword = constKeyword;
        _this.elements = elements;
        _this.semicolon = semicolon;
        if (modifiers !== null) {
            _this.updateFlagsAndWidth(modifiers.flags, modifiers.fullWidth);
        }
        _this.updateFlagsAndWidth(constKeyword.flags, constKeyword.fullWidth);
        _this.updateFlagsAndWidth(elements.flags, elements.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ClassConstantDeclarationNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ClassConstantDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitClassConstantDeclaration(this);
    };
    ClassConstantDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClassConstantDeclaration(this);
    };
    ClassConstantDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.modifiers;
            case 1:
                return this.constKeyword;
            case 2:
                return this.elements;
            case 3:
                return this.semicolon;
            default:
                return null;
        }
    };
    ClassConstantDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ClassConstantDeclarationSyntaxNode(this, parent, offset);
    };
    ClassConstantDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ClassConstantDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ClassConstantDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new ClassConstantDeclarationNode(this.modifiers, this.constKeyword, this.elements, this.semicolon, diagnostics);
    };
    ClassConstantDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8758);
        hash = this.modifiers !== null ? php_common_1.Hash.combine(this.modifiers.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.constKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.elements.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    ClassConstantDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ClassConstantDeclarationNode;
}(StatementNode));
exports.ClassConstantDeclarationNode = ClassConstantDeclarationNode;
var ClassDeclarationNode = /** @class */ (function (_super) {
    __extends(ClassDeclarationNode, _super);
    function ClassDeclarationNode(modifiers, classKeyword, identifier, extendsKeyword, baseType, implementsKeyword, interfaces, openBrace, members, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.modifiers = modifiers;
        _this.classKeyword = classKeyword;
        _this.identifier = identifier;
        _this.extendsKeyword = extendsKeyword;
        _this.baseType = baseType;
        _this.implementsKeyword = implementsKeyword;
        _this.interfaces = interfaces;
        _this.openBrace = openBrace;
        _this.members = members;
        _this.closeBrace = closeBrace;
        if (modifiers !== null) {
            _this.updateFlagsAndWidth(modifiers.flags, modifiers.fullWidth);
        }
        _this.updateFlagsAndWidth(classKeyword.flags, classKeyword.fullWidth);
        _this.updateFlagsAndWidth(identifier.flags, identifier.fullWidth);
        if (extendsKeyword !== null) {
            _this.updateFlagsAndWidth(extendsKeyword.flags, extendsKeyword.fullWidth);
        }
        if (baseType !== null) {
            _this.updateFlagsAndWidth(baseType.flags, baseType.fullWidth);
        }
        if (implementsKeyword !== null) {
            _this.updateFlagsAndWidth(implementsKeyword.flags, implementsKeyword.fullWidth);
        }
        if (interfaces !== null) {
            _this.updateFlagsAndWidth(interfaces.flags, interfaces.fullWidth);
        }
        _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        if (members !== null) {
            _this.updateFlagsAndWidth(members.flags, members.fullWidth);
        }
        _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ClassDeclarationNode.prototype, "count", {
        get: function () {
            return 10;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ClassDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitClassDeclaration(this);
    };
    ClassDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClassDeclaration(this);
    };
    ClassDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.modifiers;
            case 1:
                return this.classKeyword;
            case 2:
                return this.identifier;
            case 3:
                return this.extendsKeyword;
            case 4:
                return this.baseType;
            case 5:
                return this.implementsKeyword;
            case 6:
                return this.interfaces;
            case 7:
                return this.openBrace;
            case 8:
                return this.members;
            case 9:
                return this.closeBrace;
            default:
                return null;
        }
    };
    ClassDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ClassDeclarationSyntaxNode(this, parent, offset);
    };
    ClassDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ClassDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ClassDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new ClassDeclarationNode(this.modifiers, this.classKeyword, this.identifier, this.extendsKeyword, this.baseType, this.implementsKeyword, this.interfaces, this.openBrace, this.members, this.closeBrace, diagnostics);
    };
    ClassDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8759);
        hash = this.modifiers !== null ? php_common_1.Hash.combine(this.modifiers.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.classKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.identifier.hashCode(), hash);
        hash = this.extendsKeyword !== null ? php_common_1.Hash.combine(this.extendsKeyword.hashCode(), hash) : hash;
        hash = this.baseType !== null ? php_common_1.Hash.combine(this.baseType.hashCode(), hash) : hash;
        hash = this.implementsKeyword !== null ? php_common_1.Hash.combine(this.implementsKeyword.hashCode(), hash) : hash;
        hash = this.interfaces !== null ? php_common_1.Hash.combine(this.interfaces.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.openBrace.hashCode(), hash);
        hash = this.members !== null ? php_common_1.Hash.combine(this.members.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeBrace.hashCode(), hash);
        return hash;
    };
    ClassDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ClassDeclarationNode;
}(TypeDeclarationNode));
exports.ClassDeclarationNode = ClassDeclarationNode;
var CloneNode = /** @class */ (function (_super) {
    __extends(CloneNode, _super);
    function CloneNode(cloneKeyword, expression, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.cloneKeyword = cloneKeyword;
        _this.expression = expression;
        _this.updateFlagsAndWidth(cloneKeyword.flags, cloneKeyword.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(CloneNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CloneNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CloneNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    CloneNode.prototype.accept = function (visitor) {
        visitor.visitClone(this);
    };
    CloneNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClone(this);
    };
    CloneNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.cloneKeyword;
            case 1:
                return this.expression;
            default:
                return null;
        }
    };
    CloneNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.CloneSyntaxNode(this, parent, offset);
    };
    CloneNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = CloneNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    CloneNode.prototype.withDiagnostics = function (diagnostics) {
        return new CloneNode(this.cloneKeyword, this.expression, diagnostics);
    };
    CloneNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8760);
        hash = php_common_1.Hash.combine(this.cloneKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        return hash;
    };
    CloneNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return CloneNode;
}(ExpressionNode));
exports.CloneNode = CloneNode;
var ConditionalNode = /** @class */ (function (_super) {
    __extends(ConditionalNode, _super);
    function ConditionalNode(condition, question, trueExpr, colon, falseExpr, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.condition = condition;
        _this.question = question;
        _this.trueExpr = trueExpr;
        _this.colon = colon;
        _this.falseExpr = falseExpr;
        _this.updateFlagsAndWidth(condition.flags, condition.fullWidth);
        _this.updateFlagsAndWidth(question.flags, question.fullWidth);
        if (trueExpr !== null) {
            _this.updateFlagsAndWidth(trueExpr.flags, trueExpr.fullWidth);
        }
        _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        _this.updateFlagsAndWidth(falseExpr.flags, falseExpr.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ConditionalNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionalNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionalNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ConditionalNode.prototype.accept = function (visitor) {
        visitor.visitConditionalExpression(this);
    };
    ConditionalNode.prototype.acceptResult = function (visitor) {
        return visitor.visitConditionalExpression(this);
    };
    ConditionalNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.condition;
            case 1:
                return this.question;
            case 2:
                return this.trueExpr;
            case 3:
                return this.colon;
            case 4:
                return this.falseExpr;
            default:
                return null;
        }
    };
    ConditionalNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ConditionalSyntaxNode(this, parent, offset);
    };
    ConditionalNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ConditionalNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ConditionalNode.prototype.withDiagnostics = function (diagnostics) {
        return new ConditionalNode(this.condition, this.question, this.trueExpr, this.colon, this.falseExpr, diagnostics);
    };
    ConditionalNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8761);
        hash = php_common_1.Hash.combine(this.condition.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.question.hashCode(), hash);
        hash = this.trueExpr !== null ? php_common_1.Hash.combine(this.trueExpr.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.colon.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.falseExpr.hashCode(), hash);
        return hash;
    };
    ConditionalNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ConditionalNode;
}(ExpressionNode));
exports.ConditionalNode = ConditionalNode;
var ConstantNode = /** @class */ (function (_super) {
    __extends(ConstantNode, _super);
    function ConstantNode(name, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.name = name;
        _this.updateFlagsAndWidth(name.flags, name.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ConstantNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ConstantNode.prototype.accept = function (visitor) {
        visitor.visitConstant(this);
    };
    ConstantNode.prototype.acceptResult = function (visitor) {
        return visitor.visitConstant(this);
    };
    ConstantNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.name;
            default:
                return null;
        }
    };
    ConstantNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ConstantSyntaxNode(this, parent, offset);
    };
    ConstantNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ConstantNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ConstantNode.prototype.withDiagnostics = function (diagnostics) {
        return new ConstantNode(this.name, diagnostics);
    };
    ConstantNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8762);
        hash = php_common_1.Hash.combine(this.name.hashCode(), hash);
        return hash;
    };
    ConstantNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ConstantNode;
}(ExpressionNode));
exports.ConstantNode = ConstantNode;
var ConstantDeclarationNode = /** @class */ (function (_super) {
    __extends(ConstantDeclarationNode, _super);
    function ConstantDeclarationNode(constKeyword, elements, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.constKeyword = constKeyword;
        _this.elements = elements;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(constKeyword.flags, constKeyword.fullWidth);
        _this.updateFlagsAndWidth(elements.flags, elements.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ConstantDeclarationNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ConstantDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitConstantDeclaration(this);
    };
    ConstantDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitConstantDeclaration(this);
    };
    ConstantDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.constKeyword;
            case 1:
                return this.elements;
            case 2:
                return this.semicolon;
            default:
                return null;
        }
    };
    ConstantDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ConstantDeclarationSyntaxNode(this, parent, offset);
    };
    ConstantDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ConstantDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ConstantDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new ConstantDeclarationNode(this.constKeyword, this.elements, this.semicolon, diagnostics);
    };
    ConstantDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8763);
        hash = php_common_1.Hash.combine(this.constKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.elements.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    ConstantDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ConstantDeclarationNode;
}(StatementNode));
exports.ConstantDeclarationNode = ConstantDeclarationNode;
var ContinueNode = /** @class */ (function (_super) {
    __extends(ContinueNode, _super);
    function ContinueNode(continueKeyword, depth, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.continueKeyword = continueKeyword;
        _this.depth = depth;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(continueKeyword.flags, continueKeyword.fullWidth);
        if (depth !== null) {
            _this.updateFlagsAndWidth(depth.flags, depth.fullWidth);
        }
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ContinueNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContinueNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContinueNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ContinueNode.prototype.accept = function (visitor) {
        visitor.visitContinue(this);
    };
    ContinueNode.prototype.acceptResult = function (visitor) {
        return visitor.visitContinue(this);
    };
    ContinueNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.continueKeyword;
            case 1:
                return this.depth;
            case 2:
                return this.semicolon;
            default:
                return null;
        }
    };
    ContinueNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ContinueSyntaxNode(this, parent, offset);
    };
    ContinueNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ContinueNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ContinueNode.prototype.withDiagnostics = function (diagnostics) {
        return new ContinueNode(this.continueKeyword, this.depth, this.semicolon, diagnostics);
    };
    ContinueNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8764);
        hash = php_common_1.Hash.combine(this.continueKeyword.hashCode(), hash);
        hash = this.depth !== null ? php_common_1.Hash.combine(this.depth.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    ContinueNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ContinueNode;
}(JumpNode));
exports.ContinueNode = ContinueNode;
var DeclareNode = /** @class */ (function (_super) {
    __extends(DeclareNode, _super);
    function DeclareNode(declareKeyword, openParen, directives, closeParen, statement, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.declareKeyword = declareKeyword;
        _this.openParen = openParen;
        _this.directives = directives;
        _this.closeParen = closeParen;
        _this.statement = statement;
        _this.updateFlagsAndWidth(declareKeyword.flags, declareKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(directives.flags, directives.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(statement.flags, statement.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(DeclareNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    DeclareNode.prototype.accept = function (visitor) {
        visitor.visitDeclare(this);
    };
    DeclareNode.prototype.acceptResult = function (visitor) {
        return visitor.visitDeclare(this);
    };
    DeclareNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.declareKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.directives;
            case 3:
                return this.closeParen;
            case 4:
                return this.statement;
            default:
                return null;
        }
    };
    DeclareNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.DeclareSyntaxNode(this, parent, offset);
    };
    DeclareNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = DeclareNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    DeclareNode.prototype.withDiagnostics = function (diagnostics) {
        return new DeclareNode(this.declareKeyword, this.openParen, this.directives, this.closeParen, this.statement, diagnostics);
    };
    DeclareNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8765);
        hash = php_common_1.Hash.combine(this.declareKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.directives.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.statement.hashCode(), hash);
        return hash;
    };
    DeclareNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return DeclareNode;
}(StatementNode));
exports.DeclareNode = DeclareNode;
var DeclareBlockNode = /** @class */ (function (_super) {
    __extends(DeclareBlockNode, _super);
    function DeclareBlockNode(declareKeyword, openParen, directives, closeParen, colon, statements, endDeclare, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.declareKeyword = declareKeyword;
        _this.openParen = openParen;
        _this.directives = directives;
        _this.closeParen = closeParen;
        _this.colon = colon;
        _this.statements = statements;
        _this.endDeclare = endDeclare;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(declareKeyword.flags, declareKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(directives.flags, directives.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        _this.updateFlagsAndWidth(endDeclare.flags, endDeclare.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(DeclareBlockNode.prototype, "count", {
        get: function () {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareBlockNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareBlockNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    DeclareBlockNode.prototype.accept = function (visitor) {
        visitor.visitDeclareBlock(this);
    };
    DeclareBlockNode.prototype.acceptResult = function (visitor) {
        return visitor.visitDeclareBlock(this);
    };
    DeclareBlockNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.declareKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.directives;
            case 3:
                return this.closeParen;
            case 4:
                return this.colon;
            case 5:
                return this.statements;
            case 6:
                return this.endDeclare;
            case 7:
                return this.semicolon;
            default:
                return null;
        }
    };
    DeclareBlockNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.DeclareBlockSyntaxNode(this, parent, offset);
    };
    DeclareBlockNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = DeclareBlockNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    DeclareBlockNode.prototype.withDiagnostics = function (diagnostics) {
        return new DeclareBlockNode(this.declareKeyword, this.openParen, this.directives, this.closeParen, this.colon, this.statements, this.endDeclare, this.semicolon, diagnostics);
    };
    DeclareBlockNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8766);
        hash = php_common_1.Hash.combine(this.declareKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.directives.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.colon.hashCode(), hash);
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.endDeclare.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    DeclareBlockNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return DeclareBlockNode;
}(StatementNode));
exports.DeclareBlockNode = DeclareBlockNode;
var DestructuringAssignmentNode = /** @class */ (function (_super) {
    __extends(DestructuringAssignmentNode, _super);
    function DestructuringAssignmentNode(unpackedList, operator, operand, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.unpackedList = unpackedList;
        _this.operator = operator;
        _this.operand = operand;
        _this.updateFlagsAndWidth(unpackedList.flags, unpackedList.fullWidth);
        _this.updateFlagsAndWidth(operator.flags, operator.fullWidth);
        _this.updateFlagsAndWidth(operand.flags, operand.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(DestructuringAssignmentNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DestructuringAssignmentNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DestructuringAssignmentNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    DestructuringAssignmentNode.prototype.accept = function (visitor) {
        visitor.visitDestructuringAssignment(this);
    };
    DestructuringAssignmentNode.prototype.acceptResult = function (visitor) {
        return visitor.visitDestructuringAssignment(this);
    };
    DestructuringAssignmentNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.unpackedList;
            case 1:
                return this.operator;
            case 2:
                return this.operand;
            default:
                return null;
        }
    };
    DestructuringAssignmentNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.DestructuringAssignmentSyntaxNode(this, parent, offset);
    };
    DestructuringAssignmentNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = DestructuringAssignmentNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    DestructuringAssignmentNode.prototype.withDiagnostics = function (diagnostics) {
        return new DestructuringAssignmentNode(this.unpackedList, this.operator, this.operand, diagnostics);
    };
    DestructuringAssignmentNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8767);
        hash = php_common_1.Hash.combine(this.unpackedList.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.operator.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.operand.hashCode(), hash);
        return hash;
    };
    DestructuringAssignmentNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return DestructuringAssignmentNode;
}(ExpressionNode));
exports.DestructuringAssignmentNode = DestructuringAssignmentNode;
var DoWhileNode = /** @class */ (function (_super) {
    __extends(DoWhileNode, _super);
    function DoWhileNode(doKeyword, statement, whileKeyword, openParen, condition, closeParen, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.doKeyword = doKeyword;
        _this.statement = statement;
        _this.whileKeyword = whileKeyword;
        _this.openParen = openParen;
        _this.condition = condition;
        _this.closeParen = closeParen;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(doKeyword.flags, doKeyword.fullWidth);
        _this.updateFlagsAndWidth(statement.flags, statement.fullWidth);
        _this.updateFlagsAndWidth(whileKeyword.flags, whileKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(condition.flags, condition.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(DoWhileNode.prototype, "count", {
        get: function () {
            return 7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoWhileNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoWhileNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    DoWhileNode.prototype.accept = function (visitor) {
        visitor.visitDoWhile(this);
    };
    DoWhileNode.prototype.acceptResult = function (visitor) {
        return visitor.visitDoWhile(this);
    };
    DoWhileNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.doKeyword;
            case 1:
                return this.statement;
            case 2:
                return this.whileKeyword;
            case 3:
                return this.openParen;
            case 4:
                return this.condition;
            case 5:
                return this.closeParen;
            case 6:
                return this.semicolon;
            default:
                return null;
        }
    };
    DoWhileNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.DoWhileSyntaxNode(this, parent, offset);
    };
    DoWhileNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = DoWhileNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    DoWhileNode.prototype.withDiagnostics = function (diagnostics) {
        return new DoWhileNode(this.doKeyword, this.statement, this.whileKeyword, this.openParen, this.condition, this.closeParen, this.semicolon, diagnostics);
    };
    DoWhileNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8768);
        hash = php_common_1.Hash.combine(this.doKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.statement.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.whileKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.condition.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    DoWhileNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return DoWhileNode;
}(IterationNode));
exports.DoWhileNode = DoWhileNode;
var EchoNode = /** @class */ (function (_super) {
    __extends(EchoNode, _super);
    function EchoNode(echoKeyword, expressionList, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.echoKeyword = echoKeyword;
        _this.expressionList = expressionList;
        _this.semicolon = semicolon;
        if (echoKeyword !== null) {
            _this.updateFlagsAndWidth(echoKeyword.flags, echoKeyword.fullWidth);
        }
        _this.updateFlagsAndWidth(expressionList.flags, expressionList.fullWidth);
        if (semicolon !== null) {
            _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(EchoNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EchoNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EchoNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    EchoNode.prototype.accept = function (visitor) {
        visitor.visitEcho(this);
    };
    EchoNode.prototype.acceptResult = function (visitor) {
        return visitor.visitEcho(this);
    };
    EchoNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.echoKeyword;
            case 1:
                return this.expressionList;
            case 2:
                return this.semicolon;
            default:
                return null;
        }
    };
    EchoNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.EchoSyntaxNode(this, parent, offset);
    };
    EchoNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = EchoNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    EchoNode.prototype.withDiagnostics = function (diagnostics) {
        return new EchoNode(this.echoKeyword, this.expressionList, this.semicolon, diagnostics);
    };
    EchoNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8769);
        hash = this.echoKeyword !== null ? php_common_1.Hash.combine(this.echoKeyword.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.expressionList.hashCode(), hash);
        hash = this.semicolon !== null ? php_common_1.Hash.combine(this.semicolon.hashCode(), hash) : hash;
        return hash;
    };
    EchoNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return EchoNode;
}(StatementNode));
exports.EchoNode = EchoNode;
var ElementAccessNode = /** @class */ (function (_super) {
    __extends(ElementAccessNode, _super);
    function ElementAccessNode(dereferencable, openBraceOrBracket, index, closeBraceOrBracket, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.dereferencable = dereferencable;
        _this.openBraceOrBracket = openBraceOrBracket;
        _this.index = index;
        _this.closeBraceOrBracket = closeBraceOrBracket;
        _this.updateFlagsAndWidth(dereferencable.flags, dereferencable.fullWidth);
        _this.updateFlagsAndWidth(openBraceOrBracket.flags, openBraceOrBracket.fullWidth);
        if (index !== null) {
            _this.updateFlagsAndWidth(index.flags, index.fullWidth);
        }
        _this.updateFlagsAndWidth(closeBraceOrBracket.flags, closeBraceOrBracket.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ElementAccessNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElementAccessNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElementAccessNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ElementAccessNode.prototype.accept = function (visitor) {
        visitor.visitElementAccess(this);
    };
    ElementAccessNode.prototype.acceptResult = function (visitor) {
        return visitor.visitElementAccess(this);
    };
    ElementAccessNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.dereferencable;
            case 1:
                return this.openBraceOrBracket;
            case 2:
                return this.index;
            case 3:
                return this.closeBraceOrBracket;
            default:
                return null;
        }
    };
    ElementAccessNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ElementAccessSyntaxNode(this, parent, offset);
    };
    ElementAccessNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ElementAccessNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ElementAccessNode.prototype.withDiagnostics = function (diagnostics) {
        return new ElementAccessNode(this.dereferencable, this.openBraceOrBracket, this.index, this.closeBraceOrBracket, diagnostics);
    };
    ElementAccessNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8770);
        hash = php_common_1.Hash.combine(this.dereferencable.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openBraceOrBracket.hashCode(), hash);
        hash = this.index !== null ? php_common_1.Hash.combine(this.index.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeBraceOrBracket.hashCode(), hash);
        return hash;
    };
    ElementAccessNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ElementAccessNode;
}(ExpressionNode));
exports.ElementAccessNode = ElementAccessNode;
var EmptyIntrinsicNode = /** @class */ (function (_super) {
    __extends(EmptyIntrinsicNode, _super);
    function EmptyIntrinsicNode(emptyKeyword, openParen, expression, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.emptyKeyword = emptyKeyword;
        _this.openParen = openParen;
        _this.expression = expression;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(emptyKeyword.flags, emptyKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(EmptyIntrinsicNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmptyIntrinsicNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmptyIntrinsicNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    EmptyIntrinsicNode.prototype.accept = function (visitor) {
        visitor.visitEmptyIntrinsic(this);
    };
    EmptyIntrinsicNode.prototype.acceptResult = function (visitor) {
        return visitor.visitEmptyIntrinsic(this);
    };
    EmptyIntrinsicNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.emptyKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.expression;
            case 3:
                return this.closeParen;
            default:
                return null;
        }
    };
    EmptyIntrinsicNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.EmptyIntrinsicSyntaxNode(this, parent, offset);
    };
    EmptyIntrinsicNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = EmptyIntrinsicNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    EmptyIntrinsicNode.prototype.withDiagnostics = function (diagnostics) {
        return new EmptyIntrinsicNode(this.emptyKeyword, this.openParen, this.expression, this.closeParen, diagnostics);
    };
    EmptyIntrinsicNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8771);
        hash = php_common_1.Hash.combine(this.emptyKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        return hash;
    };
    EmptyIntrinsicNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return EmptyIntrinsicNode;
}(IntrinsicNode));
exports.EmptyIntrinsicNode = EmptyIntrinsicNode;
var ErrorControlNode = /** @class */ (function (_super) {
    __extends(ErrorControlNode, _super);
    function ErrorControlNode(at, expression, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.at = at;
        _this.expression = expression;
        _this.updateFlagsAndWidth(at.flags, at.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ErrorControlNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ErrorControlNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ErrorControlNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ErrorControlNode.prototype.accept = function (visitor) {
        visitor.visitErrorControl(this);
    };
    ErrorControlNode.prototype.acceptResult = function (visitor) {
        return visitor.visitErrorControl(this);
    };
    ErrorControlNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.at;
            case 1:
                return this.expression;
            default:
                return null;
        }
    };
    ErrorControlNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ErrorControlSyntaxNode(this, parent, offset);
    };
    ErrorControlNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ErrorControlNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ErrorControlNode.prototype.withDiagnostics = function (diagnostics) {
        return new ErrorControlNode(this.at, this.expression, diagnostics);
    };
    ErrorControlNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8772);
        hash = php_common_1.Hash.combine(this.at.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        return hash;
    };
    ErrorControlNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ErrorControlNode;
}(ExpressionNode));
exports.ErrorControlNode = ErrorControlNode;
var EvalIntrinsicNode = /** @class */ (function (_super) {
    __extends(EvalIntrinsicNode, _super);
    function EvalIntrinsicNode(evalKeyword, openParen, expression, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.evalKeyword = evalKeyword;
        _this.openParen = openParen;
        _this.expression = expression;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(evalKeyword.flags, evalKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(EvalIntrinsicNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvalIntrinsicNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvalIntrinsicNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    EvalIntrinsicNode.prototype.accept = function (visitor) {
        visitor.visitEvalIntrinsic(this);
    };
    EvalIntrinsicNode.prototype.acceptResult = function (visitor) {
        return visitor.visitEvalIntrinsic(this);
    };
    EvalIntrinsicNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.evalKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.expression;
            case 3:
                return this.closeParen;
            default:
                return null;
        }
    };
    EvalIntrinsicNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.EvalIntrinsicSyntaxNode(this, parent, offset);
    };
    EvalIntrinsicNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = EvalIntrinsicNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    EvalIntrinsicNode.prototype.withDiagnostics = function (diagnostics) {
        return new EvalIntrinsicNode(this.evalKeyword, this.openParen, this.expression, this.closeParen, diagnostics);
    };
    EvalIntrinsicNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8773);
        hash = php_common_1.Hash.combine(this.evalKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        return hash;
    };
    EvalIntrinsicNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return EvalIntrinsicNode;
}(IntrinsicNode));
exports.EvalIntrinsicNode = EvalIntrinsicNode;
var ExitIntrinsicNode = /** @class */ (function (_super) {
    __extends(ExitIntrinsicNode, _super);
    function ExitIntrinsicNode(exitOrDieKeyword, openParen, expression, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.exitOrDieKeyword = exitOrDieKeyword;
        _this.openParen = openParen;
        _this.expression = expression;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(exitOrDieKeyword.flags, exitOrDieKeyword.fullWidth);
        if (openParen !== null) {
            _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        }
        if (expression !== null) {
            _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        }
        if (closeParen !== null) {
            _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ExitIntrinsicNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExitIntrinsicNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExitIntrinsicNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ExitIntrinsicNode.prototype.accept = function (visitor) {
        visitor.visitExitIntrinsic(this);
    };
    ExitIntrinsicNode.prototype.acceptResult = function (visitor) {
        return visitor.visitExitIntrinsic(this);
    };
    ExitIntrinsicNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.exitOrDieKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.expression;
            case 3:
                return this.closeParen;
            default:
                return null;
        }
    };
    ExitIntrinsicNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ExitIntrinsicSyntaxNode(this, parent, offset);
    };
    ExitIntrinsicNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ExitIntrinsicNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ExitIntrinsicNode.prototype.withDiagnostics = function (diagnostics) {
        return new ExitIntrinsicNode(this.exitOrDieKeyword, this.openParen, this.expression, this.closeParen, diagnostics);
    };
    ExitIntrinsicNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8774);
        hash = php_common_1.Hash.combine(this.exitOrDieKeyword.hashCode(), hash);
        hash = this.openParen !== null ? php_common_1.Hash.combine(this.openParen.hashCode(), hash) : hash;
        hash = this.expression !== null ? php_common_1.Hash.combine(this.expression.hashCode(), hash) : hash;
        hash = this.closeParen !== null ? php_common_1.Hash.combine(this.closeParen.hashCode(), hash) : hash;
        return hash;
    };
    ExitIntrinsicNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ExitIntrinsicNode;
}(IntrinsicNode));
exports.ExitIntrinsicNode = ExitIntrinsicNode;
var ExpressionGroupNode = /** @class */ (function (_super) {
    __extends(ExpressionGroupNode, _super);
    function ExpressionGroupNode(openParen, expression, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.openParen = openParen;
        _this.expression = expression;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ExpressionGroupNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionGroupNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionGroupNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ExpressionGroupNode.prototype.accept = function (visitor) {
        visitor.visitExpressionGroup(this);
    };
    ExpressionGroupNode.prototype.acceptResult = function (visitor) {
        return visitor.visitExpressionGroup(this);
    };
    ExpressionGroupNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.openParen;
            case 1:
                return this.expression;
            case 2:
                return this.closeParen;
            default:
                return null;
        }
    };
    ExpressionGroupNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ExpressionGroupSyntaxNode(this, parent, offset);
    };
    ExpressionGroupNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ExpressionGroupNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ExpressionGroupNode.prototype.withDiagnostics = function (diagnostics) {
        return new ExpressionGroupNode(this.openParen, this.expression, this.closeParen, diagnostics);
    };
    ExpressionGroupNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8775);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        return hash;
    };
    ExpressionGroupNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ExpressionGroupNode;
}(ExpressionNode));
exports.ExpressionGroupNode = ExpressionGroupNode;
var ExpressionStatementNode = /** @class */ (function (_super) {
    __extends(ExpressionStatementNode, _super);
    function ExpressionStatementNode(expression, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.expression = expression;
        _this.semicolon = semicolon;
        if (expression !== null) {
            _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        }
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ExpressionStatementNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionStatementNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionStatementNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ExpressionStatementNode.prototype.accept = function (visitor) {
        visitor.visitExpressionStatement(this);
    };
    ExpressionStatementNode.prototype.acceptResult = function (visitor) {
        return visitor.visitExpressionStatement(this);
    };
    ExpressionStatementNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.expression;
            case 1:
                return this.semicolon;
            default:
                return null;
        }
    };
    ExpressionStatementNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ExpressionStatementSyntaxNode(this, parent, offset);
    };
    ExpressionStatementNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ExpressionStatementNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ExpressionStatementNode.prototype.withDiagnostics = function (diagnostics) {
        return new ExpressionStatementNode(this.expression, this.semicolon, diagnostics);
    };
    ExpressionStatementNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8776);
        hash = this.expression !== null ? php_common_1.Hash.combine(this.expression.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    ExpressionStatementNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ExpressionStatementNode;
}(StatementNode));
exports.ExpressionStatementNode = ExpressionStatementNode;
var FlexibleHeredocTemplateNode = /** @class */ (function (_super) {
    __extends(FlexibleHeredocTemplateNode, _super);
    function FlexibleHeredocTemplateNode(heredocStart, flexibleElements, heredocEnd, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.heredocStart = heredocStart;
        _this.flexibleElements = flexibleElements;
        _this.heredocEnd = heredocEnd;
        _this.updateFlagsAndWidth(heredocStart.flags, heredocStart.fullWidth);
        _this.updateFlagsAndWidth(flexibleElements.flags, flexibleElements.fullWidth);
        _this.updateFlagsAndWidth(heredocEnd.flags, heredocEnd.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(FlexibleHeredocTemplateNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FlexibleHeredocTemplateNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FlexibleHeredocTemplateNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    FlexibleHeredocTemplateNode.prototype.accept = function (visitor) {
        visitor.visitFlexibleHeredocTemplate(this);
    };
    FlexibleHeredocTemplateNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFlexibleHeredocTemplate(this);
    };
    FlexibleHeredocTemplateNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.heredocStart;
            case 1:
                return this.flexibleElements;
            case 2:
                return this.heredocEnd;
            default:
                return null;
        }
    };
    FlexibleHeredocTemplateNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.FlexibleHeredocTemplateSyntaxNode(this, parent, offset);
    };
    FlexibleHeredocTemplateNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = FlexibleHeredocTemplateNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    FlexibleHeredocTemplateNode.prototype.withDiagnostics = function (diagnostics) {
        return new FlexibleHeredocTemplateNode(this.heredocStart, this.flexibleElements, this.heredocEnd, diagnostics);
    };
    FlexibleHeredocTemplateNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8777);
        hash = php_common_1.Hash.combine(this.heredocStart.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.flexibleElements.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.heredocEnd.hashCode(), hash);
        return hash;
    };
    FlexibleHeredocTemplateNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return FlexibleHeredocTemplateNode;
}(ExpressionNode));
exports.FlexibleHeredocTemplateNode = FlexibleHeredocTemplateNode;
var ForNode = /** @class */ (function (_super) {
    __extends(ForNode, _super);
    function ForNode(forKeyword, openParen, initializers, firstSemicolon, conditions, secondSemicolon, incrementors, closeParen, statement, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.forKeyword = forKeyword;
        _this.openParen = openParen;
        _this.initializers = initializers;
        _this.firstSemicolon = firstSemicolon;
        _this.conditions = conditions;
        _this.secondSemicolon = secondSemicolon;
        _this.incrementors = incrementors;
        _this.closeParen = closeParen;
        _this.statement = statement;
        _this.updateFlagsAndWidth(forKeyword.flags, forKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (initializers !== null) {
            _this.updateFlagsAndWidth(initializers.flags, initializers.fullWidth);
        }
        _this.updateFlagsAndWidth(firstSemicolon.flags, firstSemicolon.fullWidth);
        if (conditions !== null) {
            _this.updateFlagsAndWidth(conditions.flags, conditions.fullWidth);
        }
        _this.updateFlagsAndWidth(secondSemicolon.flags, secondSemicolon.fullWidth);
        if (incrementors !== null) {
            _this.updateFlagsAndWidth(incrementors.flags, incrementors.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(statement.flags, statement.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ForNode.prototype, "count", {
        get: function () {
            return 9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ForNode.prototype.accept = function (visitor) {
        visitor.visitFor(this);
    };
    ForNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFor(this);
    };
    ForNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.forKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.initializers;
            case 3:
                return this.firstSemicolon;
            case 4:
                return this.conditions;
            case 5:
                return this.secondSemicolon;
            case 6:
                return this.incrementors;
            case 7:
                return this.closeParen;
            case 8:
                return this.statement;
            default:
                return null;
        }
    };
    ForNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ForSyntaxNode(this, parent, offset);
    };
    ForNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ForNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ForNode.prototype.withDiagnostics = function (diagnostics) {
        return new ForNode(this.forKeyword, this.openParen, this.initializers, this.firstSemicolon, this.conditions, this.secondSemicolon, this.incrementors, this.closeParen, this.statement, diagnostics);
    };
    ForNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8778);
        hash = php_common_1.Hash.combine(this.forKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.initializers !== null ? php_common_1.Hash.combine(this.initializers.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.firstSemicolon.hashCode(), hash);
        hash = this.conditions !== null ? php_common_1.Hash.combine(this.conditions.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.secondSemicolon.hashCode(), hash);
        hash = this.incrementors !== null ? php_common_1.Hash.combine(this.incrementors.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.statement.hashCode(), hash);
        return hash;
    };
    ForNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ForNode;
}(IterationNode));
exports.ForNode = ForNode;
var ForBlockNode = /** @class */ (function (_super) {
    __extends(ForBlockNode, _super);
    function ForBlockNode(forKeyword, openParen, initializers, firstSemicolon, conditions, secondSemicolon, incrementors, closeParen, colon, statements, endForKeyword, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.forKeyword = forKeyword;
        _this.openParen = openParen;
        _this.initializers = initializers;
        _this.firstSemicolon = firstSemicolon;
        _this.conditions = conditions;
        _this.secondSemicolon = secondSemicolon;
        _this.incrementors = incrementors;
        _this.closeParen = closeParen;
        _this.colon = colon;
        _this.statements = statements;
        _this.endForKeyword = endForKeyword;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(forKeyword.flags, forKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (initializers !== null) {
            _this.updateFlagsAndWidth(initializers.flags, initializers.fullWidth);
        }
        _this.updateFlagsAndWidth(firstSemicolon.flags, firstSemicolon.fullWidth);
        if (conditions !== null) {
            _this.updateFlagsAndWidth(conditions.flags, conditions.fullWidth);
        }
        _this.updateFlagsAndWidth(secondSemicolon.flags, secondSemicolon.fullWidth);
        if (incrementors !== null) {
            _this.updateFlagsAndWidth(incrementors.flags, incrementors.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        _this.updateFlagsAndWidth(endForKeyword.flags, endForKeyword.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ForBlockNode.prototype, "count", {
        get: function () {
            return 12;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ForBlockNode.prototype.accept = function (visitor) {
        visitor.visitForBlock(this);
    };
    ForBlockNode.prototype.acceptResult = function (visitor) {
        return visitor.visitForBlock(this);
    };
    ForBlockNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.forKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.initializers;
            case 3:
                return this.firstSemicolon;
            case 4:
                return this.conditions;
            case 5:
                return this.secondSemicolon;
            case 6:
                return this.incrementors;
            case 7:
                return this.closeParen;
            case 8:
                return this.colon;
            case 9:
                return this.statements;
            case 10:
                return this.endForKeyword;
            case 11:
                return this.semicolon;
            default:
                return null;
        }
    };
    ForBlockNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ForBlockSyntaxNode(this, parent, offset);
    };
    ForBlockNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ForBlockNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ForBlockNode.prototype.withDiagnostics = function (diagnostics) {
        return new ForBlockNode(this.forKeyword, this.openParen, this.initializers, this.firstSemicolon, this.conditions, this.secondSemicolon, this.incrementors, this.closeParen, this.colon, this.statements, this.endForKeyword, this.semicolon, diagnostics);
    };
    ForBlockNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8779);
        hash = php_common_1.Hash.combine(this.forKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.initializers !== null ? php_common_1.Hash.combine(this.initializers.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.firstSemicolon.hashCode(), hash);
        hash = this.conditions !== null ? php_common_1.Hash.combine(this.conditions.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.secondSemicolon.hashCode(), hash);
        hash = this.incrementors !== null ? php_common_1.Hash.combine(this.incrementors.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.colon.hashCode(), hash);
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.endForKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    ForBlockNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ForBlockNode;
}(IterationNode));
exports.ForBlockNode = ForBlockNode;
var ForEachNode = /** @class */ (function (_super) {
    __extends(ForEachNode, _super);
    function ForEachNode(forEachKeyword, openParen, source, asKeyword, key, doubleArrow, ampersand, value, closeParen, statement, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.forEachKeyword = forEachKeyword;
        _this.openParen = openParen;
        _this.source = source;
        _this.asKeyword = asKeyword;
        _this.key = key;
        _this.doubleArrow = doubleArrow;
        _this.ampersand = ampersand;
        _this.value = value;
        _this.closeParen = closeParen;
        _this.statement = statement;
        _this.updateFlagsAndWidth(forEachKeyword.flags, forEachKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(source.flags, source.fullWidth);
        _this.updateFlagsAndWidth(asKeyword.flags, asKeyword.fullWidth);
        if (key !== null) {
            _this.updateFlagsAndWidth(key.flags, key.fullWidth);
        }
        if (doubleArrow !== null) {
            _this.updateFlagsAndWidth(doubleArrow.flags, doubleArrow.fullWidth);
        }
        if (ampersand !== null) {
            _this.updateFlagsAndWidth(ampersand.flags, ampersand.fullWidth);
        }
        _this.updateFlagsAndWidth(value.flags, value.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(statement.flags, statement.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ForEachNode.prototype, "count", {
        get: function () {
            return 10;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ForEachNode.prototype.accept = function (visitor) {
        visitor.visitForEach(this);
    };
    ForEachNode.prototype.acceptResult = function (visitor) {
        return visitor.visitForEach(this);
    };
    ForEachNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.forEachKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.source;
            case 3:
                return this.asKeyword;
            case 4:
                return this.key;
            case 5:
                return this.doubleArrow;
            case 6:
                return this.ampersand;
            case 7:
                return this.value;
            case 8:
                return this.closeParen;
            case 9:
                return this.statement;
            default:
                return null;
        }
    };
    ForEachNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ForEachSyntaxNode(this, parent, offset);
    };
    ForEachNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ForEachNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ForEachNode.prototype.withDiagnostics = function (diagnostics) {
        return new ForEachNode(this.forEachKeyword, this.openParen, this.source, this.asKeyword, this.key, this.doubleArrow, this.ampersand, this.value, this.closeParen, this.statement, diagnostics);
    };
    ForEachNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8780);
        hash = php_common_1.Hash.combine(this.forEachKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.source.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.asKeyword.hashCode(), hash);
        hash = this.key !== null ? php_common_1.Hash.combine(this.key.hashCode(), hash) : hash;
        hash = this.doubleArrow !== null ? php_common_1.Hash.combine(this.doubleArrow.hashCode(), hash) : hash;
        hash = this.ampersand !== null ? php_common_1.Hash.combine(this.ampersand.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.value.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.statement.hashCode(), hash);
        return hash;
    };
    ForEachNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ForEachNode;
}(IterationNode));
exports.ForEachNode = ForEachNode;
var ForEachBlockNode = /** @class */ (function (_super) {
    __extends(ForEachBlockNode, _super);
    function ForEachBlockNode(forEachKeyword, openParen, source, asKeyword, key, doubleArrow, ampersand, value, closeParen, colon, statements, endForEach, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.forEachKeyword = forEachKeyword;
        _this.openParen = openParen;
        _this.source = source;
        _this.asKeyword = asKeyword;
        _this.key = key;
        _this.doubleArrow = doubleArrow;
        _this.ampersand = ampersand;
        _this.value = value;
        _this.closeParen = closeParen;
        _this.colon = colon;
        _this.statements = statements;
        _this.endForEach = endForEach;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(forEachKeyword.flags, forEachKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(source.flags, source.fullWidth);
        _this.updateFlagsAndWidth(asKeyword.flags, asKeyword.fullWidth);
        if (key !== null) {
            _this.updateFlagsAndWidth(key.flags, key.fullWidth);
        }
        if (doubleArrow !== null) {
            _this.updateFlagsAndWidth(doubleArrow.flags, doubleArrow.fullWidth);
        }
        if (ampersand !== null) {
            _this.updateFlagsAndWidth(ampersand.flags, ampersand.fullWidth);
        }
        _this.updateFlagsAndWidth(value.flags, value.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        _this.updateFlagsAndWidth(endForEach.flags, endForEach.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ForEachBlockNode.prototype, "count", {
        get: function () {
            return 13;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ForEachBlockNode.prototype.accept = function (visitor) {
        visitor.visitForEachBlock(this);
    };
    ForEachBlockNode.prototype.acceptResult = function (visitor) {
        return visitor.visitForEachBlock(this);
    };
    ForEachBlockNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.forEachKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.source;
            case 3:
                return this.asKeyword;
            case 4:
                return this.key;
            case 5:
                return this.doubleArrow;
            case 6:
                return this.ampersand;
            case 7:
                return this.value;
            case 8:
                return this.closeParen;
            case 9:
                return this.colon;
            case 10:
                return this.statements;
            case 11:
                return this.endForEach;
            case 12:
                return this.semicolon;
            default:
                return null;
        }
    };
    ForEachBlockNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ForEachBlockSyntaxNode(this, parent, offset);
    };
    ForEachBlockNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ForEachBlockNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ForEachBlockNode.prototype.withDiagnostics = function (diagnostics) {
        return new ForEachBlockNode(this.forEachKeyword, this.openParen, this.source, this.asKeyword, this.key, this.doubleArrow, this.ampersand, this.value, this.closeParen, this.colon, this.statements, this.endForEach, this.semicolon, diagnostics);
    };
    ForEachBlockNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8781);
        hash = php_common_1.Hash.combine(this.forEachKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.source.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.asKeyword.hashCode(), hash);
        hash = this.key !== null ? php_common_1.Hash.combine(this.key.hashCode(), hash) : hash;
        hash = this.doubleArrow !== null ? php_common_1.Hash.combine(this.doubleArrow.hashCode(), hash) : hash;
        hash = this.ampersand !== null ? php_common_1.Hash.combine(this.ampersand.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.value.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.colon.hashCode(), hash);
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.endForEach.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    ForEachBlockNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ForEachBlockNode;
}(IterationNode));
exports.ForEachBlockNode = ForEachBlockNode;
var FullyQualifiedNameNode = /** @class */ (function (_super) {
    __extends(FullyQualifiedNameNode, _super);
    function FullyQualifiedNameNode(leadingBackslash, namespaceName, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.leadingBackslash = leadingBackslash;
        _this.namespaceName = namespaceName;
        _this.updateFlagsAndWidth(leadingBackslash.flags, leadingBackslash.fullWidth);
        _this.updateFlagsAndWidth(namespaceName.flags, namespaceName.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(FullyQualifiedNameNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullyQualifiedNameNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullyQualifiedNameNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    FullyQualifiedNameNode.prototype.accept = function (visitor) {
        visitor.visitFullyQualifiedName(this);
    };
    FullyQualifiedNameNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFullyQualifiedName(this);
    };
    FullyQualifiedNameNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.leadingBackslash;
            case 1:
                return this.namespaceName;
            default:
                return null;
        }
    };
    FullyQualifiedNameNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.FullyQualifiedNameSyntaxNode(this, parent, offset);
    };
    FullyQualifiedNameNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = FullyQualifiedNameNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    FullyQualifiedNameNode.prototype.withDiagnostics = function (diagnostics) {
        return new FullyQualifiedNameNode(this.leadingBackslash, this.namespaceName, diagnostics);
    };
    FullyQualifiedNameNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8782);
        hash = php_common_1.Hash.combine(this.leadingBackslash.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.namespaceName.hashCode(), hash);
        return hash;
    };
    FullyQualifiedNameNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return FullyQualifiedNameNode;
}(NameNode));
exports.FullyQualifiedNameNode = FullyQualifiedNameNode;
var FunctionDeclarationNode = /** @class */ (function (_super) {
    __extends(FunctionDeclarationNode, _super);
    function FunctionDeclarationNode(functionKeyword, ampersand, identifier, openParen, parameters, closeParen, colon, returnType, statements, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.functionKeyword = functionKeyword;
        _this.ampersand = ampersand;
        _this.identifier = identifier;
        _this.openParen = openParen;
        _this.parameters = parameters;
        _this.closeParen = closeParen;
        _this.colon = colon;
        _this.returnType = returnType;
        _this.statements = statements;
        _this.updateFlagsAndWidth(functionKeyword.flags, functionKeyword.fullWidth);
        if (ampersand !== null) {
            _this.updateFlagsAndWidth(ampersand.flags, ampersand.fullWidth);
        }
        _this.updateFlagsAndWidth(identifier.flags, identifier.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (parameters !== null) {
            _this.updateFlagsAndWidth(parameters.flags, parameters.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (colon !== null) {
            _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        }
        if (returnType !== null) {
            _this.updateFlagsAndWidth(returnType.flags, returnType.fullWidth);
        }
        _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(FunctionDeclarationNode.prototype, "count", {
        get: function () {
            return 9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    FunctionDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitFunctionDeclaration(this);
    };
    FunctionDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFunctionDeclaration(this);
    };
    FunctionDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.functionKeyword;
            case 1:
                return this.ampersand;
            case 2:
                return this.identifier;
            case 3:
                return this.openParen;
            case 4:
                return this.parameters;
            case 5:
                return this.closeParen;
            case 6:
                return this.colon;
            case 7:
                return this.returnType;
            case 8:
                return this.statements;
            default:
                return null;
        }
    };
    FunctionDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.FunctionDeclarationSyntaxNode(this, parent, offset);
    };
    FunctionDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = FunctionDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    FunctionDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new FunctionDeclarationNode(this.functionKeyword, this.ampersand, this.identifier, this.openParen, this.parameters, this.closeParen, this.colon, this.returnType, this.statements, diagnostics);
    };
    FunctionDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8783);
        hash = php_common_1.Hash.combine(this.functionKeyword.hashCode(), hash);
        hash = this.ampersand !== null ? php_common_1.Hash.combine(this.ampersand.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.identifier.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.parameters !== null ? php_common_1.Hash.combine(this.parameters.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = this.colon !== null ? php_common_1.Hash.combine(this.colon.hashCode(), hash) : hash;
        hash = this.returnType !== null ? php_common_1.Hash.combine(this.returnType.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.statements.hashCode(), hash);
        return hash;
    };
    FunctionDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return FunctionDeclarationNode;
}(StatementNode));
exports.FunctionDeclarationNode = FunctionDeclarationNode;
var FunctionInvocationNode = /** @class */ (function (_super) {
    __extends(FunctionInvocationNode, _super);
    function FunctionInvocationNode(reference, openParen, argumentList, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.reference = reference;
        _this.openParen = openParen;
        _this.argumentList = argumentList;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(reference.flags, reference.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (argumentList !== null) {
            _this.updateFlagsAndWidth(argumentList.flags, argumentList.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(FunctionInvocationNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionInvocationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionInvocationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    FunctionInvocationNode.prototype.accept = function (visitor) {
        visitor.visitFunctionInvocation(this);
    };
    FunctionInvocationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFunctionInvocation(this);
    };
    FunctionInvocationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.reference;
            case 1:
                return this.openParen;
            case 2:
                return this.argumentList;
            case 3:
                return this.closeParen;
            default:
                return null;
        }
    };
    FunctionInvocationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.FunctionInvocationSyntaxNode(this, parent, offset);
    };
    FunctionInvocationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = FunctionInvocationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    FunctionInvocationNode.prototype.withDiagnostics = function (diagnostics) {
        return new FunctionInvocationNode(this.reference, this.openParen, this.argumentList, this.closeParen, diagnostics);
    };
    FunctionInvocationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8784);
        hash = php_common_1.Hash.combine(this.reference.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.argumentList !== null ? php_common_1.Hash.combine(this.argumentList.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        return hash;
    };
    FunctionInvocationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return FunctionInvocationNode;
}(InvocationNode));
exports.FunctionInvocationNode = FunctionInvocationNode;
var GlobalNode = /** @class */ (function (_super) {
    __extends(GlobalNode, _super);
    function GlobalNode(globalKeyword, variables, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.globalKeyword = globalKeyword;
        _this.variables = variables;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(globalKeyword.flags, globalKeyword.fullWidth);
        _this.updateFlagsAndWidth(variables.flags, variables.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(GlobalNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GlobalNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GlobalNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    GlobalNode.prototype.accept = function (visitor) {
        visitor.visitGlobalDeclaration(this);
    };
    GlobalNode.prototype.acceptResult = function (visitor) {
        return visitor.visitGlobalDeclaration(this);
    };
    GlobalNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.globalKeyword;
            case 1:
                return this.variables;
            case 2:
                return this.semicolon;
            default:
                return null;
        }
    };
    GlobalNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.GlobalSyntaxNode(this, parent, offset);
    };
    GlobalNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = GlobalNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    GlobalNode.prototype.withDiagnostics = function (diagnostics) {
        return new GlobalNode(this.globalKeyword, this.variables, this.semicolon, diagnostics);
    };
    GlobalNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8785);
        hash = php_common_1.Hash.combine(this.globalKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.variables.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    GlobalNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return GlobalNode;
}(StatementNode));
exports.GlobalNode = GlobalNode;
var GoToNode = /** @class */ (function (_super) {
    __extends(GoToNode, _super);
    function GoToNode(gotoKeyword, label, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.gotoKeyword = gotoKeyword;
        _this.label = label;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(gotoKeyword.flags, gotoKeyword.fullWidth);
        _this.updateFlagsAndWidth(label.flags, label.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(GoToNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GoToNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GoToNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    GoToNode.prototype.accept = function (visitor) {
        visitor.visitGoTo(this);
    };
    GoToNode.prototype.acceptResult = function (visitor) {
        return visitor.visitGoTo(this);
    };
    GoToNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.gotoKeyword;
            case 1:
                return this.label;
            case 2:
                return this.semicolon;
            default:
                return null;
        }
    };
    GoToNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.GoToSyntaxNode(this, parent, offset);
    };
    GoToNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = GoToNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    GoToNode.prototype.withDiagnostics = function (diagnostics) {
        return new GoToNode(this.gotoKeyword, this.label, this.semicolon, diagnostics);
    };
    GoToNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8786);
        hash = php_common_1.Hash.combine(this.gotoKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.label.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    GoToNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return GoToNode;
}(JumpNode));
exports.GoToNode = GoToNode;
var HaltCompilerNode = /** @class */ (function (_super) {
    __extends(HaltCompilerNode, _super);
    function HaltCompilerNode(haltCompilerKeyword, openParen, closeParen, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.haltCompilerKeyword = haltCompilerKeyword;
        _this.openParen = openParen;
        _this.closeParen = closeParen;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(haltCompilerKeyword.flags, haltCompilerKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(HaltCompilerNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HaltCompilerNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HaltCompilerNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    HaltCompilerNode.prototype.accept = function (visitor) {
        visitor.visitHaltCompiler(this);
    };
    HaltCompilerNode.prototype.acceptResult = function (visitor) {
        return visitor.visitHaltCompiler(this);
    };
    HaltCompilerNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.haltCompilerKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.closeParen;
            case 3:
                return this.semicolon;
            default:
                return null;
        }
    };
    HaltCompilerNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.HaltCompilerSyntaxNode(this, parent, offset);
    };
    HaltCompilerNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = HaltCompilerNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    HaltCompilerNode.prototype.withDiagnostics = function (diagnostics) {
        return new HaltCompilerNode(this.haltCompilerKeyword, this.openParen, this.closeParen, this.semicolon, diagnostics);
    };
    HaltCompilerNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8787);
        hash = php_common_1.Hash.combine(this.haltCompilerKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    HaltCompilerNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return HaltCompilerNode;
}(StatementNode));
exports.HaltCompilerNode = HaltCompilerNode;
var HeredocTemplateNode = /** @class */ (function (_super) {
    __extends(HeredocTemplateNode, _super);
    function HeredocTemplateNode(heredocStart, template, heredocEnd, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.heredocStart = heredocStart;
        _this.template = template;
        _this.heredocEnd = heredocEnd;
        _this.updateFlagsAndWidth(heredocStart.flags, heredocStart.fullWidth);
        if (template !== null) {
            _this.updateFlagsAndWidth(template.flags, template.fullWidth);
        }
        _this.updateFlagsAndWidth(heredocEnd.flags, heredocEnd.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(HeredocTemplateNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeredocTemplateNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeredocTemplateNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    HeredocTemplateNode.prototype.accept = function (visitor) {
        visitor.visitHeredocTemplate(this);
    };
    HeredocTemplateNode.prototype.acceptResult = function (visitor) {
        return visitor.visitHeredocTemplate(this);
    };
    HeredocTemplateNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.heredocStart;
            case 1:
                return this.template;
            case 2:
                return this.heredocEnd;
            default:
                return null;
        }
    };
    HeredocTemplateNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.HeredocTemplateSyntaxNode(this, parent, offset);
    };
    HeredocTemplateNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = HeredocTemplateNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    HeredocTemplateNode.prototype.withDiagnostics = function (diagnostics) {
        return new HeredocTemplateNode(this.heredocStart, this.template, this.heredocEnd, diagnostics);
    };
    HeredocTemplateNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8788);
        hash = php_common_1.Hash.combine(this.heredocStart.hashCode(), hash);
        hash = this.template !== null ? php_common_1.Hash.combine(this.template.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.heredocEnd.hashCode(), hash);
        return hash;
    };
    HeredocTemplateNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return HeredocTemplateNode;
}(ExpressionNode));
exports.HeredocTemplateNode = HeredocTemplateNode;
var IfNode = /** @class */ (function (_super) {
    __extends(IfNode, _super);
    function IfNode(ifKeyword, openParen, condition, closeParen, statement, elseIfClauses, elseClause, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.ifKeyword = ifKeyword;
        _this.openParen = openParen;
        _this.condition = condition;
        _this.closeParen = closeParen;
        _this.statement = statement;
        _this.elseIfClauses = elseIfClauses;
        _this.elseClause = elseClause;
        _this.updateFlagsAndWidth(ifKeyword.flags, ifKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(condition.flags, condition.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(statement.flags, statement.fullWidth);
        if (elseIfClauses !== null) {
            _this.updateFlagsAndWidth(elseIfClauses.flags, elseIfClauses.fullWidth);
        }
        if (elseClause !== null) {
            _this.updateFlagsAndWidth(elseClause.flags, elseClause.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IfNode.prototype, "count", {
        get: function () {
            return 7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IfNode.prototype.accept = function (visitor) {
        visitor.visitIf(this);
    };
    IfNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIf(this);
    };
    IfNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.ifKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.condition;
            case 3:
                return this.closeParen;
            case 4:
                return this.statement;
            case 5:
                return this.elseIfClauses;
            case 6:
                return this.elseClause;
            default:
                return null;
        }
    };
    IfNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IfSyntaxNode(this, parent, offset);
    };
    IfNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IfNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IfNode.prototype.withDiagnostics = function (diagnostics) {
        return new IfNode(this.ifKeyword, this.openParen, this.condition, this.closeParen, this.statement, this.elseIfClauses, this.elseClause, diagnostics);
    };
    IfNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8789);
        hash = php_common_1.Hash.combine(this.ifKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.condition.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.statement.hashCode(), hash);
        hash = this.elseIfClauses !== null ? php_common_1.Hash.combine(this.elseIfClauses.hashCode(), hash) : hash;
        hash = this.elseClause !== null ? php_common_1.Hash.combine(this.elseClause.hashCode(), hash) : hash;
        return hash;
    };
    IfNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IfNode;
}(SelectionNode));
exports.IfNode = IfNode;
var IfBlockNode = /** @class */ (function (_super) {
    __extends(IfBlockNode, _super);
    function IfBlockNode(ifKeyword, openParen, condition, closeParen, colon, statements, elseIfClauses, elseClause, endIfKeyword, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.ifKeyword = ifKeyword;
        _this.openParen = openParen;
        _this.condition = condition;
        _this.closeParen = closeParen;
        _this.colon = colon;
        _this.statements = statements;
        _this.elseIfClauses = elseIfClauses;
        _this.elseClause = elseClause;
        _this.endIfKeyword = endIfKeyword;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(ifKeyword.flags, ifKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(condition.flags, condition.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        if (elseIfClauses !== null) {
            _this.updateFlagsAndWidth(elseIfClauses.flags, elseIfClauses.fullWidth);
        }
        if (elseClause !== null) {
            _this.updateFlagsAndWidth(elseClause.flags, elseClause.fullWidth);
        }
        _this.updateFlagsAndWidth(endIfKeyword.flags, endIfKeyword.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IfBlockNode.prototype, "count", {
        get: function () {
            return 10;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IfBlockNode.prototype.accept = function (visitor) {
        visitor.visitIfBlock(this);
    };
    IfBlockNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIfBlock(this);
    };
    IfBlockNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.ifKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.condition;
            case 3:
                return this.closeParen;
            case 4:
                return this.colon;
            case 5:
                return this.statements;
            case 6:
                return this.elseIfClauses;
            case 7:
                return this.elseClause;
            case 8:
                return this.endIfKeyword;
            case 9:
                return this.semicolon;
            default:
                return null;
        }
    };
    IfBlockNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IfBlockSyntaxNode(this, parent, offset);
    };
    IfBlockNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IfBlockNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IfBlockNode.prototype.withDiagnostics = function (diagnostics) {
        return new IfBlockNode(this.ifKeyword, this.openParen, this.condition, this.closeParen, this.colon, this.statements, this.elseIfClauses, this.elseClause, this.endIfKeyword, this.semicolon, diagnostics);
    };
    IfBlockNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8790);
        hash = php_common_1.Hash.combine(this.ifKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.condition.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.colon.hashCode(), hash);
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        hash = this.elseIfClauses !== null ? php_common_1.Hash.combine(this.elseIfClauses.hashCode(), hash) : hash;
        hash = this.elseClause !== null ? php_common_1.Hash.combine(this.elseClause.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.endIfKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    IfBlockNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IfBlockNode;
}(SelectionNode));
exports.IfBlockNode = IfBlockNode;
var IncompleteMemberNode = /** @class */ (function (_super) {
    __extends(IncompleteMemberNode, _super);
    function IncompleteMemberNode(modifiers, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.modifiers = modifiers;
        _this.updateFlagsAndWidth(modifiers.flags, modifiers.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IncompleteMemberNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IncompleteMemberNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IncompleteMemberNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IncompleteMemberNode.prototype.accept = function (visitor) {
        visitor.visitIncompleteMember(this);
    };
    IncompleteMemberNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIncompleteMember(this);
    };
    IncompleteMemberNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.modifiers;
            default:
                return null;
        }
    };
    IncompleteMemberNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IncompleteMemberSyntaxNode(this, parent, offset);
    };
    IncompleteMemberNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IncompleteMemberNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IncompleteMemberNode.prototype.withDiagnostics = function (diagnostics) {
        return new IncompleteMemberNode(this.modifiers, diagnostics);
    };
    IncompleteMemberNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8791);
        hash = php_common_1.Hash.combine(this.modifiers.hashCode(), hash);
        return hash;
    };
    IncompleteMemberNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IncompleteMemberNode;
}(StatementNode));
exports.IncompleteMemberNode = IncompleteMemberNode;
var IndirectMemberAccessNode = /** @class */ (function (_super) {
    __extends(IndirectMemberAccessNode, _super);
    function IndirectMemberAccessNode(dereferencable, objectOperator, openBrace, member, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.dereferencable = dereferencable;
        _this.objectOperator = objectOperator;
        _this.openBrace = openBrace;
        _this.member = member;
        _this.closeBrace = closeBrace;
        _this.updateFlagsAndWidth(dereferencable.flags, dereferencable.fullWidth);
        _this.updateFlagsAndWidth(objectOperator.flags, objectOperator.fullWidth);
        if (openBrace !== null) {
            _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        }
        _this.updateFlagsAndWidth(member.flags, member.fullWidth);
        if (closeBrace !== null) {
            _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IndirectMemberAccessNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMemberAccessNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMemberAccessNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IndirectMemberAccessNode.prototype.accept = function (visitor) {
        visitor.visitMemberAccess(this);
    };
    IndirectMemberAccessNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMemberAccess(this);
    };
    IndirectMemberAccessNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.dereferencable;
            case 1:
                return this.objectOperator;
            case 2:
                return this.openBrace;
            case 3:
                return this.member;
            case 4:
                return this.closeBrace;
            default:
                return null;
        }
    };
    IndirectMemberAccessNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IndirectMemberAccessSyntaxNode(this, parent, offset);
    };
    IndirectMemberAccessNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IndirectMemberAccessNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IndirectMemberAccessNode.prototype.withDiagnostics = function (diagnostics) {
        return new IndirectMemberAccessNode(this.dereferencable, this.objectOperator, this.openBrace, this.member, this.closeBrace, diagnostics);
    };
    IndirectMemberAccessNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8792);
        hash = php_common_1.Hash.combine(this.dereferencable.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.objectOperator.hashCode(), hash);
        hash = this.openBrace !== null ? php_common_1.Hash.combine(this.openBrace.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.member.hashCode(), hash);
        hash = this.closeBrace !== null ? php_common_1.Hash.combine(this.closeBrace.hashCode(), hash) : hash;
        return hash;
    };
    IndirectMemberAccessNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IndirectMemberAccessNode;
}(MemberAccessNode));
exports.IndirectMemberAccessNode = IndirectMemberAccessNode;
var IndirectMethodInvocationNode = /** @class */ (function (_super) {
    __extends(IndirectMethodInvocationNode, _super);
    function IndirectMethodInvocationNode(dereferenceable, objectOperator, openBrace, member, closeBrace, openParen, argumentList, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.dereferenceable = dereferenceable;
        _this.objectOperator = objectOperator;
        _this.openBrace = openBrace;
        _this.member = member;
        _this.closeBrace = closeBrace;
        _this.openParen = openParen;
        _this.argumentList = argumentList;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(dereferenceable.flags, dereferenceable.fullWidth);
        _this.updateFlagsAndWidth(objectOperator.flags, objectOperator.fullWidth);
        if (openBrace !== null) {
            _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        }
        _this.updateFlagsAndWidth(member.flags, member.fullWidth);
        if (closeBrace !== null) {
            _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        }
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (argumentList !== null) {
            _this.updateFlagsAndWidth(argumentList.flags, argumentList.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IndirectMethodInvocationNode.prototype, "count", {
        get: function () {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMethodInvocationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMethodInvocationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IndirectMethodInvocationNode.prototype.accept = function (visitor) {
        visitor.visitMethodInvocation(this);
    };
    IndirectMethodInvocationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMethodInvocation(this);
    };
    IndirectMethodInvocationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.dereferenceable;
            case 1:
                return this.objectOperator;
            case 2:
                return this.openBrace;
            case 3:
                return this.member;
            case 4:
                return this.closeBrace;
            case 5:
                return this.openParen;
            case 6:
                return this.argumentList;
            case 7:
                return this.closeParen;
            default:
                return null;
        }
    };
    IndirectMethodInvocationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IndirectMethodInvocationSyntaxNode(this, parent, offset);
    };
    IndirectMethodInvocationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IndirectMethodInvocationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IndirectMethodInvocationNode.prototype.withDiagnostics = function (diagnostics) {
        return new IndirectMethodInvocationNode(this.dereferenceable, this.objectOperator, this.openBrace, this.member, this.closeBrace, this.openParen, this.argumentList, this.closeParen, diagnostics);
    };
    IndirectMethodInvocationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8793);
        hash = php_common_1.Hash.combine(this.dereferenceable.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.objectOperator.hashCode(), hash);
        hash = this.openBrace !== null ? php_common_1.Hash.combine(this.openBrace.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.member.hashCode(), hash);
        hash = this.closeBrace !== null ? php_common_1.Hash.combine(this.closeBrace.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.argumentList !== null ? php_common_1.Hash.combine(this.argumentList.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        return hash;
    };
    IndirectMethodInvocationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IndirectMethodInvocationNode;
}(MemberInvocationNode));
exports.IndirectMethodInvocationNode = IndirectMethodInvocationNode;
var IndirectObjectCreationNode = /** @class */ (function (_super) {
    __extends(IndirectObjectCreationNode, _super);
    function IndirectObjectCreationNode(newKeyword, classNameReference, openParen, argumentList, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.newKeyword = newKeyword;
        _this.classNameReference = classNameReference;
        _this.openParen = openParen;
        _this.argumentList = argumentList;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(newKeyword.flags, newKeyword.fullWidth);
        _this.updateFlagsAndWidth(classNameReference.flags, classNameReference.fullWidth);
        if (openParen !== null) {
            _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        }
        if (argumentList !== null) {
            _this.updateFlagsAndWidth(argumentList.flags, argumentList.fullWidth);
        }
        if (closeParen !== null) {
            _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IndirectObjectCreationNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectObjectCreationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectObjectCreationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IndirectObjectCreationNode.prototype.accept = function (visitor) {
        visitor.visitObjectCreation(this);
    };
    IndirectObjectCreationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitObjectCreation(this);
    };
    IndirectObjectCreationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.newKeyword;
            case 1:
                return this.classNameReference;
            case 2:
                return this.openParen;
            case 3:
                return this.argumentList;
            case 4:
                return this.closeParen;
            default:
                return null;
        }
    };
    IndirectObjectCreationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IndirectObjectCreationSyntaxNode(this, parent, offset);
    };
    IndirectObjectCreationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IndirectObjectCreationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IndirectObjectCreationNode.prototype.withDiagnostics = function (diagnostics) {
        return new IndirectObjectCreationNode(this.newKeyword, this.classNameReference, this.openParen, this.argumentList, this.closeParen, diagnostics);
    };
    IndirectObjectCreationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8794);
        hash = php_common_1.Hash.combine(this.newKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.classNameReference.hashCode(), hash);
        hash = this.openParen !== null ? php_common_1.Hash.combine(this.openParen.hashCode(), hash) : hash;
        hash = this.argumentList !== null ? php_common_1.Hash.combine(this.argumentList.hashCode(), hash) : hash;
        hash = this.closeParen !== null ? php_common_1.Hash.combine(this.closeParen.hashCode(), hash) : hash;
        return hash;
    };
    IndirectObjectCreationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IndirectObjectCreationNode;
}(ObjectCreationNode));
exports.IndirectObjectCreationNode = IndirectObjectCreationNode;
var IndirectScopedInvocationNode = /** @class */ (function (_super) {
    __extends(IndirectScopedInvocationNode, _super);
    function IndirectScopedInvocationNode(qualifier, doubleColon, openBrace, member, closeBrace, openParen, argumentList, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.qualifier = qualifier;
        _this.doubleColon = doubleColon;
        _this.openBrace = openBrace;
        _this.member = member;
        _this.closeBrace = closeBrace;
        _this.openParen = openParen;
        _this.argumentList = argumentList;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(qualifier.flags, qualifier.fullWidth);
        _this.updateFlagsAndWidth(doubleColon.flags, doubleColon.fullWidth);
        if (openBrace !== null) {
            _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        }
        _this.updateFlagsAndWidth(member.flags, member.fullWidth);
        if (closeBrace !== null) {
            _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        }
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (argumentList !== null) {
            _this.updateFlagsAndWidth(argumentList.flags, argumentList.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IndirectScopedInvocationNode.prototype, "count", {
        get: function () {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectScopedInvocationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectScopedInvocationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IndirectScopedInvocationNode.prototype.accept = function (visitor) {
        visitor.visitScopedInvocation(this);
    };
    IndirectScopedInvocationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitScopedInvocation(this);
    };
    IndirectScopedInvocationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.qualifier;
            case 1:
                return this.doubleColon;
            case 2:
                return this.openBrace;
            case 3:
                return this.member;
            case 4:
                return this.closeBrace;
            case 5:
                return this.openParen;
            case 6:
                return this.argumentList;
            case 7:
                return this.closeParen;
            default:
                return null;
        }
    };
    IndirectScopedInvocationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IndirectScopedInvocationSyntaxNode(this, parent, offset);
    };
    IndirectScopedInvocationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IndirectScopedInvocationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IndirectScopedInvocationNode.prototype.withDiagnostics = function (diagnostics) {
        return new IndirectScopedInvocationNode(this.qualifier, this.doubleColon, this.openBrace, this.member, this.closeBrace, this.openParen, this.argumentList, this.closeParen, diagnostics);
    };
    IndirectScopedInvocationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8795);
        hash = php_common_1.Hash.combine(this.qualifier.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.doubleColon.hashCode(), hash);
        hash = this.openBrace !== null ? php_common_1.Hash.combine(this.openBrace.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.member.hashCode(), hash);
        hash = this.closeBrace !== null ? php_common_1.Hash.combine(this.closeBrace.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.argumentList !== null ? php_common_1.Hash.combine(this.argumentList.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        return hash;
    };
    IndirectScopedInvocationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IndirectScopedInvocationNode;
}(ScopedInvocationNode));
exports.IndirectScopedInvocationNode = IndirectScopedInvocationNode;
var IndirectStringVariableNode = /** @class */ (function (_super) {
    __extends(IndirectStringVariableNode, _super);
    function IndirectStringVariableNode(dollarOpenBrace, expression, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.dollarOpenBrace = dollarOpenBrace;
        _this.expression = expression;
        _this.closeBrace = closeBrace;
        _this.updateFlagsAndWidth(dollarOpenBrace.flags, dollarOpenBrace.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IndirectStringVariableNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectStringVariableNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectStringVariableNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IndirectStringVariableNode.prototype.accept = function (visitor) {
        visitor.visitIndirectStringVariable(this);
    };
    IndirectStringVariableNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIndirectStringVariable(this);
    };
    IndirectStringVariableNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.dollarOpenBrace;
            case 1:
                return this.expression;
            case 2:
                return this.closeBrace;
            default:
                return null;
        }
    };
    IndirectStringVariableNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IndirectStringVariableSyntaxNode(this, parent, offset);
    };
    IndirectStringVariableNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IndirectStringVariableNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IndirectStringVariableNode.prototype.withDiagnostics = function (diagnostics) {
        return new IndirectStringVariableNode(this.dollarOpenBrace, this.expression, this.closeBrace, diagnostics);
    };
    IndirectStringVariableNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8796);
        hash = php_common_1.Hash.combine(this.dollarOpenBrace.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeBrace.hashCode(), hash);
        return hash;
    };
    IndirectStringVariableNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IndirectStringVariableNode;
}(ExpressionNode));
exports.IndirectStringVariableNode = IndirectStringVariableNode;
var IndirectVariableNode = /** @class */ (function (_super) {
    __extends(IndirectVariableNode, _super);
    function IndirectVariableNode(dollar, openBrace, expression, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.dollar = dollar;
        _this.openBrace = openBrace;
        _this.expression = expression;
        _this.closeBrace = closeBrace;
        _this.updateFlagsAndWidth(dollar.flags, dollar.fullWidth);
        if (openBrace !== null) {
            _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        }
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        if (closeBrace !== null) {
            _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IndirectVariableNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectVariableNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectVariableNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IndirectVariableNode.prototype.accept = function (visitor) {
        visitor.visitIndirectVariable(this);
    };
    IndirectVariableNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIndirectVariable(this);
    };
    IndirectVariableNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.dollar;
            case 1:
                return this.openBrace;
            case 2:
                return this.expression;
            case 3:
                return this.closeBrace;
            default:
                return null;
        }
    };
    IndirectVariableNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IndirectVariableSyntaxNode(this, parent, offset);
    };
    IndirectVariableNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IndirectVariableNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IndirectVariableNode.prototype.withDiagnostics = function (diagnostics) {
        return new IndirectVariableNode(this.dollar, this.openBrace, this.expression, this.closeBrace, diagnostics);
    };
    IndirectVariableNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8797);
        hash = php_common_1.Hash.combine(this.dollar.hashCode(), hash);
        hash = this.openBrace !== null ? php_common_1.Hash.combine(this.openBrace.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        hash = this.closeBrace !== null ? php_common_1.Hash.combine(this.closeBrace.hashCode(), hash) : hash;
        return hash;
    };
    IndirectVariableNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IndirectVariableNode;
}(VariableNode));
exports.IndirectVariableNode = IndirectVariableNode;
var InstanceOfNode = /** @class */ (function (_super) {
    __extends(InstanceOfNode, _super);
    function InstanceOfNode(operand, instanceOfKeyword, classNameOrReference, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.operand = operand;
        _this.instanceOfKeyword = instanceOfKeyword;
        _this.classNameOrReference = classNameOrReference;
        _this.updateFlagsAndWidth(operand.flags, operand.fullWidth);
        _this.updateFlagsAndWidth(instanceOfKeyword.flags, instanceOfKeyword.fullWidth);
        _this.updateFlagsAndWidth(classNameOrReference.flags, classNameOrReference.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(InstanceOfNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InstanceOfNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InstanceOfNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    InstanceOfNode.prototype.accept = function (visitor) {
        visitor.visitInstanceOf(this);
    };
    InstanceOfNode.prototype.acceptResult = function (visitor) {
        return visitor.visitInstanceOf(this);
    };
    InstanceOfNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.operand;
            case 1:
                return this.instanceOfKeyword;
            case 2:
                return this.classNameOrReference;
            default:
                return null;
        }
    };
    InstanceOfNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.InstanceOfSyntaxNode(this, parent, offset);
    };
    InstanceOfNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = InstanceOfNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    InstanceOfNode.prototype.withDiagnostics = function (diagnostics) {
        return new InstanceOfNode(this.operand, this.instanceOfKeyword, this.classNameOrReference, diagnostics);
    };
    InstanceOfNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8798);
        hash = php_common_1.Hash.combine(this.operand.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.instanceOfKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.classNameOrReference.hashCode(), hash);
        return hash;
    };
    InstanceOfNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return InstanceOfNode;
}(ExpressionNode));
exports.InstanceOfNode = InstanceOfNode;
var InterfaceDeclarationNode = /** @class */ (function (_super) {
    __extends(InterfaceDeclarationNode, _super);
    function InterfaceDeclarationNode(interfaceKeyword, identifier, extendsKeyword, baseInterfaces, openBrace, members, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.interfaceKeyword = interfaceKeyword;
        _this.identifier = identifier;
        _this.extendsKeyword = extendsKeyword;
        _this.baseInterfaces = baseInterfaces;
        _this.openBrace = openBrace;
        _this.members = members;
        _this.closeBrace = closeBrace;
        _this.updateFlagsAndWidth(interfaceKeyword.flags, interfaceKeyword.fullWidth);
        _this.updateFlagsAndWidth(identifier.flags, identifier.fullWidth);
        if (extendsKeyword !== null) {
            _this.updateFlagsAndWidth(extendsKeyword.flags, extendsKeyword.fullWidth);
        }
        if (baseInterfaces !== null) {
            _this.updateFlagsAndWidth(baseInterfaces.flags, baseInterfaces.fullWidth);
        }
        _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        if (members !== null) {
            _this.updateFlagsAndWidth(members.flags, members.fullWidth);
        }
        _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(InterfaceDeclarationNode.prototype, "count", {
        get: function () {
            return 7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InterfaceDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InterfaceDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    InterfaceDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitInterfaceDeclaration(this);
    };
    InterfaceDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitInterfaceDeclaration(this);
    };
    InterfaceDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.interfaceKeyword;
            case 1:
                return this.identifier;
            case 2:
                return this.extendsKeyword;
            case 3:
                return this.baseInterfaces;
            case 4:
                return this.openBrace;
            case 5:
                return this.members;
            case 6:
                return this.closeBrace;
            default:
                return null;
        }
    };
    InterfaceDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.InterfaceDeclarationSyntaxNode(this, parent, offset);
    };
    InterfaceDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = InterfaceDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    InterfaceDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new InterfaceDeclarationNode(this.interfaceKeyword, this.identifier, this.extendsKeyword, this.baseInterfaces, this.openBrace, this.members, this.closeBrace, diagnostics);
    };
    InterfaceDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8799);
        hash = php_common_1.Hash.combine(this.interfaceKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.identifier.hashCode(), hash);
        hash = this.extendsKeyword !== null ? php_common_1.Hash.combine(this.extendsKeyword.hashCode(), hash) : hash;
        hash = this.baseInterfaces !== null ? php_common_1.Hash.combine(this.baseInterfaces.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.openBrace.hashCode(), hash);
        hash = this.members !== null ? php_common_1.Hash.combine(this.members.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeBrace.hashCode(), hash);
        return hash;
    };
    InterfaceDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return InterfaceDeclarationNode;
}(TypeDeclarationNode));
exports.InterfaceDeclarationNode = InterfaceDeclarationNode;
var IsSetIntrinsicNode = /** @class */ (function (_super) {
    __extends(IsSetIntrinsicNode, _super);
    function IsSetIntrinsicNode(isSetKeyword, openParen, expressions, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.isSetKeyword = isSetKeyword;
        _this.openParen = openParen;
        _this.expressions = expressions;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(isSetKeyword.flags, isSetKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(expressions.flags, expressions.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(IsSetIntrinsicNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IsSetIntrinsicNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IsSetIntrinsicNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    IsSetIntrinsicNode.prototype.accept = function (visitor) {
        visitor.visitIsSetIntrinsic(this);
    };
    IsSetIntrinsicNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIsSetIntrinsic(this);
    };
    IsSetIntrinsicNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.isSetKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.expressions;
            case 3:
                return this.closeParen;
            default:
                return null;
        }
    };
    IsSetIntrinsicNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.IsSetIntrinsicSyntaxNode(this, parent, offset);
    };
    IsSetIntrinsicNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = IsSetIntrinsicNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    IsSetIntrinsicNode.prototype.withDiagnostics = function (diagnostics) {
        return new IsSetIntrinsicNode(this.isSetKeyword, this.openParen, this.expressions, this.closeParen, diagnostics);
    };
    IsSetIntrinsicNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8800);
        hash = php_common_1.Hash.combine(this.isSetKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expressions.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        return hash;
    };
    IsSetIntrinsicNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return IsSetIntrinsicNode;
}(IntrinsicNode));
exports.IsSetIntrinsicNode = IsSetIntrinsicNode;
var LabelNode = /** @class */ (function (_super) {
    __extends(LabelNode, _super);
    function LabelNode(label, colon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.label = label;
        _this.colon = colon;
        _this.updateFlagsAndWidth(label.flags, label.fullWidth);
        _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(LabelNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LabelNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LabelNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    LabelNode.prototype.accept = function (visitor) {
        visitor.visitLabel(this);
    };
    LabelNode.prototype.acceptResult = function (visitor) {
        return visitor.visitLabel(this);
    };
    LabelNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.label;
            case 1:
                return this.colon;
            default:
                return null;
        }
    };
    LabelNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.LabelSyntaxNode(this, parent, offset);
    };
    LabelNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = LabelNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    LabelNode.prototype.withDiagnostics = function (diagnostics) {
        return new LabelNode(this.label, this.colon, diagnostics);
    };
    LabelNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8801);
        hash = php_common_1.Hash.combine(this.label.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.colon.hashCode(), hash);
        return hash;
    };
    LabelNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return LabelNode;
}(StatementNode));
exports.LabelNode = LabelNode;
var LexicalVariableNode = /** @class */ (function (_super) {
    __extends(LexicalVariableNode, _super);
    function LexicalVariableNode(ampersand, variable, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.ampersand = ampersand;
        _this.variable = variable;
        if (ampersand !== null) {
            _this.updateFlagsAndWidth(ampersand.flags, ampersand.fullWidth);
        }
        _this.updateFlagsAndWidth(variable.flags, variable.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(LexicalVariableNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LexicalVariableNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LexicalVariableNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    LexicalVariableNode.prototype.accept = function (visitor) {
        visitor.visitLexicalVariable(this);
    };
    LexicalVariableNode.prototype.acceptResult = function (visitor) {
        return visitor.visitLexicalVariable(this);
    };
    LexicalVariableNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.ampersand;
            case 1:
                return this.variable;
            default:
                return null;
        }
    };
    LexicalVariableNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.LexicalVariableSyntaxNode(this, parent, offset);
    };
    LexicalVariableNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = LexicalVariableNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    LexicalVariableNode.prototype.withDiagnostics = function (diagnostics) {
        return new LexicalVariableNode(this.ampersand, this.variable, diagnostics);
    };
    LexicalVariableNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8802);
        hash = this.ampersand !== null ? php_common_1.Hash.combine(this.ampersand.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.variable.hashCode(), hash);
        return hash;
    };
    LexicalVariableNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return LexicalVariableNode;
}(VariableNode));
exports.LexicalVariableNode = LexicalVariableNode;
var LiteralNode = /** @class */ (function (_super) {
    __extends(LiteralNode, _super);
    function LiteralNode(value, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.value = value;
        _this.updateFlagsAndWidth(value.flags, value.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(LiteralNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LiteralNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LiteralNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    LiteralNode.prototype.accept = function (visitor) {
        visitor.visitLiteral(this);
    };
    LiteralNode.prototype.acceptResult = function (visitor) {
        return visitor.visitLiteral(this);
    };
    LiteralNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.value;
            default:
                return null;
        }
    };
    LiteralNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.LiteralSyntaxNode(this, parent, offset);
    };
    LiteralNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = LiteralNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    LiteralNode.prototype.withDiagnostics = function (diagnostics) {
        return new LiteralNode(this.value, diagnostics);
    };
    LiteralNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8803);
        hash = php_common_1.Hash.combine(this.value.hashCode(), hash);
        return hash;
    };
    LiteralNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return LiteralNode;
}(ExpressionNode));
exports.LiteralNode = LiteralNode;
var LocalVariableNode = /** @class */ (function (_super) {
    __extends(LocalVariableNode, _super);
    function LocalVariableNode(variable, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.variable = variable;
        _this.updateFlagsAndWidth(variable.flags, variable.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(LocalVariableNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalVariableNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalVariableNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    LocalVariableNode.prototype.accept = function (visitor) {
        visitor.visitLocalVariable(this);
    };
    LocalVariableNode.prototype.acceptResult = function (visitor) {
        return visitor.visitLocalVariable(this);
    };
    LocalVariableNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.variable;
            default:
                return null;
        }
    };
    LocalVariableNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.LocalVariableSyntaxNode(this, parent, offset);
    };
    LocalVariableNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = LocalVariableNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    LocalVariableNode.prototype.withDiagnostics = function (diagnostics) {
        return new LocalVariableNode(this.variable, diagnostics);
    };
    LocalVariableNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8804);
        hash = php_common_1.Hash.combine(this.variable.hashCode(), hash);
        return hash;
    };
    LocalVariableNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return LocalVariableNode;
}(VariableNode));
exports.LocalVariableNode = LocalVariableNode;
var MethodDeclarationNode = /** @class */ (function (_super) {
    __extends(MethodDeclarationNode, _super);
    function MethodDeclarationNode(modifiers, functionKeyword, ampersand, identifierOrKeyword, openParen, parameters, closeParen, colon, returnType, statements, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.modifiers = modifiers;
        _this.functionKeyword = functionKeyword;
        _this.ampersand = ampersand;
        _this.identifierOrKeyword = identifierOrKeyword;
        _this.openParen = openParen;
        _this.parameters = parameters;
        _this.closeParen = closeParen;
        _this.colon = colon;
        _this.returnType = returnType;
        _this.statements = statements;
        _this.semicolon = semicolon;
        if (modifiers !== null) {
            _this.updateFlagsAndWidth(modifiers.flags, modifiers.fullWidth);
        }
        _this.updateFlagsAndWidth(functionKeyword.flags, functionKeyword.fullWidth);
        if (ampersand !== null) {
            _this.updateFlagsAndWidth(ampersand.flags, ampersand.fullWidth);
        }
        _this.updateFlagsAndWidth(identifierOrKeyword.flags, identifierOrKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (parameters !== null) {
            _this.updateFlagsAndWidth(parameters.flags, parameters.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (colon !== null) {
            _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        }
        if (returnType !== null) {
            _this.updateFlagsAndWidth(returnType.flags, returnType.fullWidth);
        }
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        if (semicolon !== null) {
            _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(MethodDeclarationNode.prototype, "count", {
        get: function () {
            return 11;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    MethodDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitMethodDeclaration(this);
    };
    MethodDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMethodDeclaration(this);
    };
    MethodDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.modifiers;
            case 1:
                return this.functionKeyword;
            case 2:
                return this.ampersand;
            case 3:
                return this.identifierOrKeyword;
            case 4:
                return this.openParen;
            case 5:
                return this.parameters;
            case 6:
                return this.closeParen;
            case 7:
                return this.colon;
            case 8:
                return this.returnType;
            case 9:
                return this.statements;
            case 10:
                return this.semicolon;
            default:
                return null;
        }
    };
    MethodDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.MethodDeclarationSyntaxNode(this, parent, offset);
    };
    MethodDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = MethodDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    MethodDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new MethodDeclarationNode(this.modifiers, this.functionKeyword, this.ampersand, this.identifierOrKeyword, this.openParen, this.parameters, this.closeParen, this.colon, this.returnType, this.statements, this.semicolon, diagnostics);
    };
    MethodDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8805);
        hash = this.modifiers !== null ? php_common_1.Hash.combine(this.modifiers.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.functionKeyword.hashCode(), hash);
        hash = this.ampersand !== null ? php_common_1.Hash.combine(this.ampersand.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.identifierOrKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.parameters !== null ? php_common_1.Hash.combine(this.parameters.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = this.colon !== null ? php_common_1.Hash.combine(this.colon.hashCode(), hash) : hash;
        hash = this.returnType !== null ? php_common_1.Hash.combine(this.returnType.hashCode(), hash) : hash;
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        hash = this.semicolon !== null ? php_common_1.Hash.combine(this.semicolon.hashCode(), hash) : hash;
        return hash;
    };
    MethodDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return MethodDeclarationNode;
}(StatementNode));
exports.MethodDeclarationNode = MethodDeclarationNode;
var NamedMemberAccessNode = /** @class */ (function (_super) {
    __extends(NamedMemberAccessNode, _super);
    function NamedMemberAccessNode(dereferencable, objectOperator, member, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.dereferencable = dereferencable;
        _this.objectOperator = objectOperator;
        _this.member = member;
        _this.updateFlagsAndWidth(dereferencable.flags, dereferencable.fullWidth);
        _this.updateFlagsAndWidth(objectOperator.flags, objectOperator.fullWidth);
        _this.updateFlagsAndWidth(member.flags, member.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(NamedMemberAccessNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMemberAccessNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMemberAccessNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    NamedMemberAccessNode.prototype.accept = function (visitor) {
        visitor.visitMemberAccess(this);
    };
    NamedMemberAccessNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMemberAccess(this);
    };
    NamedMemberAccessNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.dereferencable;
            case 1:
                return this.objectOperator;
            case 2:
                return this.member;
            default:
                return null;
        }
    };
    NamedMemberAccessNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.NamedMemberAccessSyntaxNode(this, parent, offset);
    };
    NamedMemberAccessNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = NamedMemberAccessNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    NamedMemberAccessNode.prototype.withDiagnostics = function (diagnostics) {
        return new NamedMemberAccessNode(this.dereferencable, this.objectOperator, this.member, diagnostics);
    };
    NamedMemberAccessNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8806);
        hash = php_common_1.Hash.combine(this.dereferencable.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.objectOperator.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.member.hashCode(), hash);
        return hash;
    };
    NamedMemberAccessNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return NamedMemberAccessNode;
}(MemberAccessNode));
exports.NamedMemberAccessNode = NamedMemberAccessNode;
var NamedMethodInvocationNode = /** @class */ (function (_super) {
    __extends(NamedMethodInvocationNode, _super);
    function NamedMethodInvocationNode(dereferenceable, objectOperator, identifierOrKeyword, openParen, argumentList, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.dereferenceable = dereferenceable;
        _this.objectOperator = objectOperator;
        _this.identifierOrKeyword = identifierOrKeyword;
        _this.openParen = openParen;
        _this.argumentList = argumentList;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(dereferenceable.flags, dereferenceable.fullWidth);
        _this.updateFlagsAndWidth(objectOperator.flags, objectOperator.fullWidth);
        _this.updateFlagsAndWidth(identifierOrKeyword.flags, identifierOrKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (argumentList !== null) {
            _this.updateFlagsAndWidth(argumentList.flags, argumentList.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(NamedMethodInvocationNode.prototype, "count", {
        get: function () {
            return 6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMethodInvocationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMethodInvocationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    NamedMethodInvocationNode.prototype.accept = function (visitor) {
        visitor.visitMethodInvocation(this);
    };
    NamedMethodInvocationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMethodInvocation(this);
    };
    NamedMethodInvocationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.dereferenceable;
            case 1:
                return this.objectOperator;
            case 2:
                return this.identifierOrKeyword;
            case 3:
                return this.openParen;
            case 4:
                return this.argumentList;
            case 5:
                return this.closeParen;
            default:
                return null;
        }
    };
    NamedMethodInvocationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.NamedMethodInvocationSyntaxNode(this, parent, offset);
    };
    NamedMethodInvocationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = NamedMethodInvocationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    NamedMethodInvocationNode.prototype.withDiagnostics = function (diagnostics) {
        return new NamedMethodInvocationNode(this.dereferenceable, this.objectOperator, this.identifierOrKeyword, this.openParen, this.argumentList, this.closeParen, diagnostics);
    };
    NamedMethodInvocationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8807);
        hash = php_common_1.Hash.combine(this.dereferenceable.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.objectOperator.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.identifierOrKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.argumentList !== null ? php_common_1.Hash.combine(this.argumentList.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        return hash;
    };
    NamedMethodInvocationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return NamedMethodInvocationNode;
}(MemberInvocationNode));
exports.NamedMethodInvocationNode = NamedMethodInvocationNode;
var NamedObjectCreationNode = /** @class */ (function (_super) {
    __extends(NamedObjectCreationNode, _super);
    function NamedObjectCreationNode(newKeyword, className, openParen, argumentList, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.newKeyword = newKeyword;
        _this.className = className;
        _this.openParen = openParen;
        _this.argumentList = argumentList;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(newKeyword.flags, newKeyword.fullWidth);
        _this.updateFlagsAndWidth(className.flags, className.fullWidth);
        if (openParen !== null) {
            _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        }
        if (argumentList !== null) {
            _this.updateFlagsAndWidth(argumentList.flags, argumentList.fullWidth);
        }
        if (closeParen !== null) {
            _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(NamedObjectCreationNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedObjectCreationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedObjectCreationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    NamedObjectCreationNode.prototype.accept = function (visitor) {
        visitor.visitObjectCreation(this);
    };
    NamedObjectCreationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitObjectCreation(this);
    };
    NamedObjectCreationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.newKeyword;
            case 1:
                return this.className;
            case 2:
                return this.openParen;
            case 3:
                return this.argumentList;
            case 4:
                return this.closeParen;
            default:
                return null;
        }
    };
    NamedObjectCreationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.NamedObjectCreationSyntaxNode(this, parent, offset);
    };
    NamedObjectCreationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = NamedObjectCreationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    NamedObjectCreationNode.prototype.withDiagnostics = function (diagnostics) {
        return new NamedObjectCreationNode(this.newKeyword, this.className, this.openParen, this.argumentList, this.closeParen, diagnostics);
    };
    NamedObjectCreationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8808);
        hash = php_common_1.Hash.combine(this.newKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.className.hashCode(), hash);
        hash = this.openParen !== null ? php_common_1.Hash.combine(this.openParen.hashCode(), hash) : hash;
        hash = this.argumentList !== null ? php_common_1.Hash.combine(this.argumentList.hashCode(), hash) : hash;
        hash = this.closeParen !== null ? php_common_1.Hash.combine(this.closeParen.hashCode(), hash) : hash;
        return hash;
    };
    NamedObjectCreationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return NamedObjectCreationNode;
}(ObjectCreationNode));
exports.NamedObjectCreationNode = NamedObjectCreationNode;
var NamedScopedInvocationNode = /** @class */ (function (_super) {
    __extends(NamedScopedInvocationNode, _super);
    function NamedScopedInvocationNode(qualifier, doubleColon, member, openParen, argumentList, closeParen, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.qualifier = qualifier;
        _this.doubleColon = doubleColon;
        _this.member = member;
        _this.openParen = openParen;
        _this.argumentList = argumentList;
        _this.closeParen = closeParen;
        _this.updateFlagsAndWidth(qualifier.flags, qualifier.fullWidth);
        _this.updateFlagsAndWidth(doubleColon.flags, doubleColon.fullWidth);
        _this.updateFlagsAndWidth(member.flags, member.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        if (argumentList !== null) {
            _this.updateFlagsAndWidth(argumentList.flags, argumentList.fullWidth);
        }
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(NamedScopedInvocationNode.prototype, "count", {
        get: function () {
            return 6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedScopedInvocationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedScopedInvocationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    NamedScopedInvocationNode.prototype.accept = function (visitor) {
        visitor.visitScopedInvocation(this);
    };
    NamedScopedInvocationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitScopedInvocation(this);
    };
    NamedScopedInvocationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.qualifier;
            case 1:
                return this.doubleColon;
            case 2:
                return this.member;
            case 3:
                return this.openParen;
            case 4:
                return this.argumentList;
            case 5:
                return this.closeParen;
            default:
                return null;
        }
    };
    NamedScopedInvocationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.NamedScopedInvocationSyntaxNode(this, parent, offset);
    };
    NamedScopedInvocationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = NamedScopedInvocationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    NamedScopedInvocationNode.prototype.withDiagnostics = function (diagnostics) {
        return new NamedScopedInvocationNode(this.qualifier, this.doubleColon, this.member, this.openParen, this.argumentList, this.closeParen, diagnostics);
    };
    NamedScopedInvocationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8809);
        hash = php_common_1.Hash.combine(this.qualifier.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.doubleColon.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.member.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = this.argumentList !== null ? php_common_1.Hash.combine(this.argumentList.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        return hash;
    };
    NamedScopedInvocationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return NamedScopedInvocationNode;
}(ScopedInvocationNode));
exports.NamedScopedInvocationNode = NamedScopedInvocationNode;
var NamedTraitAliasNode = /** @class */ (function (_super) {
    __extends(NamedTraitAliasNode, _super);
    function NamedTraitAliasNode(methodName, asKeyword, modifier, alias, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.methodName = methodName;
        _this.asKeyword = asKeyword;
        _this.modifier = modifier;
        _this.alias = alias;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(methodName.flags, methodName.fullWidth);
        _this.updateFlagsAndWidth(asKeyword.flags, asKeyword.fullWidth);
        if (modifier !== null) {
            _this.updateFlagsAndWidth(modifier.flags, modifier.fullWidth);
        }
        if (alias !== null) {
            _this.updateFlagsAndWidth(alias.flags, alias.fullWidth);
        }
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(NamedTraitAliasNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedTraitAliasNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedTraitAliasNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    NamedTraitAliasNode.prototype.accept = function (visitor) {
        visitor.visitTraitAlias(this);
    };
    NamedTraitAliasNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitAlias(this);
    };
    NamedTraitAliasNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.methodName;
            case 1:
                return this.asKeyword;
            case 2:
                return this.modifier;
            case 3:
                return this.alias;
            case 4:
                return this.semicolon;
            default:
                return null;
        }
    };
    NamedTraitAliasNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.NamedTraitAliasSyntaxNode(this, parent, offset);
    };
    NamedTraitAliasNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = NamedTraitAliasNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    NamedTraitAliasNode.prototype.withDiagnostics = function (diagnostics) {
        return new NamedTraitAliasNode(this.methodName, this.asKeyword, this.modifier, this.alias, this.semicolon, diagnostics);
    };
    NamedTraitAliasNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8810);
        hash = php_common_1.Hash.combine(this.methodName.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.asKeyword.hashCode(), hash);
        hash = this.modifier !== null ? php_common_1.Hash.combine(this.modifier.hashCode(), hash) : hash;
        hash = this.alias !== null ? php_common_1.Hash.combine(this.alias.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    NamedTraitAliasNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return NamedTraitAliasNode;
}(TraitAliasNode));
exports.NamedTraitAliasNode = NamedTraitAliasNode;
var NamedTypeNode = /** @class */ (function (_super) {
    __extends(NamedTypeNode, _super);
    function NamedTypeNode(question, typeName, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.question = question;
        _this.typeName = typeName;
        if (question !== null) {
            _this.updateFlagsAndWidth(question.flags, question.fullWidth);
        }
        _this.updateFlagsAndWidth(typeName.flags, typeName.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(NamedTypeNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedTypeNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedTypeNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    NamedTypeNode.prototype.accept = function (visitor) {
        visitor.visitType(this);
    };
    NamedTypeNode.prototype.acceptResult = function (visitor) {
        return visitor.visitType(this);
    };
    NamedTypeNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.question;
            case 1:
                return this.typeName;
            default:
                return null;
        }
    };
    NamedTypeNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.NamedTypeSyntaxNode(this, parent, offset);
    };
    NamedTypeNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = NamedTypeNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    NamedTypeNode.prototype.withDiagnostics = function (diagnostics) {
        return new NamedTypeNode(this.question, this.typeName, diagnostics);
    };
    NamedTypeNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8811);
        hash = this.question !== null ? php_common_1.Hash.combine(this.question.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.typeName.hashCode(), hash);
        return hash;
    };
    NamedTypeNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return NamedTypeNode;
}(TypeNode));
exports.NamedTypeNode = NamedTypeNode;
var NamespaceDeclarationNode = /** @class */ (function (_super) {
    __extends(NamespaceDeclarationNode, _super);
    function NamespaceDeclarationNode(namespaceKeyword, name, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.namespaceKeyword = namespaceKeyword;
        _this.name = name;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(namespaceKeyword.flags, namespaceKeyword.fullWidth);
        _this.updateFlagsAndWidth(name.flags, name.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(NamespaceDeclarationNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    NamespaceDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitNamespaceDeclaration(this);
    };
    NamespaceDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitNamespaceDeclaration(this);
    };
    NamespaceDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.namespaceKeyword;
            case 1:
                return this.name;
            case 2:
                return this.semicolon;
            default:
                return null;
        }
    };
    NamespaceDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.NamespaceDeclarationSyntaxNode(this, parent, offset);
    };
    NamespaceDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = NamespaceDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    NamespaceDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new NamespaceDeclarationNode(this.namespaceKeyword, this.name, this.semicolon, diagnostics);
    };
    NamespaceDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8812);
        hash = php_common_1.Hash.combine(this.namespaceKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.name.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    NamespaceDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return NamespaceDeclarationNode;
}(StatementNode));
exports.NamespaceDeclarationNode = NamespaceDeclarationNode;
var NamespaceGroupDeclarationNode = /** @class */ (function (_super) {
    __extends(NamespaceGroupDeclarationNode, _super);
    function NamespaceGroupDeclarationNode(namespaceKeyword, name, openBrace, statements, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.namespaceKeyword = namespaceKeyword;
        _this.name = name;
        _this.openBrace = openBrace;
        _this.statements = statements;
        _this.closeBrace = closeBrace;
        _this.updateFlagsAndWidth(namespaceKeyword.flags, namespaceKeyword.fullWidth);
        if (name !== null) {
            _this.updateFlagsAndWidth(name.flags, name.fullWidth);
        }
        _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(NamespaceGroupDeclarationNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceGroupDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceGroupDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    NamespaceGroupDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitNamespaceGroupDeclaration(this);
    };
    NamespaceGroupDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitNamespaceGroupDeclaration(this);
    };
    NamespaceGroupDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.namespaceKeyword;
            case 1:
                return this.name;
            case 2:
                return this.openBrace;
            case 3:
                return this.statements;
            case 4:
                return this.closeBrace;
            default:
                return null;
        }
    };
    NamespaceGroupDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.NamespaceGroupDeclarationSyntaxNode(this, parent, offset);
    };
    NamespaceGroupDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = NamespaceGroupDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    NamespaceGroupDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new NamespaceGroupDeclarationNode(this.namespaceKeyword, this.name, this.openBrace, this.statements, this.closeBrace, diagnostics);
    };
    NamespaceGroupDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8813);
        hash = php_common_1.Hash.combine(this.namespaceKeyword.hashCode(), hash);
        hash = this.name !== null ? php_common_1.Hash.combine(this.name.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.openBrace.hashCode(), hash);
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeBrace.hashCode(), hash);
        return hash;
    };
    NamespaceGroupDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return NamespaceGroupDeclarationNode;
}(StatementNode));
exports.NamespaceGroupDeclarationNode = NamespaceGroupDeclarationNode;
var PartiallyQualifiedNameNode = /** @class */ (function (_super) {
    __extends(PartiallyQualifiedNameNode, _super);
    function PartiallyQualifiedNameNode(namespaceName, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.namespaceName = namespaceName;
        _this.updateFlagsAndWidth(namespaceName.flags, namespaceName.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(PartiallyQualifiedNameNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PartiallyQualifiedNameNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PartiallyQualifiedNameNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    PartiallyQualifiedNameNode.prototype.accept = function (visitor) {
        visitor.visitPartiallyQualifiedName(this);
    };
    PartiallyQualifiedNameNode.prototype.acceptResult = function (visitor) {
        return visitor.visitPartiallyQualifiedName(this);
    };
    PartiallyQualifiedNameNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.namespaceName;
            default:
                return null;
        }
    };
    PartiallyQualifiedNameNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.PartiallyQualifiedNameSyntaxNode(this, parent, offset);
    };
    PartiallyQualifiedNameNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = PartiallyQualifiedNameNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    PartiallyQualifiedNameNode.prototype.withDiagnostics = function (diagnostics) {
        return new PartiallyQualifiedNameNode(this.namespaceName, diagnostics);
    };
    PartiallyQualifiedNameNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8814);
        hash = php_common_1.Hash.combine(this.namespaceName.hashCode(), hash);
        return hash;
    };
    PartiallyQualifiedNameNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return PartiallyQualifiedNameNode;
}(NameNode));
exports.PartiallyQualifiedNameNode = PartiallyQualifiedNameNode;
var PostfixUnaryNode = /** @class */ (function (_super) {
    __extends(PostfixUnaryNode, _super);
    function PostfixUnaryNode(operand, operator, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.operand = operand;
        _this.operator = operator;
        _this.updateFlagsAndWidth(operand.flags, operand.fullWidth);
        _this.updateFlagsAndWidth(operator.flags, operator.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(PostfixUnaryNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PostfixUnaryNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PostfixUnaryNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    PostfixUnaryNode.prototype.accept = function (visitor) {
        visitor.visitPostfixUnaryExpression(this);
    };
    PostfixUnaryNode.prototype.acceptResult = function (visitor) {
        return visitor.visitPostfixUnaryExpression(this);
    };
    PostfixUnaryNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.operand;
            case 1:
                return this.operator;
            default:
                return null;
        }
    };
    PostfixUnaryNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.PostfixUnarySyntaxNode(this, parent, offset);
    };
    PostfixUnaryNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = PostfixUnaryNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    PostfixUnaryNode.prototype.withDiagnostics = function (diagnostics) {
        return new PostfixUnaryNode(this.operand, this.operator, diagnostics);
    };
    PostfixUnaryNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8815);
        hash = php_common_1.Hash.combine(this.operand.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.operator.hashCode(), hash);
        return hash;
    };
    PostfixUnaryNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return PostfixUnaryNode;
}(ExpressionNode));
exports.PostfixUnaryNode = PostfixUnaryNode;
var PredefinedTypeNode = /** @class */ (function (_super) {
    __extends(PredefinedTypeNode, _super);
    function PredefinedTypeNode(question, keyword, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.question = question;
        _this.keyword = keyword;
        if (question !== null) {
            _this.updateFlagsAndWidth(question.flags, question.fullWidth);
        }
        _this.updateFlagsAndWidth(keyword.flags, keyword.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(PredefinedTypeNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PredefinedTypeNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PredefinedTypeNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    PredefinedTypeNode.prototype.accept = function (visitor) {
        visitor.visitType(this);
    };
    PredefinedTypeNode.prototype.acceptResult = function (visitor) {
        return visitor.visitType(this);
    };
    PredefinedTypeNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.question;
            case 1:
                return this.keyword;
            default:
                return null;
        }
    };
    PredefinedTypeNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.PredefinedTypeSyntaxNode(this, parent, offset);
    };
    PredefinedTypeNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = PredefinedTypeNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    PredefinedTypeNode.prototype.withDiagnostics = function (diagnostics) {
        return new PredefinedTypeNode(this.question, this.keyword, diagnostics);
    };
    PredefinedTypeNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8816);
        hash = this.question !== null ? php_common_1.Hash.combine(this.question.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.keyword.hashCode(), hash);
        return hash;
    };
    PredefinedTypeNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return PredefinedTypeNode;
}(TypeNode));
exports.PredefinedTypeNode = PredefinedTypeNode;
var PrintIntrinsicNode = /** @class */ (function (_super) {
    __extends(PrintIntrinsicNode, _super);
    function PrintIntrinsicNode(printKeyword, expression, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.printKeyword = printKeyword;
        _this.expression = expression;
        _this.updateFlagsAndWidth(printKeyword.flags, printKeyword.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(PrintIntrinsicNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PrintIntrinsicNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PrintIntrinsicNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    PrintIntrinsicNode.prototype.accept = function (visitor) {
        visitor.visitPrintIntrinsic(this);
    };
    PrintIntrinsicNode.prototype.acceptResult = function (visitor) {
        return visitor.visitPrintIntrinsic(this);
    };
    PrintIntrinsicNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.printKeyword;
            case 1:
                return this.expression;
            default:
                return null;
        }
    };
    PrintIntrinsicNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.PrintIntrinsicSyntaxNode(this, parent, offset);
    };
    PrintIntrinsicNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = PrintIntrinsicNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    PrintIntrinsicNode.prototype.withDiagnostics = function (diagnostics) {
        return new PrintIntrinsicNode(this.printKeyword, this.expression, diagnostics);
    };
    PrintIntrinsicNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8817);
        hash = php_common_1.Hash.combine(this.printKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        return hash;
    };
    PrintIntrinsicNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return PrintIntrinsicNode;
}(IntrinsicNode));
exports.PrintIntrinsicNode = PrintIntrinsicNode;
var PropertyDeclarationNode = /** @class */ (function (_super) {
    __extends(PropertyDeclarationNode, _super);
    function PropertyDeclarationNode(modifiers, type, properties, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.modifiers = modifiers;
        _this.type = type;
        _this.properties = properties;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(modifiers.flags, modifiers.fullWidth);
        if (type !== null) {
            _this.updateFlagsAndWidth(type.flags, type.fullWidth);
        }
        _this.updateFlagsAndWidth(properties.flags, properties.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(PropertyDeclarationNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    PropertyDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitPropertyDeclaration(this);
    };
    PropertyDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitPropertyDeclaration(this);
    };
    PropertyDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.modifiers;
            case 1:
                return this.type;
            case 2:
                return this.properties;
            case 3:
                return this.semicolon;
            default:
                return null;
        }
    };
    PropertyDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.PropertyDeclarationSyntaxNode(this, parent, offset);
    };
    PropertyDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = PropertyDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    PropertyDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new PropertyDeclarationNode(this.modifiers, this.type, this.properties, this.semicolon, diagnostics);
    };
    PropertyDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8818);
        hash = php_common_1.Hash.combine(this.modifiers.hashCode(), hash);
        hash = this.type !== null ? php_common_1.Hash.combine(this.type.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.properties.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    PropertyDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return PropertyDeclarationNode;
}(StatementNode));
exports.PropertyDeclarationNode = PropertyDeclarationNode;
var ReferencedTraitAliasNode = /** @class */ (function (_super) {
    __extends(ReferencedTraitAliasNode, _super);
    function ReferencedTraitAliasNode(reference, asKeyword, modifier, alias, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.reference = reference;
        _this.asKeyword = asKeyword;
        _this.modifier = modifier;
        _this.alias = alias;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(reference.flags, reference.fullWidth);
        _this.updateFlagsAndWidth(asKeyword.flags, asKeyword.fullWidth);
        if (modifier !== null) {
            _this.updateFlagsAndWidth(modifier.flags, modifier.fullWidth);
        }
        if (alias !== null) {
            _this.updateFlagsAndWidth(alias.flags, alias.fullWidth);
        }
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ReferencedTraitAliasNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReferencedTraitAliasNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReferencedTraitAliasNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ReferencedTraitAliasNode.prototype.accept = function (visitor) {
        visitor.visitTraitAlias(this);
    };
    ReferencedTraitAliasNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitAlias(this);
    };
    ReferencedTraitAliasNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.reference;
            case 1:
                return this.asKeyword;
            case 2:
                return this.modifier;
            case 3:
                return this.alias;
            case 4:
                return this.semicolon;
            default:
                return null;
        }
    };
    ReferencedTraitAliasNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ReferencedTraitAliasSyntaxNode(this, parent, offset);
    };
    ReferencedTraitAliasNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ReferencedTraitAliasNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ReferencedTraitAliasNode.prototype.withDiagnostics = function (diagnostics) {
        return new ReferencedTraitAliasNode(this.reference, this.asKeyword, this.modifier, this.alias, this.semicolon, diagnostics);
    };
    ReferencedTraitAliasNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8819);
        hash = php_common_1.Hash.combine(this.reference.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.asKeyword.hashCode(), hash);
        hash = this.modifier !== null ? php_common_1.Hash.combine(this.modifier.hashCode(), hash) : hash;
        hash = this.alias !== null ? php_common_1.Hash.combine(this.alias.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    ReferencedTraitAliasNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ReferencedTraitAliasNode;
}(TraitAliasNode));
exports.ReferencedTraitAliasNode = ReferencedTraitAliasNode;
var RelativeNameNode = /** @class */ (function (_super) {
    __extends(RelativeNameNode, _super);
    function RelativeNameNode(namespaceKeyword, leadingBackslash, namespaceName, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.namespaceKeyword = namespaceKeyword;
        _this.leadingBackslash = leadingBackslash;
        _this.namespaceName = namespaceName;
        _this.updateFlagsAndWidth(namespaceKeyword.flags, namespaceKeyword.fullWidth);
        _this.updateFlagsAndWidth(leadingBackslash.flags, leadingBackslash.fullWidth);
        _this.updateFlagsAndWidth(namespaceName.flags, namespaceName.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(RelativeNameNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RelativeNameNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RelativeNameNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    RelativeNameNode.prototype.accept = function (visitor) {
        visitor.visitRelativeName(this);
    };
    RelativeNameNode.prototype.acceptResult = function (visitor) {
        return visitor.visitRelativeName(this);
    };
    RelativeNameNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.namespaceKeyword;
            case 1:
                return this.leadingBackslash;
            case 2:
                return this.namespaceName;
            default:
                return null;
        }
    };
    RelativeNameNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.RelativeNameSyntaxNode(this, parent, offset);
    };
    RelativeNameNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = RelativeNameNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    RelativeNameNode.prototype.withDiagnostics = function (diagnostics) {
        return new RelativeNameNode(this.namespaceKeyword, this.leadingBackslash, this.namespaceName, diagnostics);
    };
    RelativeNameNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8820);
        hash = php_common_1.Hash.combine(this.namespaceKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.leadingBackslash.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.namespaceName.hashCode(), hash);
        return hash;
    };
    RelativeNameNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return RelativeNameNode;
}(NameNode));
exports.RelativeNameNode = RelativeNameNode;
var ReturnNode = /** @class */ (function (_super) {
    __extends(ReturnNode, _super);
    function ReturnNode(returnKeyword, expression, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.returnKeyword = returnKeyword;
        _this.expression = expression;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(returnKeyword.flags, returnKeyword.fullWidth);
        if (expression !== null) {
            _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        }
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ReturnNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReturnNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReturnNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ReturnNode.prototype.accept = function (visitor) {
        visitor.visitReturn(this);
    };
    ReturnNode.prototype.acceptResult = function (visitor) {
        return visitor.visitReturn(this);
    };
    ReturnNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.returnKeyword;
            case 1:
                return this.expression;
            case 2:
                return this.semicolon;
            default:
                return null;
        }
    };
    ReturnNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ReturnSyntaxNode(this, parent, offset);
    };
    ReturnNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ReturnNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ReturnNode.prototype.withDiagnostics = function (diagnostics) {
        return new ReturnNode(this.returnKeyword, this.expression, this.semicolon, diagnostics);
    };
    ReturnNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8821);
        hash = php_common_1.Hash.combine(this.returnKeyword.hashCode(), hash);
        hash = this.expression !== null ? php_common_1.Hash.combine(this.expression.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    ReturnNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ReturnNode;
}(JumpNode));
exports.ReturnNode = ReturnNode;
var ScriptInclusionNode = /** @class */ (function (_super) {
    __extends(ScriptInclusionNode, _super);
    function ScriptInclusionNode(inclusionKeyword, expression, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.inclusionKeyword = inclusionKeyword;
        _this.expression = expression;
        _this.updateFlagsAndWidth(inclusionKeyword.flags, inclusionKeyword.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ScriptInclusionNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScriptInclusionNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScriptInclusionNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ScriptInclusionNode.prototype.accept = function (visitor) {
        visitor.visitScriptInclusion(this);
    };
    ScriptInclusionNode.prototype.acceptResult = function (visitor) {
        return visitor.visitScriptInclusion(this);
    };
    ScriptInclusionNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.inclusionKeyword;
            case 1:
                return this.expression;
            default:
                return null;
        }
    };
    ScriptInclusionNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ScriptInclusionSyntaxNode(this, parent, offset);
    };
    ScriptInclusionNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ScriptInclusionNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ScriptInclusionNode.prototype.withDiagnostics = function (diagnostics) {
        return new ScriptInclusionNode(this.inclusionKeyword, this.expression, diagnostics);
    };
    ScriptInclusionNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8822);
        hash = php_common_1.Hash.combine(this.inclusionKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        return hash;
    };
    ScriptInclusionNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ScriptInclusionNode;
}(IntrinsicNode));
exports.ScriptInclusionNode = ScriptInclusionNode;
var ShellCommandTemplateNode = /** @class */ (function (_super) {
    __extends(ShellCommandTemplateNode, _super);
    function ShellCommandTemplateNode(openBackQuote, template, closeBackQuote, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.openBackQuote = openBackQuote;
        _this.template = template;
        _this.closeBackQuote = closeBackQuote;
        _this.updateFlagsAndWidth(openBackQuote.flags, openBackQuote.fullWidth);
        if (template !== null) {
            _this.updateFlagsAndWidth(template.flags, template.fullWidth);
        }
        _this.updateFlagsAndWidth(closeBackQuote.flags, closeBackQuote.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ShellCommandTemplateNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShellCommandTemplateNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShellCommandTemplateNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ShellCommandTemplateNode.prototype.accept = function (visitor) {
        visitor.visitShellCommandTemplate(this);
    };
    ShellCommandTemplateNode.prototype.acceptResult = function (visitor) {
        return visitor.visitShellCommandTemplate(this);
    };
    ShellCommandTemplateNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.openBackQuote;
            case 1:
                return this.template;
            case 2:
                return this.closeBackQuote;
            default:
                return null;
        }
    };
    ShellCommandTemplateNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ShellCommandTemplateSyntaxNode(this, parent, offset);
    };
    ShellCommandTemplateNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ShellCommandTemplateNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ShellCommandTemplateNode.prototype.withDiagnostics = function (diagnostics) {
        return new ShellCommandTemplateNode(this.openBackQuote, this.template, this.closeBackQuote, diagnostics);
    };
    ShellCommandTemplateNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8823);
        hash = php_common_1.Hash.combine(this.openBackQuote.hashCode(), hash);
        hash = this.template !== null ? php_common_1.Hash.combine(this.template.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeBackQuote.hashCode(), hash);
        return hash;
    };
    ShellCommandTemplateNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ShellCommandTemplateNode;
}(ExpressionNode));
exports.ShellCommandTemplateNode = ShellCommandTemplateNode;
var StatementBlockNode = /** @class */ (function (_super) {
    __extends(StatementBlockNode, _super);
    function StatementBlockNode(openBrace, statements, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.openBrace = openBrace;
        _this.statements = statements;
        _this.closeBrace = closeBrace;
        _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(StatementBlockNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StatementBlockNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StatementBlockNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    StatementBlockNode.prototype.accept = function (visitor) {
        visitor.visitStatementBlock(this);
    };
    StatementBlockNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStatementBlock(this);
    };
    StatementBlockNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.openBrace;
            case 1:
                return this.statements;
            case 2:
                return this.closeBrace;
            default:
                return null;
        }
    };
    StatementBlockNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.StatementBlockSyntaxNode(this, parent, offset);
    };
    StatementBlockNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = StatementBlockNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    StatementBlockNode.prototype.withDiagnostics = function (diagnostics) {
        return new StatementBlockNode(this.openBrace, this.statements, this.closeBrace, diagnostics);
    };
    StatementBlockNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8824);
        hash = php_common_1.Hash.combine(this.openBrace.hashCode(), hash);
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeBrace.hashCode(), hash);
        return hash;
    };
    StatementBlockNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return StatementBlockNode;
}(StatementNode));
exports.StatementBlockNode = StatementBlockNode;
var StaticNode = /** @class */ (function (_super) {
    __extends(StaticNode, _super);
    function StaticNode(staticKeyword, variables, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.staticKeyword = staticKeyword;
        _this.variables = variables;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(staticKeyword.flags, staticKeyword.fullWidth);
        _this.updateFlagsAndWidth(variables.flags, variables.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(StaticNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    StaticNode.prototype.accept = function (visitor) {
        visitor.visitStaticDeclaration(this);
    };
    StaticNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStaticDeclaration(this);
    };
    StaticNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.staticKeyword;
            case 1:
                return this.variables;
            case 2:
                return this.semicolon;
            default:
                return null;
        }
    };
    StaticNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.StaticSyntaxNode(this, parent, offset);
    };
    StaticNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = StaticNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    StaticNode.prototype.withDiagnostics = function (diagnostics) {
        return new StaticNode(this.staticKeyword, this.variables, this.semicolon, diagnostics);
    };
    StaticNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8825);
        hash = php_common_1.Hash.combine(this.staticKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.variables.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    StaticNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return StaticNode;
}(StatementNode));
exports.StaticNode = StaticNode;
var StaticPropertyNode = /** @class */ (function (_super) {
    __extends(StaticPropertyNode, _super);
    function StaticPropertyNode(qualifier, doubleColon, member, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.qualifier = qualifier;
        _this.doubleColon = doubleColon;
        _this.member = member;
        _this.updateFlagsAndWidth(qualifier.flags, qualifier.fullWidth);
        _this.updateFlagsAndWidth(doubleColon.flags, doubleColon.fullWidth);
        _this.updateFlagsAndWidth(member.flags, member.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(StaticPropertyNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticPropertyNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticPropertyNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    StaticPropertyNode.prototype.accept = function (visitor) {
        visitor.visitStaticProperty(this);
    };
    StaticPropertyNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStaticProperty(this);
    };
    StaticPropertyNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.qualifier;
            case 1:
                return this.doubleColon;
            case 2:
                return this.member;
            default:
                return null;
        }
    };
    StaticPropertyNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.StaticPropertySyntaxNode(this, parent, offset);
    };
    StaticPropertyNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = StaticPropertyNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    StaticPropertyNode.prototype.withDiagnostics = function (diagnostics) {
        return new StaticPropertyNode(this.qualifier, this.doubleColon, this.member, diagnostics);
    };
    StaticPropertyNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8826);
        hash = php_common_1.Hash.combine(this.qualifier.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.doubleColon.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.member.hashCode(), hash);
        return hash;
    };
    StaticPropertyNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return StaticPropertyNode;
}(ScopedAccessNode));
exports.StaticPropertyNode = StaticPropertyNode;
var StringElementAccessNode = /** @class */ (function (_super) {
    __extends(StringElementAccessNode, _super);
    function StringElementAccessNode(variable, openBracket, minus, index, closeBracket, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.variable = variable;
        _this.openBracket = openBracket;
        _this.minus = minus;
        _this.index = index;
        _this.closeBracket = closeBracket;
        _this.updateFlagsAndWidth(variable.flags, variable.fullWidth);
        _this.updateFlagsAndWidth(openBracket.flags, openBracket.fullWidth);
        if (minus !== null) {
            _this.updateFlagsAndWidth(minus.flags, minus.fullWidth);
        }
        _this.updateFlagsAndWidth(index.flags, index.fullWidth);
        _this.updateFlagsAndWidth(closeBracket.flags, closeBracket.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(StringElementAccessNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringElementAccessNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringElementAccessNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    StringElementAccessNode.prototype.accept = function (visitor) {
        visitor.visitStringElementAccess(this);
    };
    StringElementAccessNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStringElementAccess(this);
    };
    StringElementAccessNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.variable;
            case 1:
                return this.openBracket;
            case 2:
                return this.minus;
            case 3:
                return this.index;
            case 4:
                return this.closeBracket;
            default:
                return null;
        }
    };
    StringElementAccessNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.StringElementAccessSyntaxNode(this, parent, offset);
    };
    StringElementAccessNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = StringElementAccessNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    StringElementAccessNode.prototype.withDiagnostics = function (diagnostics) {
        return new StringElementAccessNode(this.variable, this.openBracket, this.minus, this.index, this.closeBracket, diagnostics);
    };
    StringElementAccessNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8827);
        hash = php_common_1.Hash.combine(this.variable.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openBracket.hashCode(), hash);
        hash = this.minus !== null ? php_common_1.Hash.combine(this.minus.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.index.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeBracket.hashCode(), hash);
        return hash;
    };
    StringElementAccessNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return StringElementAccessNode;
}(ExpressionNode));
exports.StringElementAccessNode = StringElementAccessNode;
var StringExpressionNode = /** @class */ (function (_super) {
    __extends(StringExpressionNode, _super);
    function StringExpressionNode(openBrace, expression, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.openBrace = openBrace;
        _this.expression = expression;
        _this.closeBrace = closeBrace;
        _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(StringExpressionNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringExpressionNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringExpressionNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    StringExpressionNode.prototype.accept = function (visitor) {
        visitor.visitStringExpression(this);
    };
    StringExpressionNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStringExpression(this);
    };
    StringExpressionNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.openBrace;
            case 1:
                return this.expression;
            case 2:
                return this.closeBrace;
            default:
                return null;
        }
    };
    StringExpressionNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.StringExpressionSyntaxNode(this, parent, offset);
    };
    StringExpressionNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = StringExpressionNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    StringExpressionNode.prototype.withDiagnostics = function (diagnostics) {
        return new StringExpressionNode(this.openBrace, this.expression, this.closeBrace, diagnostics);
    };
    StringExpressionNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8828);
        hash = php_common_1.Hash.combine(this.openBrace.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeBrace.hashCode(), hash);
        return hash;
    };
    StringExpressionNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return StringExpressionNode;
}(ExpressionNode));
exports.StringExpressionNode = StringExpressionNode;
var StringTemplateNode = /** @class */ (function (_super) {
    __extends(StringTemplateNode, _super);
    function StringTemplateNode(openQuote, template, closeQuote, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.openQuote = openQuote;
        _this.template = template;
        _this.closeQuote = closeQuote;
        _this.updateFlagsAndWidth(openQuote.flags, openQuote.fullWidth);
        _this.updateFlagsAndWidth(template.flags, template.fullWidth);
        _this.updateFlagsAndWidth(closeQuote.flags, closeQuote.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(StringTemplateNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringTemplateNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringTemplateNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    StringTemplateNode.prototype.accept = function (visitor) {
        visitor.visitStringTemplate(this);
    };
    StringTemplateNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStringTemplate(this);
    };
    StringTemplateNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.openQuote;
            case 1:
                return this.template;
            case 2:
                return this.closeQuote;
            default:
                return null;
        }
    };
    StringTemplateNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.StringTemplateSyntaxNode(this, parent, offset);
    };
    StringTemplateNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = StringTemplateNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    StringTemplateNode.prototype.withDiagnostics = function (diagnostics) {
        return new StringTemplateNode(this.openQuote, this.template, this.closeQuote, diagnostics);
    };
    StringTemplateNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8829);
        hash = php_common_1.Hash.combine(this.openQuote.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.template.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeQuote.hashCode(), hash);
        return hash;
    };
    StringTemplateNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return StringTemplateNode;
}(ExpressionNode));
exports.StringTemplateNode = StringTemplateNode;
var StringVariableNode = /** @class */ (function (_super) {
    __extends(StringVariableNode, _super);
    function StringVariableNode(identifier, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.identifier = identifier;
        _this.updateFlagsAndWidth(identifier.flags, identifier.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(StringVariableNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringVariableNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringVariableNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    StringVariableNode.prototype.accept = function (visitor) {
        visitor.visitStringVariable(this);
    };
    StringVariableNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStringVariable(this);
    };
    StringVariableNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.identifier;
            default:
                return null;
        }
    };
    StringVariableNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.StringVariableSyntaxNode(this, parent, offset);
    };
    StringVariableNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = StringVariableNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    StringVariableNode.prototype.withDiagnostics = function (diagnostics) {
        return new StringVariableNode(this.identifier, diagnostics);
    };
    StringVariableNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8830);
        hash = php_common_1.Hash.combine(this.identifier.hashCode(), hash);
        return hash;
    };
    StringVariableNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return StringVariableNode;
}(VariableNode));
exports.StringVariableNode = StringVariableNode;
var SwitchNode = /** @class */ (function (_super) {
    __extends(SwitchNode, _super);
    function SwitchNode(switchKeyword, openParen, expression, closeParen, openBrace, caseSemicolon, caseClauses, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.switchKeyword = switchKeyword;
        _this.openParen = openParen;
        _this.expression = expression;
        _this.closeParen = closeParen;
        _this.openBrace = openBrace;
        _this.caseSemicolon = caseSemicolon;
        _this.caseClauses = caseClauses;
        _this.closeBrace = closeBrace;
        _this.updateFlagsAndWidth(switchKeyword.flags, switchKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        if (caseSemicolon !== null) {
            _this.updateFlagsAndWidth(caseSemicolon.flags, caseSemicolon.fullWidth);
        }
        if (caseClauses !== null) {
            _this.updateFlagsAndWidth(caseClauses.flags, caseClauses.fullWidth);
        }
        _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(SwitchNode.prototype, "count", {
        get: function () {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    SwitchNode.prototype.accept = function (visitor) {
        visitor.visitSwitch(this);
    };
    SwitchNode.prototype.acceptResult = function (visitor) {
        return visitor.visitSwitch(this);
    };
    SwitchNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.switchKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.expression;
            case 3:
                return this.closeParen;
            case 4:
                return this.openBrace;
            case 5:
                return this.caseSemicolon;
            case 6:
                return this.caseClauses;
            case 7:
                return this.closeBrace;
            default:
                return null;
        }
    };
    SwitchNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.SwitchSyntaxNode(this, parent, offset);
    };
    SwitchNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = SwitchNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    SwitchNode.prototype.withDiagnostics = function (diagnostics) {
        return new SwitchNode(this.switchKeyword, this.openParen, this.expression, this.closeParen, this.openBrace, this.caseSemicolon, this.caseClauses, this.closeBrace, diagnostics);
    };
    SwitchNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8831);
        hash = php_common_1.Hash.combine(this.switchKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openBrace.hashCode(), hash);
        hash = this.caseSemicolon !== null ? php_common_1.Hash.combine(this.caseSemicolon.hashCode(), hash) : hash;
        hash = this.caseClauses !== null ? php_common_1.Hash.combine(this.caseClauses.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeBrace.hashCode(), hash);
        return hash;
    };
    SwitchNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return SwitchNode;
}(SelectionNode));
exports.SwitchNode = SwitchNode;
var SwitchBlockNode = /** @class */ (function (_super) {
    __extends(SwitchBlockNode, _super);
    function SwitchBlockNode(switchKeyword, openParen, expression, closeParen, colon, caseSemicolon, caseClauses, endSwitch, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.switchKeyword = switchKeyword;
        _this.openParen = openParen;
        _this.expression = expression;
        _this.closeParen = closeParen;
        _this.colon = colon;
        _this.caseSemicolon = caseSemicolon;
        _this.caseClauses = caseClauses;
        _this.endSwitch = endSwitch;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(switchKeyword.flags, switchKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        if (caseSemicolon !== null) {
            _this.updateFlagsAndWidth(caseSemicolon.flags, caseSemicolon.fullWidth);
        }
        if (caseClauses !== null) {
            _this.updateFlagsAndWidth(caseClauses.flags, caseClauses.fullWidth);
        }
        _this.updateFlagsAndWidth(endSwitch.flags, endSwitch.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(SwitchBlockNode.prototype, "count", {
        get: function () {
            return 9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchBlockNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchBlockNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    SwitchBlockNode.prototype.accept = function (visitor) {
        visitor.visitSwitchBlock(this);
    };
    SwitchBlockNode.prototype.acceptResult = function (visitor) {
        return visitor.visitSwitchBlock(this);
    };
    SwitchBlockNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.switchKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.expression;
            case 3:
                return this.closeParen;
            case 4:
                return this.colon;
            case 5:
                return this.caseSemicolon;
            case 6:
                return this.caseClauses;
            case 7:
                return this.endSwitch;
            case 8:
                return this.semicolon;
            default:
                return null;
        }
    };
    SwitchBlockNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.SwitchBlockSyntaxNode(this, parent, offset);
    };
    SwitchBlockNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = SwitchBlockNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    SwitchBlockNode.prototype.withDiagnostics = function (diagnostics) {
        return new SwitchBlockNode(this.switchKeyword, this.openParen, this.expression, this.closeParen, this.colon, this.caseSemicolon, this.caseClauses, this.endSwitch, this.semicolon, diagnostics);
    };
    SwitchBlockNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8832);
        hash = php_common_1.Hash.combine(this.switchKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.colon.hashCode(), hash);
        hash = this.caseSemicolon !== null ? php_common_1.Hash.combine(this.caseSemicolon.hashCode(), hash) : hash;
        hash = this.caseClauses !== null ? php_common_1.Hash.combine(this.caseClauses.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.endSwitch.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    SwitchBlockNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return SwitchBlockNode;
}(SelectionNode));
exports.SwitchBlockNode = SwitchBlockNode;
var ThrowNode = /** @class */ (function (_super) {
    __extends(ThrowNode, _super);
    function ThrowNode(throwKeyword, expression, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.throwKeyword = throwKeyword;
        _this.expression = expression;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(throwKeyword.flags, throwKeyword.fullWidth);
        _this.updateFlagsAndWidth(expression.flags, expression.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ThrowNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThrowNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThrowNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    ThrowNode.prototype.accept = function (visitor) {
        visitor.visitThrow(this);
    };
    ThrowNode.prototype.acceptResult = function (visitor) {
        return visitor.visitThrow(this);
    };
    ThrowNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.throwKeyword;
            case 1:
                return this.expression;
            case 2:
                return this.semicolon;
            default:
                return null;
        }
    };
    ThrowNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.ThrowSyntaxNode(this, parent, offset);
    };
    ThrowNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = ThrowNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    ThrowNode.prototype.withDiagnostics = function (diagnostics) {
        return new ThrowNode(this.throwKeyword, this.expression, this.semicolon, diagnostics);
    };
    ThrowNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8833);
        hash = php_common_1.Hash.combine(this.throwKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expression.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    ThrowNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ThrowNode;
}(StatementNode));
exports.ThrowNode = ThrowNode;
var TraitDeclarationNode = /** @class */ (function (_super) {
    __extends(TraitDeclarationNode, _super);
    function TraitDeclarationNode(traitKeyword, identifier, openBrace, members, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.traitKeyword = traitKeyword;
        _this.identifier = identifier;
        _this.openBrace = openBrace;
        _this.members = members;
        _this.closeBrace = closeBrace;
        _this.updateFlagsAndWidth(traitKeyword.flags, traitKeyword.fullWidth);
        _this.updateFlagsAndWidth(identifier.flags, identifier.fullWidth);
        _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        if (members !== null) {
            _this.updateFlagsAndWidth(members.flags, members.fullWidth);
        }
        _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(TraitDeclarationNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    TraitDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitTraitDeclaration(this);
    };
    TraitDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitDeclaration(this);
    };
    TraitDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.traitKeyword;
            case 1:
                return this.identifier;
            case 2:
                return this.openBrace;
            case 3:
                return this.members;
            case 4:
                return this.closeBrace;
            default:
                return null;
        }
    };
    TraitDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.TraitDeclarationSyntaxNode(this, parent, offset);
    };
    TraitDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = TraitDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    TraitDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new TraitDeclarationNode(this.traitKeyword, this.identifier, this.openBrace, this.members, this.closeBrace, diagnostics);
    };
    TraitDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8834);
        hash = php_common_1.Hash.combine(this.traitKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.identifier.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openBrace.hashCode(), hash);
        hash = this.members !== null ? php_common_1.Hash.combine(this.members.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeBrace.hashCode(), hash);
        return hash;
    };
    TraitDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return TraitDeclarationNode;
}(TypeDeclarationNode));
exports.TraitDeclarationNode = TraitDeclarationNode;
var TraitUseNode = /** @class */ (function (_super) {
    __extends(TraitUseNode, _super);
    function TraitUseNode(useKeyword, traitNames, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.useKeyword = useKeyword;
        _this.traitNames = traitNames;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(useKeyword.flags, useKeyword.fullWidth);
        _this.updateFlagsAndWidth(traitNames.flags, traitNames.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(TraitUseNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    TraitUseNode.prototype.accept = function (visitor) {
        visitor.visitTraitUse(this);
    };
    TraitUseNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitUse(this);
    };
    TraitUseNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.useKeyword;
            case 1:
                return this.traitNames;
            case 2:
                return this.semicolon;
            default:
                return null;
        }
    };
    TraitUseNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.TraitUseSyntaxNode(this, parent, offset);
    };
    TraitUseNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = TraitUseNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    TraitUseNode.prototype.withDiagnostics = function (diagnostics) {
        return new TraitUseNode(this.useKeyword, this.traitNames, this.semicolon, diagnostics);
    };
    TraitUseNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8835);
        hash = php_common_1.Hash.combine(this.useKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.traitNames.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    TraitUseNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return TraitUseNode;
}(StatementNode));
exports.TraitUseNode = TraitUseNode;
var TraitUseGroupNode = /** @class */ (function (_super) {
    __extends(TraitUseGroupNode, _super);
    function TraitUseGroupNode(useKeyword, traitNames, openBrace, adaptations, closeBrace, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.useKeyword = useKeyword;
        _this.traitNames = traitNames;
        _this.openBrace = openBrace;
        _this.adaptations = adaptations;
        _this.closeBrace = closeBrace;
        _this.updateFlagsAndWidth(useKeyword.flags, useKeyword.fullWidth);
        _this.updateFlagsAndWidth(traitNames.flags, traitNames.fullWidth);
        _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        if (adaptations !== null) {
            _this.updateFlagsAndWidth(adaptations.flags, adaptations.fullWidth);
        }
        _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(TraitUseGroupNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseGroupNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseGroupNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    TraitUseGroupNode.prototype.accept = function (visitor) {
        visitor.visitTraitUseGroup(this);
    };
    TraitUseGroupNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitUseGroup(this);
    };
    TraitUseGroupNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.useKeyword;
            case 1:
                return this.traitNames;
            case 2:
                return this.openBrace;
            case 3:
                return this.adaptations;
            case 4:
                return this.closeBrace;
            default:
                return null;
        }
    };
    TraitUseGroupNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.TraitUseGroupSyntaxNode(this, parent, offset);
    };
    TraitUseGroupNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = TraitUseGroupNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    TraitUseGroupNode.prototype.withDiagnostics = function (diagnostics) {
        return new TraitUseGroupNode(this.useKeyword, this.traitNames, this.openBrace, this.adaptations, this.closeBrace, diagnostics);
    };
    TraitUseGroupNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8836);
        hash = php_common_1.Hash.combine(this.useKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.traitNames.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openBrace.hashCode(), hash);
        hash = this.adaptations !== null ? php_common_1.Hash.combine(this.adaptations.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.closeBrace.hashCode(), hash);
        return hash;
    };
    TraitUseGroupNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return TraitUseGroupNode;
}(StatementNode));
exports.TraitUseGroupNode = TraitUseGroupNode;
var TryNode = /** @class */ (function (_super) {
    __extends(TryNode, _super);
    function TryNode(tryKeyword, statements, catchClauses, finallyClause, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.tryKeyword = tryKeyword;
        _this.statements = statements;
        _this.catchClauses = catchClauses;
        _this.finallyClause = finallyClause;
        _this.updateFlagsAndWidth(tryKeyword.flags, tryKeyword.fullWidth);
        _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        if (catchClauses !== null) {
            _this.updateFlagsAndWidth(catchClauses.flags, catchClauses.fullWidth);
        }
        if (finallyClause !== null) {
            _this.updateFlagsAndWidth(finallyClause.flags, finallyClause.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(TryNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    TryNode.prototype.accept = function (visitor) {
        visitor.visitTry(this);
    };
    TryNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTry(this);
    };
    TryNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.tryKeyword;
            case 1:
                return this.statements;
            case 2:
                return this.catchClauses;
            case 3:
                return this.finallyClause;
            default:
                return null;
        }
    };
    TryNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.TrySyntaxNode(this, parent, offset);
    };
    TryNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = TryNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    TryNode.prototype.withDiagnostics = function (diagnostics) {
        return new TryNode(this.tryKeyword, this.statements, this.catchClauses, this.finallyClause, diagnostics);
    };
    TryNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8837);
        hash = php_common_1.Hash.combine(this.tryKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.statements.hashCode(), hash);
        hash = this.catchClauses !== null ? php_common_1.Hash.combine(this.catchClauses.hashCode(), hash) : hash;
        hash = this.finallyClause !== null ? php_common_1.Hash.combine(this.finallyClause.hashCode(), hash) : hash;
        return hash;
    };
    TryNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return TryNode;
}(StatementNode));
exports.TryNode = TryNode;
var UnaryNode = /** @class */ (function (_super) {
    __extends(UnaryNode, _super);
    function UnaryNode(operator, operand, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.operator = operator;
        _this.operand = operand;
        _this.updateFlagsAndWidth(operator.flags, operator.fullWidth);
        _this.updateFlagsAndWidth(operand.flags, operand.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(UnaryNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnaryNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnaryNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    UnaryNode.prototype.accept = function (visitor) {
        visitor.visitUnaryExpression(this);
    };
    UnaryNode.prototype.acceptResult = function (visitor) {
        return visitor.visitUnaryExpression(this);
    };
    UnaryNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.operator;
            case 1:
                return this.operand;
            default:
                return null;
        }
    };
    UnaryNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.UnarySyntaxNode(this, parent, offset);
    };
    UnaryNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = UnaryNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    UnaryNode.prototype.withDiagnostics = function (diagnostics) {
        return new UnaryNode(this.operator, this.operand, diagnostics);
    };
    UnaryNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8838);
        hash = php_common_1.Hash.combine(this.operator.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.operand.hashCode(), hash);
        return hash;
    };
    UnaryNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return UnaryNode;
}(ExpressionNode));
exports.UnaryNode = UnaryNode;
var UnsetNode = /** @class */ (function (_super) {
    __extends(UnsetNode, _super);
    function UnsetNode(unsetKeyword, openParen, expressionList, closeParen, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.unsetKeyword = unsetKeyword;
        _this.openParen = openParen;
        _this.expressionList = expressionList;
        _this.closeParen = closeParen;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(unsetKeyword.flags, unsetKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(expressionList.flags, expressionList.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(UnsetNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnsetNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnsetNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    UnsetNode.prototype.accept = function (visitor) {
        visitor.visitUnset(this);
    };
    UnsetNode.prototype.acceptResult = function (visitor) {
        return visitor.visitUnset(this);
    };
    UnsetNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.unsetKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.expressionList;
            case 3:
                return this.closeParen;
            case 4:
                return this.semicolon;
            default:
                return null;
        }
    };
    UnsetNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.UnsetSyntaxNode(this, parent, offset);
    };
    UnsetNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = UnsetNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    UnsetNode.prototype.withDiagnostics = function (diagnostics) {
        return new UnsetNode(this.unsetKeyword, this.openParen, this.expressionList, this.closeParen, this.semicolon, diagnostics);
    };
    UnsetNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8839);
        hash = php_common_1.Hash.combine(this.unsetKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.expressionList.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    UnsetNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return UnsetNode;
}(StatementNode));
exports.UnsetNode = UnsetNode;
var UseDeclarationNode = /** @class */ (function (_super) {
    __extends(UseDeclarationNode, _super);
    function UseDeclarationNode(useKeyword, useType, declarations, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.useKeyword = useKeyword;
        _this.useType = useType;
        _this.declarations = declarations;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(useKeyword.flags, useKeyword.fullWidth);
        if (useType !== null) {
            _this.updateFlagsAndWidth(useType.flags, useType.fullWidth);
        }
        _this.updateFlagsAndWidth(declarations.flags, declarations.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(UseDeclarationNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    UseDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitUseDeclaration(this);
    };
    UseDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitUseDeclaration(this);
    };
    UseDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.useKeyword;
            case 1:
                return this.useType;
            case 2:
                return this.declarations;
            case 3:
                return this.semicolon;
            default:
                return null;
        }
    };
    UseDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.UseDeclarationSyntaxNode(this, parent, offset);
    };
    UseDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = UseDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    UseDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new UseDeclarationNode(this.useKeyword, this.useType, this.declarations, this.semicolon, diagnostics);
    };
    UseDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8840);
        hash = php_common_1.Hash.combine(this.useKeyword.hashCode(), hash);
        hash = this.useType !== null ? php_common_1.Hash.combine(this.useType.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.declarations.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    UseDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return UseDeclarationNode;
}(StatementNode));
exports.UseDeclarationNode = UseDeclarationNode;
var UseGroupDeclarationNode = /** @class */ (function (_super) {
    __extends(UseGroupDeclarationNode, _super);
    function UseGroupDeclarationNode(useKeyword, useType, rootName, openBrace, declarations, closeBrace, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.useKeyword = useKeyword;
        _this.useType = useType;
        _this.rootName = rootName;
        _this.openBrace = openBrace;
        _this.declarations = declarations;
        _this.closeBrace = closeBrace;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(useKeyword.flags, useKeyword.fullWidth);
        if (useType !== null) {
            _this.updateFlagsAndWidth(useType.flags, useType.fullWidth);
        }
        _this.updateFlagsAndWidth(rootName.flags, rootName.fullWidth);
        _this.updateFlagsAndWidth(openBrace.flags, openBrace.fullWidth);
        _this.updateFlagsAndWidth(declarations.flags, declarations.fullWidth);
        _this.updateFlagsAndWidth(closeBrace.flags, closeBrace.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(UseGroupDeclarationNode.prototype, "count", {
        get: function () {
            return 7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseGroupDeclarationNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseGroupDeclarationNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    UseGroupDeclarationNode.prototype.accept = function (visitor) {
        visitor.visitUseGroupDeclaration(this);
    };
    UseGroupDeclarationNode.prototype.acceptResult = function (visitor) {
        return visitor.visitUseGroupDeclaration(this);
    };
    UseGroupDeclarationNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.useKeyword;
            case 1:
                return this.useType;
            case 2:
                return this.rootName;
            case 3:
                return this.openBrace;
            case 4:
                return this.declarations;
            case 5:
                return this.closeBrace;
            case 6:
                return this.semicolon;
            default:
                return null;
        }
    };
    UseGroupDeclarationNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.UseGroupDeclarationSyntaxNode(this, parent, offset);
    };
    UseGroupDeclarationNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = UseGroupDeclarationNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    UseGroupDeclarationNode.prototype.withDiagnostics = function (diagnostics) {
        return new UseGroupDeclarationNode(this.useKeyword, this.useType, this.rootName, this.openBrace, this.declarations, this.closeBrace, this.semicolon, diagnostics);
    };
    UseGroupDeclarationNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8841);
        hash = php_common_1.Hash.combine(this.useKeyword.hashCode(), hash);
        hash = this.useType !== null ? php_common_1.Hash.combine(this.useType.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.rootName.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openBrace.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.declarations.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeBrace.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    UseGroupDeclarationNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return UseGroupDeclarationNode;
}(StatementNode));
exports.UseGroupDeclarationNode = UseGroupDeclarationNode;
var WhileNode = /** @class */ (function (_super) {
    __extends(WhileNode, _super);
    function WhileNode(whileKeyword, openParen, condition, closeParen, statement, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.whileKeyword = whileKeyword;
        _this.openParen = openParen;
        _this.condition = condition;
        _this.closeParen = closeParen;
        _this.statement = statement;
        _this.updateFlagsAndWidth(whileKeyword.flags, whileKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(condition.flags, condition.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(statement.flags, statement.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(WhileNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    WhileNode.prototype.accept = function (visitor) {
        visitor.visitWhile(this);
    };
    WhileNode.prototype.acceptResult = function (visitor) {
        return visitor.visitWhile(this);
    };
    WhileNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.whileKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.condition;
            case 3:
                return this.closeParen;
            case 4:
                return this.statement;
            default:
                return null;
        }
    };
    WhileNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.WhileSyntaxNode(this, parent, offset);
    };
    WhileNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = WhileNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    WhileNode.prototype.withDiagnostics = function (diagnostics) {
        return new WhileNode(this.whileKeyword, this.openParen, this.condition, this.closeParen, this.statement, diagnostics);
    };
    WhileNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8842);
        hash = php_common_1.Hash.combine(this.whileKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.condition.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.statement.hashCode(), hash);
        return hash;
    };
    WhileNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return WhileNode;
}(IterationNode));
exports.WhileNode = WhileNode;
var WhileBlockNode = /** @class */ (function (_super) {
    __extends(WhileBlockNode, _super);
    function WhileBlockNode(whileKeyword, openParen, condition, closeParen, colon, statements, endWhileKeyword, semicolon, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.whileKeyword = whileKeyword;
        _this.openParen = openParen;
        _this.condition = condition;
        _this.closeParen = closeParen;
        _this.colon = colon;
        _this.statements = statements;
        _this.endWhileKeyword = endWhileKeyword;
        _this.semicolon = semicolon;
        _this.updateFlagsAndWidth(whileKeyword.flags, whileKeyword.fullWidth);
        _this.updateFlagsAndWidth(openParen.flags, openParen.fullWidth);
        _this.updateFlagsAndWidth(condition.flags, condition.fullWidth);
        _this.updateFlagsAndWidth(closeParen.flags, closeParen.fullWidth);
        _this.updateFlagsAndWidth(colon.flags, colon.fullWidth);
        if (statements !== null) {
            _this.updateFlagsAndWidth(statements.flags, statements.fullWidth);
        }
        _this.updateFlagsAndWidth(endWhileKeyword.flags, endWhileKeyword.fullWidth);
        _this.updateFlagsAndWidth(semicolon.flags, semicolon.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(WhileBlockNode.prototype, "count", {
        get: function () {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileBlockNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileBlockNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    WhileBlockNode.prototype.accept = function (visitor) {
        visitor.visitWhileBlock(this);
    };
    WhileBlockNode.prototype.acceptResult = function (visitor) {
        return visitor.visitWhileBlock(this);
    };
    WhileBlockNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.whileKeyword;
            case 1:
                return this.openParen;
            case 2:
                return this.condition;
            case 3:
                return this.closeParen;
            case 4:
                return this.colon;
            case 5:
                return this.statements;
            case 6:
                return this.endWhileKeyword;
            case 7:
                return this.semicolon;
            default:
                return null;
        }
    };
    WhileBlockNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.WhileBlockSyntaxNode(this, parent, offset);
    };
    WhileBlockNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = WhileBlockNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    WhileBlockNode.prototype.withDiagnostics = function (diagnostics) {
        return new WhileBlockNode(this.whileKeyword, this.openParen, this.condition, this.closeParen, this.colon, this.statements, this.endWhileKeyword, this.semicolon, diagnostics);
    };
    WhileBlockNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8843);
        hash = php_common_1.Hash.combine(this.whileKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.openParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.condition.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.closeParen.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.colon.hashCode(), hash);
        hash = this.statements !== null ? php_common_1.Hash.combine(this.statements.hashCode(), hash) : hash;
        hash = php_common_1.Hash.combine(this.endWhileKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.semicolon.hashCode(), hash);
        return hash;
    };
    WhileBlockNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return WhileBlockNode;
}(IterationNode));
exports.WhileBlockNode = WhileBlockNode;
var YieldNode = /** @class */ (function (_super) {
    __extends(YieldNode, _super);
    function YieldNode(yieldKeyword, key, doubleArrow, value, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.yieldKeyword = yieldKeyword;
        _this.key = key;
        _this.doubleArrow = doubleArrow;
        _this.value = value;
        _this.updateFlagsAndWidth(yieldKeyword.flags, yieldKeyword.fullWidth);
        if (key !== null) {
            _this.updateFlagsAndWidth(key.flags, key.fullWidth);
        }
        if (doubleArrow !== null) {
            _this.updateFlagsAndWidth(doubleArrow.flags, doubleArrow.fullWidth);
        }
        if (value !== null) {
            _this.updateFlagsAndWidth(value.flags, value.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(YieldNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(YieldNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(YieldNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    YieldNode.prototype.accept = function (visitor) {
        visitor.visitYield(this);
    };
    YieldNode.prototype.acceptResult = function (visitor) {
        return visitor.visitYield(this);
    };
    YieldNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.yieldKeyword;
            case 1:
                return this.key;
            case 2:
                return this.doubleArrow;
            case 3:
                return this.value;
            default:
                return null;
        }
    };
    YieldNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.YieldSyntaxNode(this, parent, offset);
    };
    YieldNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = YieldNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    YieldNode.prototype.withDiagnostics = function (diagnostics) {
        return new YieldNode(this.yieldKeyword, this.key, this.doubleArrow, this.value, diagnostics);
    };
    YieldNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8844);
        hash = php_common_1.Hash.combine(this.yieldKeyword.hashCode(), hash);
        hash = this.key !== null ? php_common_1.Hash.combine(this.key.hashCode(), hash) : hash;
        hash = this.doubleArrow !== null ? php_common_1.Hash.combine(this.doubleArrow.hashCode(), hash) : hash;
        hash = this.value !== null ? php_common_1.Hash.combine(this.value.hashCode(), hash) : hash;
        return hash;
    };
    YieldNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return YieldNode;
}(ExpressionNode));
exports.YieldNode = YieldNode;
var YieldFromNode = /** @class */ (function (_super) {
    __extends(YieldFromNode, _super);
    function YieldFromNode(yieldFromKeyword, delegate, diagnostics) {
        var _this = _super.call(this, diagnostics || Node_1.Node.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.yieldFromKeyword = yieldFromKeyword;
        _this.delegate = delegate;
        _this.updateFlagsAndWidth(yieldFromKeyword.flags, yieldFromKeyword.fullWidth);
        _this.updateFlagsAndWidth(delegate.flags, delegate.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(YieldFromNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(YieldFromNode.prototype, "flags", {
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(YieldFromNode.prototype, "fullWidth", {
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    YieldFromNode.prototype.accept = function (visitor) {
        visitor.visitYieldFrom(this);
    };
    YieldFromNode.prototype.acceptResult = function (visitor) {
        return visitor.visitYieldFrom(this);
    };
    YieldFromNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.yieldFromKeyword;
            case 1:
                return this.delegate;
            default:
                return null;
        }
    };
    YieldFromNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxNode_Generated_1.YieldFromSyntaxNode(this, parent, offset);
    };
    YieldFromNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = YieldFromNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    YieldFromNode.prototype.withDiagnostics = function (diagnostics) {
        return new YieldFromNode(this.yieldFromKeyword, this.delegate, diagnostics);
    };
    YieldFromNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ 8845);
        hash = php_common_1.Hash.combine(this.yieldFromKeyword.hashCode(), hash);
        hash = php_common_1.Hash.combine(this.delegate.hashCode(), hash);
        return hash;
    };
    YieldFromNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return YieldFromNode;
}(ExpressionNode));
exports.YieldFromNode = YieldFromNode;
