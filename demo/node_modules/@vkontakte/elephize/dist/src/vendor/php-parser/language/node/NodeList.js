/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LongChildListNode = exports.ShortChildListNode = exports.TwoChildListNode = exports.SingleChildListNode = exports.NodeList = void 0;
var php_common_1 = require("../../../php-common");
var SyntaxList_1 = require("../syntax/SyntaxList");
var NodeBase_1 = require("./NodeBase");
/**
 * Provides a base class for nodes that contain a list of child nodes.
 */
var NodeList = /** @class */ (function (_super) {
    __extends(NodeList, _super);
    /**
     * Constructs a `NodeList` object.
     *
     * NOTE: This constructor prevents TypeScript from emitting one with an
     *   unnecessary (and slow) rest parameter.
     */
    function NodeList(diagnostics) {
        return _super.call(this, diagnostics) || this;
    }
    Object.defineProperty(NodeList.prototype, "isList", {
        /**
         * @inheritDoc
         */
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    NodeList.prototype.equals = function (value) {
        if (this === value) {
            return true;
        }
        var count = this.count;
        if (this._flags === value.flags && this._fullWidth === value.fullWidth && count === value.count) {
            for (var i = 0; i < count; i++) {
                var child1 = this.childAt(i);
                var child2 = value.childAt(i);
                if ((child1 !== null) !== (child2 !== null)) {
                    return false;
                }
                if (child1 !== null && child2 !== null && !child1.equals(child2)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    return NodeList;
}(NodeBase_1.NodeBase));
exports.NodeList = NodeList;
/**
 * A node that only contains a single child.
 *
 * @internal
 */
var SingleChildListNode = /** @class */ (function (_super) {
    __extends(SingleChildListNode, _super);
    /**
     * Constructs a `SingleChildListNode` object.
     */
    function SingleChildListNode(child, diagnostics) {
        var _this = _super.call(this, diagnostics || NodeList.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.child = child;
        _this.updateFlagsAndWidth(child.flags, child.fullWidth);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(SingleChildListNode.prototype, "count", {
        /**
         * @inheritDoc
         */
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SingleChildListNode.prototype, "flags", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SingleChildListNode.prototype, "fullWidth", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    SingleChildListNode.prototype.childAt = function (index) {
        return index === 0 ? this.child : null;
    };
    /**
     * @inheritDoc
     */
    SingleChildListNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxList_1.SingleChildSyntaxList(this, parent, offset);
    };
    /**
     * @inheritDoc
     */
    SingleChildListNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = SingleChildListNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    /**
     * @inheritDoc
     */
    SingleChildListNode.prototype.withDiagnostics = function (diagnostics) {
        return new SingleChildListNode(this.child, diagnostics);
    };
    /**
     * Isolates the `hashCode()` call of a child for V8 optimization.
     */
    SingleChildListNode.prototype.getChildHashCode = function () {
        return this.child.hashCode();
    };
    /**
     * @inheritDoc
     */
    SingleChildListNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ (3 + 8192));
        hash = php_common_1.Hash.combine(this.getChildHashCode(), hash);
        return hash;
    };
    /**
     * @inheritDoc
     */
    SingleChildListNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return SingleChildListNode;
}(NodeList));
exports.SingleChildListNode = SingleChildListNode;
/**
 * A node that contains two children.
 *
 * @internal
 */
var TwoChildListNode = /** @class */ (function (_super) {
    __extends(TwoChildListNode, _super);
    /**
     * Constructs a `TwoChildListNode` object.
     */
    function TwoChildListNode(firstChild, secondChild, diagnostics) {
        var _this = _super.call(this, diagnostics || NodeList.EmptyDiagnosticList) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.firstChild = firstChild;
        _this.secondChild = secondChild;
        _this.updateFlagsAndWidth(firstChild.flags, firstChild.fullWidth);
        if (secondChild !== null) {
            _this.updateFlagsAndWidth(secondChild.flags, secondChild.fullWidth);
        }
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(TwoChildListNode.prototype, "count", {
        /**
         * @inheritDoc
         */
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TwoChildListNode.prototype, "flags", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TwoChildListNode.prototype, "fullWidth", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    TwoChildListNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this.firstChild;
            case 1:
                return this.secondChild;
            default:
                return null;
        }
    };
    /**
     * @inheritDoc
     */
    TwoChildListNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxList_1.TwoChildSyntaxList(this, parent, offset);
    };
    /**
     * @inheritDoc
     */
    TwoChildListNode.prototype.hashCode = function () {
        if (this.hash === 0) {
            this.hash = TwoChildListNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    /**
     * @inheritDoc
     */
    TwoChildListNode.prototype.withDiagnostics = function (diagnostics) {
        return new TwoChildListNode(this.firstChild, this.secondChild, diagnostics);
    };
    /**
     * @inheritDoc
     */
    TwoChildListNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ (3 + 8192));
        hash = php_common_1.Hash.combine(this.getFirstChildHashCode(), hash);
        hash = php_common_1.Hash.combine(this.getSecondChildHashCode(), hash);
        return hash;
    };
    /**
     * Isolates the `hashCode()` call of the first child for V8 optimization.
     */
    TwoChildListNode.prototype.getFirstChildHashCode = function () {
        return this.firstChild.hashCode();
    };
    /**
     * Isolates the `hashCode()` call of the second child for V8 optimization.
     */
    TwoChildListNode.prototype.getSecondChildHashCode = function () {
        return this.secondChild !== null ? this.secondChild.hashCode() : 0;
    };
    /**
     * @inheritDoc
     */
    TwoChildListNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return TwoChildListNode;
}(NodeList));
exports.TwoChildListNode = TwoChildListNode;
/**
 * Provides a base class for nodes that contains an arbitrary number of
 * children.
 *
 * @internal
 */
var ManyChildListNode = /** @class */ (function (_super) {
    __extends(ManyChildListNode, _super);
    /**
     * Constructs a `ManyChildListNode` object.
     */
    function ManyChildListNode(diagnostics) {
        return _super.call(this, diagnostics || NodeList.EmptyDiagnosticList) || this;
    }
    Object.defineProperty(ManyChildListNode.prototype, "count", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.children.length;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    ManyChildListNode.prototype.createSyntaxNode = function (parent, offset) {
        return new SyntaxList_1.ManyChildSyntaxList(this, parent, offset);
    };
    /**
     * @inheritDoc
     */
    ManyChildListNode.prototype.childAt = function (index) {
        if (index >= 0 && index < this.children.length) {
            return this.children[index];
        }
        return null;
    };
    /**
     * @inheritDoc
     */
    ManyChildListNode.prototype.equals = function (value) {
        if (this === value) {
            return true;
        }
        var count = this.children.length;
        if (this._flags === value.flags && this._fullWidth === value.fullWidth && count === value.count) {
            for (var i = 0; i < count; i++) {
                if (!this.equalsChildInList(value, i)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    /**
     * @inheritDoc
     */
    ManyChildListNode.prototype.hashCode = function () {
        // IMPORTANT: This is a performance critical method.
        if (this.hash === 0) {
            this.hash = ManyChildListNode.prototype.computeHashCode.call(this);
        }
        return this.hash;
    };
    /**
     * @inheritDoc
     */
    ManyChildListNode.prototype.computeHashCode = function () {
        var hash = php_common_1.Hash.combine(this._fullWidth, this._flags ^ (3 + 8192));
        var length = this.count;
        for (var i = 0; i < length; i++) {
            var child = this.childAt(i);
            if (child !== null) {
                hash = php_common_1.Hash.combine(this.getChildHashCode(child), hash);
            }
        }
        return hash;
    };
    /**
     * Compares the children of two lists at a given index.
     *
     * @todo Determine V8 optimization and possibly merge back into `equals()`.
     */
    ManyChildListNode.prototype.equalsChildInList = function (list, index) {
        var firstChild = this.childAt(index);
        var secondChild = list.childAt(index);
        if ((firstChild !== null) !== (secondChild !== null)) {
            return false;
        }
        if (firstChild !== null && secondChild !== null && !firstChild.equals(secondChild)) {
            return false;
        }
        return true;
    };
    /**
     * Isolates the `hashCode()` call of a child for V8 optimization.
     */
    ManyChildListNode.prototype.getChildHashCode = function (child) {
        return child.hashCode();
    };
    return ManyChildListNode;
}(NodeList));
/**
 * A node with an arbitrarily long list of children.
 *
 * If this list is very long, use `LongChildListNode` instead to increase
 * performance of node lookups.
 *
 * @internal
 */
var ShortChildListNode = /** @class */ (function (_super) {
    __extends(ShortChildListNode, _super);
    /**
     * Constructs a `ShortChildListNode` object.
     */
    function ShortChildListNode(children, diagnostics) {
        var _this = _super.call(this, diagnostics) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.children = children;
        _this.updateFromChildren(children);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(ShortChildListNode.prototype, "flags", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShortChildListNode.prototype, "fullWidth", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    ShortChildListNode.prototype.withDiagnostics = function (diagnostics) {
        return new ShortChildListNode(this.children, diagnostics);
    };
    /**
     * @inheritDoc
     */
    ShortChildListNode.prototype.updateFromChildren = function (children) {
        for (var i = 0; i < children.length; i++) {
            var child = children[i];
            if (child !== null) {
                this.updateFlagsAndWidth(child.flags, child.fullWidth);
            }
        }
    };
    /**
     * @inheritDoc
     */
    ShortChildListNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return ShortChildListNode;
}(ManyChildListNode));
exports.ShortChildListNode = ShortChildListNode;
/**
 * A node that contains an arbitrary number of children and stores pre-computed
 * offsets for each child.
 *
 * NOTE: Long lists are never cached, so for the time being, `IHashable<T>`
 * methods may remain on the parent class.
 *
 * @internal
 */
var LongChildListNode = /** @class */ (function (_super) {
    __extends(LongChildListNode, _super);
    /**
     * Constructs a `LongChildListNode` object.
     */
    function LongChildListNode(children, diagnostics) {
        var _this = _super.call(this, diagnostics) || this;
        _this._flags = 0 /* None */;
        _this._fullWidth = 0;
        _this.hash = 0;
        _this.children = children;
        _this.offsets = new Array(children.length);
        _this.updateFromChildren(children);
        if (diagnostics !== void 0 && diagnostics.length > 0) {
            _this._flags = _this._flags | 1 /* ContainsDiagnostics */;
        }
        return _this;
    }
    Object.defineProperty(LongChildListNode.prototype, "flags", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._flags;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LongChildListNode.prototype, "fullWidth", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    LongChildListNode.prototype.indexAtOffset = function (relativeOffset) {
        if (relativeOffset < 0 || relativeOffset >= this._fullWidth) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        var low = 0;
        var high = this.offsets.length - 1;
        while (low <= high) {
            var middle = low + ((high - low) >> 1);
            if (this.offsets[middle] > relativeOffset) {
                high = middle - 1;
            }
            else {
                low = middle + 1;
            }
        }
        return low - 1;
    };
    /**
     * @inheritDoc
     */
    LongChildListNode.prototype.offsetAt = function (index) {
        if (index < 0 || index >= this.children.length) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        return this.offsets[index];
    };
    /**
     * @inheritDoc
     */
    LongChildListNode.prototype.withDiagnostics = function (diagnostics) {
        return new LongChildListNode(this.children, diagnostics);
    };
    /**
     * @inheritDoc
     */
    LongChildListNode.prototype.updateFromChildren = function (children) {
        var offset = 0;
        for (var i = 0; i < children.length; i++) {
            var child = children[i];
            if (child !== null) {
                this.updateFlagsAndWidth(child.flags, child.fullWidth);
            }
            this.offsets[i] = offset;
            offset += child ? child.fullWidth : 0;
        }
    };
    /**
     * @inheritDoc
     */
    LongChildListNode.prototype.updateFlagsAndWidth = function (flags, fullWidth) {
        this._flags = this._flags | (flags & 15 /* InheritMask */);
        this._fullWidth = this._fullWidth + fullWidth;
    };
    return LongChildListNode;
}(ManyChildListNode));
exports.LongChildListNode = LongChildListNode;
