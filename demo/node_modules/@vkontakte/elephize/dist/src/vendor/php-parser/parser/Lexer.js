/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LexerBase = void 0;
var php_common_1 = require("../../php-common");
var SourceTextFactory_1 = require("../text/SourceTextFactory");
var SyntaxDiagnostic_1 = require("../diagnostics/SyntaxDiagnostic");
/**
 * Provides a base class for language tokenizers.
 */
var LexerBase = /** @class */ (function () {
    /**
     * Constructs a `LexerBase` object.
     *
     * @param {ISourceText=} text
     *   The source text to tokenize.
     * @param {TState} defaultState
     *   The default scanning mode when starting to scan text.
     */
    function LexerBase(text, defaultState) {
        /**
         * A list of diagnostics found while attempting to scan for a token.
         */
        this.diagnostics = [];
        /**
         * The location within the text to stop scanning.
         */
        this.end = 0;
        /**
         * The current location of the scanner.
         */
        this.offset = 0;
        /**
         * The location within the text to start scanning.
         */
        this.start = 0;
        /**
         * The text to scan.
         */
        this.text = SourceTextFactory_1.SourceTextFactory.EmptyText;
        this.setText(text);
        this.state = defaultState;
    }
    /**
     * @inheritDoc
     */
    LexerBase.prototype.setPosition = function (offset) {
        if (offset < this.start || offset > this.end) {
            throw new php_common_1.ArgumentOutOfRangeException('Offset must be within scanning bounds');
        }
        this.offset = offset;
    };
    /**
     * Adds a new diagnostic to the list of diagnostics found during a scan.
     */
    LexerBase.prototype.addError = function (relativeOffset, width, code) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        this.diagnostics.push(this.createDiagnostic.apply(this, __spreadArray([relativeOffset, width, code], __read(args))));
    };
    /**
     * Creates a diagnostic for a token.
     */
    LexerBase.prototype.createDiagnostic = function (relativeOffset, width, code) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        return new (SyntaxDiagnostic_1.SyntaxDiagnostic.bind.apply(SyntaxDiagnostic_1.SyntaxDiagnostic, __spreadArray([void 0, relativeOffset, width, code], __read(args))))();
    };
    /**
     * Reads the character code at the given location, but does not consume it.
     *
     * @param {number} offset
     *   An offset into the scannable text.
     *
     * @return {number}
     *   The character code at the specified offset, or -1 if the offset was
     *   outside the allowed scan range.
     */
    LexerBase.prototype.peek = function (offset) {
        if (offset >= this.end) {
            return -1;
        }
        return this.text.charCodeAt(offset);
    };
    /**
     * Sets the starting and ending locations of the text to tokenize.
     *
     * @param {number} start
     *   The offset within the text to start tokenizing.
     * @param {number} end
     *   The offset within the text to stop tokenizing.
     */
    LexerBase.prototype.setBounds = function (start, end) {
        if (start < 0 || start > this.text.length) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        if (end < start || end > this.text.length) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        this.start = start;
        this.end = end;
    };
    /**
     * Determines if text at the given position starts with the specified string.
     *
     * @param {string} value
     *   The text to search for.
     * @param {boolean=} caseInsensitive
     *   If a match should be case-insensitive. Defaults to `true`.
     *
     * @return {boolean}
     *   If the scannable text starts with the given string `true`, otherwise
     *   `false`.
     */
    LexerBase.prototype.startsWith = function (value, caseInsensitive) {
        if (caseInsensitive === void 0) { caseInsensitive = true; }
        // if (value.length == 0) {
        //   return true;
        // }
        if (this.offset + value.length > this.end) {
            return false;
        }
        var text = this.text.substring(this.offset, value.length);
        if (caseInsensitive) {
            return text.toLowerCase().startsWith(value);
        }
        return text.startsWith(value);
    };
    return LexerBase;
}());
exports.LexerBase = LexerBase;
