/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ----------------------------------------------------------------------------
// THIS IS A GENERATED FILE. DO NOT MODIFY.
// ----------------------------------------------------------------------------
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxTransform = void 0;
var SyntaxTransform = /** @class */ (function () {
    function SyntaxTransform(defaultValue) {
        this.defaultValue = defaultValue;
    }
    SyntaxTransform.prototype.defaultVisit = function (node) {
        return this.defaultValue;
    };
    SyntaxTransform.prototype.visit = function (node) {
        return node.acceptResult(this);
    };
    SyntaxTransform.prototype.visitToken = function (token) {
        return this.defaultValue;
    };
    SyntaxTransform.prototype.visitTrivia = function (trivia) {
        return this.defaultValue;
    };
    SyntaxTransform.prototype.visitSourceText = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitAnonymousClass = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitAnonymousFunction = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitAnonymousObjectCreation = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitArgument = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitArray = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitArrayElement = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitArrowFunction = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitAssignmentExpression = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitBinaryExpression = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitBreak = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitClassConstant = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitClassConstantDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitClassConstantElement = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitClassDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitClone = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitClosureUse = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitConditionalExpression = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitConstant = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitConstantDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitConstantElement = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitContinue = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitDeclare = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitDeclareBlock = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitDestructuringAssignment = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitDoWhile = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitEcho = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitElementAccess = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitElse = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitElseBlock = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitElseIf = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitElseIfBlock = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitEmptyIntrinsic = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitErrorControl = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitEvalIntrinsic = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitExitIntrinsic = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitExpressionGroup = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitExpressionStatement = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitFlexibleHeredocElement = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitFlexibleHeredocTemplate = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitFor = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitForBlock = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitForEach = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitForEachBlock = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitFullyQualifiedName = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitFunctionDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitFunctionInvocation = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitGlobalDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitGoTo = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitHaltCompiler = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitHeredocTemplate = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitIf = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitIfBlock = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitIncompleteMember = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitIncompleteNamedTraitAdapatation = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitIncompleteReferencedTraitAdaptation = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitMemberAccess = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitMethodInvocation = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitObjectCreation = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitScopedInvocation = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitIndirectStringVariable = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitIndirectVariable = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitInstanceOf = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitInterfaceDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitIsSetIntrinsic = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitLabel = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitLexicalVariable = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitListDestructure = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitListDestructureElement = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitLiteral = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitLocalVariable = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitMethodDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitMethodReference = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitTraitAlias = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitType = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitNamespaceDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitNamespaceGroupDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitParameter = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitPartiallyQualifiedName = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitPostfixUnaryExpression = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitPrintIntrinsic = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitPropertyDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitPropertyElement = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitRelativeName = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitReturn = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitScriptInclusion = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitShellCommandTemplate = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitStatementBlock = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitStaticDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitStaticElement = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitStaticProperty = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitStringElementAccess = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitStringExpression = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitStringTemplate = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitStringVariable = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitSwitch = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitSwitchBlock = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitSwitchCase = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitThrow = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitTraitDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitTraitPrecedence = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitTraitUse = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitTraitUseGroup = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitTry = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitTryCatch = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitTryFinally = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitUnaryExpression = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitUnset = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitUseDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitUseElement = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitUseGroupDeclaration = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitWhile = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitWhileBlock = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitYield = function (node) {
        return this.defaultVisit(node);
    };
    SyntaxTransform.prototype.visitYieldFrom = function (node) {
        return this.defaultVisit(node);
    };
    return SyntaxTransform;
}());
exports.SyntaxTransform = SyntaxTransform;
