/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextSpan = void 0;
var php_common_1 = require("../../php-common");
/**
 * Represents a region of text.
 *
 * Text span comparison methods:
 *
 * |            | contains | overlaps | intersects |
 * |------------|:--------:|:--------:|:----------:|
 * | `-aaa----` | no       | no       | yes        |
 * | `----bbb-` |          |          |            |
 * | `-aaa----` | no       | yes      | yes        |
 * | `---bbb--` |          |          |            |
 * | `--aaaa--` | yes      | yes      | yes        |
 * | `--bbbb--` |          |          |            |
 */
var TextSpan = /** @class */ (function () {
    /**
     * Constructs a `TextSpan` object.
     *
     * @param {number} start
     *   The starting location of the span.
     * @param {number} length
     *   The number of characters in the span.
     */
    function TextSpan(start, length) {
        if (start < 0) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        if (start + length < start) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        this.start = start;
        this.length = length;
    }
    /**
     * Creates a `TextSpan` using starting and ending locations.
     *
     * @param {number} start
     *   The starting location of the span.
     * @param {number} end
     *   The ending location of the span.
     */
    TextSpan.fromBounds = function (start, end) {
        if (start < 0) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        if (end < start) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        return new TextSpan(start, end - start);
    };
    Object.defineProperty(TextSpan.prototype, "end", {
        /**
         * Gets the ending location of the span.
         */
        get: function () {
            return this.start + this.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextSpan.prototype, "isEmpty", {
        /**
         * Determines if the number of characters in the span is zero.
         */
        get: function () {
            return this.length === 0;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    TextSpan.prototype.compareTo = function (span) {
        var diff = this.start - span.start;
        return diff === 0 ? this.length - span.length : diff;
    };
    /**
     * Determines if the given span is completely within this span, or if an
     * offset is within the bounds of this span (`start` inclusive).
     */
    TextSpan.prototype.contains = function (position) {
        if (typeof position === 'number') {
            return position >= this.start ? (position - this.start) < this.length : false;
        }
        return position.start >= this.start && position.end <= this.end;
    };
    /**
     * @inheritDoc
     */
    TextSpan.prototype.equals = function (span) {
        return this.start === span.start && this.length === span.length;
    };
    /**
     * Finds the intersecting region of this span and a given span.
     *
     * Text spans intersect if both share a common region, or if the end of one
     * span is the same as the start of the other.
     *
     * @return {TextSpan|null}
     *   The intersecting region of the spans, or `null` if the spans did not
     *   intersect.
     */
    TextSpan.prototype.intersection = function (span) {
        var intersectStart = Math.max(this.start, span.start);
        var intersectEnd = Math.min(this.end, span.end);
        return intersectStart <= intersectEnd
            ? TextSpan.fromBounds(intersectStart, intersectEnd)
            : null;
    };
    /**
     * Determines if a given span intersects with this span, or if an offset is
     * within the bounds of this span (`start` and `end` inclusive).
     */
    TextSpan.prototype.intersectsWith = function (position) {
        if (typeof position === 'number') {
            return (position - this.start) <= this.length;
        }
        return position.start <= this.end && position.end >= this.start;
    };
    /**
     * Finds the overlapping region of this span and a given span.
     *
     * @return {TextSpan|null}
     *   The overlapping region of the spans, or `null` if the spans did not
     *   overlap.
     */
    TextSpan.prototype.overlap = function (span) {
        var overlapStart = Math.max(this.start, span.start);
        var overlapEnd = Math.min(this.end, span.end);
        return overlapStart < overlapEnd
            ? TextSpan.fromBounds(overlapStart, overlapEnd)
            : null;
    };
    /**
     * Determines if the given span overlaps with this span.
     */
    TextSpan.prototype.overlapsWith = function (span) {
        return Math.max(this.start, span.start) < Math.min(this.end, span.end);
    };
    return TextSpan;
}());
exports.TextSpan = TextSpan;
