/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhpSyntaxTree = void 0;
var Encoding_1 = require("../text/Encoding");
var PhpLexer_1 = require("./PhpLexer");
var PhpParser_1 = require("./PhpParser");
var PhpParserOptions_1 = require("./PhpParserOptions");
var SourceTextFactory_1 = require("../text/SourceTextFactory");
var SyntaxTree_1 = require("./SyntaxTree");
/**
 * @todo Document PhpSyntaxTree.
 */
var PhpSyntaxTree = /** @class */ (function (_super) {
    __extends(PhpSyntaxTree, _super);
    /**
     * Creates a `PhpSyntaxTree` object.
     *
     * @param {SourceTextSyntaxNode} root
     *   The root node of a parsed source file.
     * @param {string} path
     *   The location of the source file.
     * @param {PhpParserOptions} options
     *   Parser configuration options.
     */
    function PhpSyntaxTree(root, path, options) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.path = path;
        _this.root = root;
        return _this;
    }
    /**
     * Parses a string into a syntax tree.
     *
     * @param {string} text
     *   A string containing source code.
     * @param {string=} path
     *   The location of the source file.
     * @param {PhpParserOptions=} options
     *   Parser configuration options.
     * @param {Encoding=} encoding
     *   The original encoding of the source text. Defaults to `Encoding.Utf8`.
     */
    PhpSyntaxTree.fromText = function (text, path, options, encoding) {
        if (path === void 0) { path = ''; }
        if (options === void 0) { options = PhpParserOptions_1.PhpParserOptions.Default; }
        if (encoding === void 0) { encoding = Encoding_1.Encoding.Utf8; }
        var sourceText = SourceTextFactory_1.SourceTextFactory.from(text, encoding);
        var lexer = new PhpLexer_1.PhpLexer(sourceText, options.version, options.is64Bit, options.allowUtf16);
        var parser = new PhpParser_1.PhpParser(lexer, options);
        var root = parser.parse();
        return new PhpSyntaxTree(root, path, options);
    };
    /**
     * @inheritDoc
     */
    PhpSyntaxTree.prototype.getDiagnostics = function () {
        return this.root.getDiagnostics();
    };
    return PhpSyntaxTree;
}(SyntaxTree_1.SyntaxTreeBase));
exports.PhpSyntaxTree = PhpSyntaxTree;
