/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ----------------------------------------------------------------------------
// THIS IS A GENERATED FILE. DO NOT MODIFY.
// ----------------------------------------------------------------------------
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassConstantDeclarationSyntaxNode = exports.ClassConstantSyntaxNode = exports.BreakSyntaxNode = exports.BinarySyntaxNode = exports.AssignmentSyntaxNode = exports.ArrowFunctionSyntaxNode = exports.ArraySyntaxNode = exports.AnonymousObjectCreationSyntaxNode = exports.AnonymousFunctionSyntaxNode = exports.VariableSyntaxNode = exports.TypeDeclarationSyntaxNode = exports.SelectionSyntaxNode = exports.ScopedInvocationSyntaxNode = exports.ScopedAccessSyntaxNode = exports.ObjectCreationSyntaxNode = exports.MemberInvocationSyntaxNode = exports.MemberAccessSyntaxNode = exports.JumpSyntaxNode = exports.IterationSyntaxNode = exports.InvocationSyntaxNode = exports.IntrinsicSyntaxNode = exports.UseElementSyntaxNode = exports.TryFinallySyntaxNode = exports.TryCatchSyntaxNode = exports.TraitPrecedenceSyntaxNode = exports.SwitchCaseSyntaxNode = exports.StaticElementSyntaxNode = exports.PropertyElementSyntaxNode = exports.ParameterSyntaxNode = exports.MethodReferenceSyntaxNode = exports.ListDestructureElementSyntaxNode = exports.ListDestructureSyntaxNode = exports.IncompleteReferencedTraitAdaptationSyntaxNode = exports.IncompleteNamedTraitAdaptationSyntaxNode = exports.FlexibleHeredocElementSyntaxNode = exports.ElseIfBlockSyntaxNode = exports.ElseIfSyntaxNode = exports.ElseBlockSyntaxNode = exports.ElseSyntaxNode = exports.ConstantElementSyntaxNode = exports.ClosureUseSyntaxNode = exports.ClassConstantElementSyntaxNode = exports.ArrayElementSyntaxNode = exports.ArgumentSyntaxNode = exports.AnonymousClassSyntaxNode = exports.TypeSyntaxNode = exports.TraitAliasSyntaxNode = exports.StatementSyntaxNode = exports.NameSyntaxNode = exports.ExpressionSyntaxNode = void 0;
exports.NamedObjectCreationSyntaxNode = exports.NamedMethodInvocationSyntaxNode = exports.NamedMemberAccessSyntaxNode = exports.MethodDeclarationSyntaxNode = exports.LocalVariableSyntaxNode = exports.LiteralSyntaxNode = exports.LexicalVariableSyntaxNode = exports.LabelSyntaxNode = exports.IsSetIntrinsicSyntaxNode = exports.InterfaceDeclarationSyntaxNode = exports.InstanceOfSyntaxNode = exports.IndirectVariableSyntaxNode = exports.IndirectStringVariableSyntaxNode = exports.IndirectScopedInvocationSyntaxNode = exports.IndirectObjectCreationSyntaxNode = exports.IndirectMethodInvocationSyntaxNode = exports.IndirectMemberAccessSyntaxNode = exports.IncompleteMemberSyntaxNode = exports.IfBlockSyntaxNode = exports.IfSyntaxNode = exports.HeredocTemplateSyntaxNode = exports.HaltCompilerSyntaxNode = exports.GoToSyntaxNode = exports.GlobalSyntaxNode = exports.FunctionInvocationSyntaxNode = exports.FunctionDeclarationSyntaxNode = exports.FullyQualifiedNameSyntaxNode = exports.ForEachBlockSyntaxNode = exports.ForEachSyntaxNode = exports.ForBlockSyntaxNode = exports.ForSyntaxNode = exports.FlexibleHeredocTemplateSyntaxNode = exports.ExpressionStatementSyntaxNode = exports.ExpressionGroupSyntaxNode = exports.ExitIntrinsicSyntaxNode = exports.EvalIntrinsicSyntaxNode = exports.ErrorControlSyntaxNode = exports.EmptyIntrinsicSyntaxNode = exports.ElementAccessSyntaxNode = exports.EchoSyntaxNode = exports.DoWhileSyntaxNode = exports.DestructuringAssignmentSyntaxNode = exports.DeclareBlockSyntaxNode = exports.DeclareSyntaxNode = exports.ContinueSyntaxNode = exports.ConstantDeclarationSyntaxNode = exports.ConstantSyntaxNode = exports.ConditionalSyntaxNode = exports.CloneSyntaxNode = exports.ClassDeclarationSyntaxNode = void 0;
exports.YieldFromSyntaxNode = exports.YieldSyntaxNode = exports.WhileBlockSyntaxNode = exports.WhileSyntaxNode = exports.UseGroupDeclarationSyntaxNode = exports.UseDeclarationSyntaxNode = exports.UnsetSyntaxNode = exports.UnarySyntaxNode = exports.TrySyntaxNode = exports.TraitUseGroupSyntaxNode = exports.TraitUseSyntaxNode = exports.TraitDeclarationSyntaxNode = exports.ThrowSyntaxNode = exports.SwitchBlockSyntaxNode = exports.SwitchSyntaxNode = exports.StringVariableSyntaxNode = exports.StringTemplateSyntaxNode = exports.StringExpressionSyntaxNode = exports.StringElementAccessSyntaxNode = exports.StaticPropertySyntaxNode = exports.StaticSyntaxNode = exports.StatementBlockSyntaxNode = exports.ShellCommandTemplateSyntaxNode = exports.ScriptInclusionSyntaxNode = exports.ReturnSyntaxNode = exports.RelativeNameSyntaxNode = exports.ReferencedTraitAliasSyntaxNode = exports.PropertyDeclarationSyntaxNode = exports.PrintIntrinsicSyntaxNode = exports.PredefinedTypeSyntaxNode = exports.PostfixUnarySyntaxNode = exports.PartiallyQualifiedNameSyntaxNode = exports.NamespaceGroupDeclarationSyntaxNode = exports.NamespaceDeclarationSyntaxNode = exports.NamedTypeSyntaxNode = exports.NamedTraitAliasSyntaxNode = exports.NamedScopedInvocationSyntaxNode = void 0;
var php_common_1 = require("../../../php-common");
var SyntaxNode_1 = require("./SyntaxNode");
var SyntaxToken_1 = require("./SyntaxToken");
var ExpressionSyntaxNode = /** @class */ (function (_super) {
    __extends(ExpressionSyntaxNode, _super);
    function ExpressionSyntaxNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ExpressionSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ExpressionSyntaxNode = ExpressionSyntaxNode;
var NameSyntaxNode = /** @class */ (function (_super) {
    __extends(NameSyntaxNode, _super);
    function NameSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    return NameSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.NameSyntaxNode = NameSyntaxNode;
var StatementSyntaxNode = /** @class */ (function (_super) {
    __extends(StatementSyntaxNode, _super);
    function StatementSyntaxNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return StatementSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.StatementSyntaxNode = StatementSyntaxNode;
var TraitAliasSyntaxNode = /** @class */ (function (_super) {
    __extends(TraitAliasSyntaxNode, _super);
    function TraitAliasSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    return TraitAliasSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.TraitAliasSyntaxNode = TraitAliasSyntaxNode;
var TypeSyntaxNode = /** @class */ (function (_super) {
    __extends(TypeSyntaxNode, _super);
    function TypeSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    return TypeSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.TypeSyntaxNode = TypeSyntaxNode;
var AnonymousClassSyntaxNode = /** @class */ (function (_super) {
    __extends(AnonymousClassSyntaxNode, _super);
    function AnonymousClassSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._argumentList = undefined;
        _this._baseType = undefined;
        _this._interfaces = undefined;
        _this._members = undefined;
        return _this;
    }
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "classKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.classKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "openParen", {
        get: function () {
            var token = this.node.openParen;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(1), this.relativeIndexAt(1));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "argumentList", {
        get: function () {
            if (this._argumentList === void 0) {
                this._argumentList = this.createChildNode(2);
            }
            return this._argumentList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "closeParen", {
        get: function () {
            var token = this.node.closeParen;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(3), this.relativeIndexAt(3));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "extendsKeyword", {
        get: function () {
            var token = this.node.extendsKeyword;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(4), this.relativeIndexAt(4));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "baseType", {
        get: function () {
            if (this._baseType === void 0) {
                this._baseType = this.createChildNode(5);
            }
            return this._baseType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "implementsKeyword", {
        get: function () {
            var token = this.node.implementsKeyword;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(6), this.relativeIndexAt(6));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "interfaces", {
        get: function () {
            if (this._interfaces === void 0) {
                this._interfaces = this.createChildNode(7);
            }
            return this._interfaces;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "openBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBrace, this, this.offsetAt(8), this.relativeIndexAt(8));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "members", {
        get: function () {
            if (this._members === void 0) {
                this._members = this.createChildNode(9);
            }
            return this._members;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "closeBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBrace, this, this.offsetAt(10), this.relativeIndexAt(10));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousClassSyntaxNode.prototype, "count", {
        get: function () {
            return 11;
        },
        enumerable: false,
        configurable: true
    });
    AnonymousClassSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitAnonymousClass(this);
    };
    AnonymousClassSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitAnonymousClass(this);
    };
    AnonymousClassSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._argumentList !== void 0 ? this._argumentList : null;
            case 5:
                return this._baseType !== void 0 ? this._baseType : null;
            case 7:
                return this._interfaces !== void 0 ? this._interfaces : null;
            case 9:
                return this._members !== void 0 ? this._members : null;
            default:
                return null;
        }
    };
    AnonymousClassSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._argumentList === void 0) {
                    this._argumentList = this.createChildNode(2);
                }
                return this._argumentList;
            case 5:
                if (this._baseType === void 0) {
                    this._baseType = this.createChildNode(5);
                }
                return this._baseType;
            case 7:
                if (this._interfaces === void 0) {
                    this._interfaces = this.createChildNode(7);
                }
                return this._interfaces;
            case 9:
                if (this._members === void 0) {
                    this._members = this.createChildNode(9);
                }
                return this._members;
            default:
                return null;
        }
    };
    return AnonymousClassSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.AnonymousClassSyntaxNode = AnonymousClassSyntaxNode;
var ArgumentSyntaxNode = /** @class */ (function (_super) {
    __extends(ArgumentSyntaxNode, _super);
    function ArgumentSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._value = undefined;
        return _this;
    }
    Object.defineProperty(ArgumentSyntaxNode.prototype, "ellipsis", {
        get: function () {
            var token = this.node.ellipsis;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(0), this.relativeIndexAt(0));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArgumentSyntaxNode.prototype, "value", {
        get: function () {
            if (this._value === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._value = node;
            }
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArgumentSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    ArgumentSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitArgument(this);
    };
    ArgumentSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitArgument(this);
    };
    ArgumentSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._value !== void 0 ? this._value : null;
            default:
                return null;
        }
    };
    ArgumentSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._value === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._value = node;
                }
                return this._value;
            default:
                return null;
        }
    };
    return ArgumentSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ArgumentSyntaxNode = ArgumentSyntaxNode;
var ArrayElementSyntaxNode = /** @class */ (function (_super) {
    __extends(ArrayElementSyntaxNode, _super);
    function ArrayElementSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._key = undefined;
        _this._value = undefined;
        return _this;
    }
    Object.defineProperty(ArrayElementSyntaxNode.prototype, "key", {
        get: function () {
            if (this._key === void 0) {
                this._key = this.createFirstChildNode();
            }
            return this._key;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrayElementSyntaxNode.prototype, "doubleArrow", {
        get: function () {
            var token = this.node.doubleArrow;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(1), this.relativeIndexAt(1));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrayElementSyntaxNode.prototype, "valueOperator", {
        get: function () {
            var token = this.node.valueOperator;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrayElementSyntaxNode.prototype, "value", {
        get: function () {
            if (this._value === void 0) {
                var node = this.createChildNode(3);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._value = node;
            }
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrayElementSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    ArrayElementSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitArrayElement(this);
    };
    ArrayElementSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitArrayElement(this);
    };
    ArrayElementSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._key !== void 0 ? this._key : null;
            case 3:
                return this._value !== void 0 ? this._value : null;
            default:
                return null;
        }
    };
    ArrayElementSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._key === void 0) {
                    this._key = this.createFirstChildNode();
                }
                return this._key;
            case 3:
                if (this._value === void 0) {
                    var node = this.createChildNode(3);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._value = node;
                }
                return this._value;
            default:
                return null;
        }
    };
    return ArrayElementSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ArrayElementSyntaxNode = ArrayElementSyntaxNode;
var ClassConstantElementSyntaxNode = /** @class */ (function (_super) {
    __extends(ClassConstantElementSyntaxNode, _super);
    function ClassConstantElementSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(ClassConstantElementSyntaxNode.prototype, "identifierOrKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.identifierOrKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantElementSyntaxNode.prototype, "equal", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.equal, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantElementSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantElementSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    ClassConstantElementSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitClassConstantElement(this);
    };
    ClassConstantElementSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClassConstantElement(this);
    };
    ClassConstantElementSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    ClassConstantElementSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expression === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return ClassConstantElementSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ClassConstantElementSyntaxNode = ClassConstantElementSyntaxNode;
var ClosureUseSyntaxNode = /** @class */ (function (_super) {
    __extends(ClosureUseSyntaxNode, _super);
    function ClosureUseSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._variables = undefined;
        return _this;
    }
    Object.defineProperty(ClosureUseSyntaxNode.prototype, "useKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.useKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosureUseSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosureUseSyntaxNode.prototype, "variables", {
        get: function () {
            if (this._variables === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._variables = node;
            }
            return this._variables;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosureUseSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClosureUseSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    ClosureUseSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitClosureUse(this);
    };
    ClosureUseSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClosureUse(this);
    };
    ClosureUseSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._variables !== void 0 ? this._variables : null;
            default:
                return null;
        }
    };
    ClosureUseSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._variables === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._variables = node;
                }
                return this._variables;
            default:
                return null;
        }
    };
    return ClosureUseSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ClosureUseSyntaxNode = ClosureUseSyntaxNode;
var ConstantElementSyntaxNode = /** @class */ (function (_super) {
    __extends(ConstantElementSyntaxNode, _super);
    function ConstantElementSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(ConstantElementSyntaxNode.prototype, "identifier", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.identifier, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantElementSyntaxNode.prototype, "equal", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.equal, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantElementSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantElementSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    ConstantElementSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitConstantElement(this);
    };
    ConstantElementSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitConstantElement(this);
    };
    ConstantElementSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    ConstantElementSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expression === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return ConstantElementSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ConstantElementSyntaxNode = ConstantElementSyntaxNode;
var ElseSyntaxNode = /** @class */ (function (_super) {
    __extends(ElseSyntaxNode, _super);
    function ElseSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._statement = undefined;
        return _this;
    }
    Object.defineProperty(ElseSyntaxNode.prototype, "elseKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.elseKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseSyntaxNode.prototype, "statement", {
        get: function () {
            if (this._statement === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statement = node;
            }
            return this._statement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    ElseSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitElse(this);
    };
    ElseSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitElse(this);
    };
    ElseSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._statement !== void 0 ? this._statement : null;
            default:
                return null;
        }
    };
    ElseSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._statement === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statement = node;
                }
                return this._statement;
            default:
                return null;
        }
    };
    return ElseSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ElseSyntaxNode = ElseSyntaxNode;
var ElseBlockSyntaxNode = /** @class */ (function (_super) {
    __extends(ElseBlockSyntaxNode, _super);
    function ElseBlockSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(ElseBlockSyntaxNode.prototype, "elseKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.elseKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseBlockSyntaxNode.prototype, "colon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.colon, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseBlockSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createChildNode(2);
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseBlockSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    ElseBlockSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitElseBlock(this);
    };
    ElseBlockSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitElseBlock(this);
    };
    ElseBlockSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    ElseBlockSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._statements === void 0) {
                    this._statements = this.createChildNode(2);
                }
                return this._statements;
            default:
                return null;
        }
    };
    return ElseBlockSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ElseBlockSyntaxNode = ElseBlockSyntaxNode;
var ElseIfSyntaxNode = /** @class */ (function (_super) {
    __extends(ElseIfSyntaxNode, _super);
    function ElseIfSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._condition = undefined;
        _this._statement = undefined;
        return _this;
    }
    Object.defineProperty(ElseIfSyntaxNode.prototype, "elseIfKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.elseIfKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfSyntaxNode.prototype, "condition", {
        get: function () {
            if (this._condition === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._condition = node;
            }
            return this._condition;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfSyntaxNode.prototype, "statement", {
        get: function () {
            if (this._statement === void 0) {
                var node = this.createChildNode(4);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statement = node;
            }
            return this._statement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    ElseIfSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitElseIf(this);
    };
    ElseIfSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitElseIf(this);
    };
    ElseIfSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._condition !== void 0 ? this._condition : null;
            case 4:
                return this._statement !== void 0 ? this._statement : null;
            default:
                return null;
        }
    };
    ElseIfSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._condition === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._condition = node;
                }
                return this._condition;
            case 4:
                if (this._statement === void 0) {
                    var node = this.createChildNode(4);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statement = node;
                }
                return this._statement;
            default:
                return null;
        }
    };
    return ElseIfSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ElseIfSyntaxNode = ElseIfSyntaxNode;
var ElseIfBlockSyntaxNode = /** @class */ (function (_super) {
    __extends(ElseIfBlockSyntaxNode, _super);
    function ElseIfBlockSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._condition = undefined;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(ElseIfBlockSyntaxNode.prototype, "elseIfKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.elseIfKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfBlockSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfBlockSyntaxNode.prototype, "condition", {
        get: function () {
            if (this._condition === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._condition = node;
            }
            return this._condition;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfBlockSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfBlockSyntaxNode.prototype, "colon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.colon, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfBlockSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createChildNode(5);
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElseIfBlockSyntaxNode.prototype, "count", {
        get: function () {
            return 6;
        },
        enumerable: false,
        configurable: true
    });
    ElseIfBlockSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitElseIfBlock(this);
    };
    ElseIfBlockSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitElseIfBlock(this);
    };
    ElseIfBlockSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._condition !== void 0 ? this._condition : null;
            case 5:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    ElseIfBlockSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._condition === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._condition = node;
                }
                return this._condition;
            case 5:
                if (this._statements === void 0) {
                    this._statements = this.createChildNode(5);
                }
                return this._statements;
            default:
                return null;
        }
    };
    return ElseIfBlockSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ElseIfBlockSyntaxNode = ElseIfBlockSyntaxNode;
var FlexibleHeredocElementSyntaxNode = /** @class */ (function (_super) {
    __extends(FlexibleHeredocElementSyntaxNode, _super);
    function FlexibleHeredocElementSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._template = undefined;
        return _this;
    }
    Object.defineProperty(FlexibleHeredocElementSyntaxNode.prototype, "indent", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.indent, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FlexibleHeredocElementSyntaxNode.prototype, "template", {
        get: function () {
            if (this._template === void 0) {
                this._template = this.createChildNode(1);
            }
            return this._template;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FlexibleHeredocElementSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    FlexibleHeredocElementSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitFlexibleHeredocElement(this);
    };
    FlexibleHeredocElementSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFlexibleHeredocElement(this);
    };
    FlexibleHeredocElementSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._template !== void 0 ? this._template : null;
            default:
                return null;
        }
    };
    FlexibleHeredocElementSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._template === void 0) {
                    this._template = this.createChildNode(1);
                }
                return this._template;
            default:
                return null;
        }
    };
    return FlexibleHeredocElementSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.FlexibleHeredocElementSyntaxNode = FlexibleHeredocElementSyntaxNode;
var IncompleteNamedTraitAdaptationSyntaxNode = /** @class */ (function (_super) {
    __extends(IncompleteNamedTraitAdaptationSyntaxNode, _super);
    function IncompleteNamedTraitAdaptationSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    Object.defineProperty(IncompleteNamedTraitAdaptationSyntaxNode.prototype, "identifierOrKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.identifierOrKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IncompleteNamedTraitAdaptationSyntaxNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    IncompleteNamedTraitAdaptationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitIncompleteNamedTraitAdapatation(this);
    };
    IncompleteNamedTraitAdaptationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIncompleteNamedTraitAdapatation(this);
    };
    IncompleteNamedTraitAdaptationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    IncompleteNamedTraitAdaptationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    return IncompleteNamedTraitAdaptationSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.IncompleteNamedTraitAdaptationSyntaxNode = IncompleteNamedTraitAdaptationSyntaxNode;
var IncompleteReferencedTraitAdaptationSyntaxNode = /** @class */ (function (_super) {
    __extends(IncompleteReferencedTraitAdaptationSyntaxNode, _super);
    function IncompleteReferencedTraitAdaptationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._reference = undefined;
        return _this;
    }
    Object.defineProperty(IncompleteReferencedTraitAdaptationSyntaxNode.prototype, "reference", {
        get: function () {
            if (this._reference === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._reference = node;
            }
            return this._reference;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IncompleteReferencedTraitAdaptationSyntaxNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    IncompleteReferencedTraitAdaptationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitIncompleteReferencedTraitAdaptation(this);
    };
    IncompleteReferencedTraitAdaptationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIncompleteReferencedTraitAdaptation(this);
    };
    IncompleteReferencedTraitAdaptationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._reference !== void 0 ? this._reference : null;
            default:
                return null;
        }
    };
    IncompleteReferencedTraitAdaptationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._reference === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._reference = node;
                }
                return this._reference;
            default:
                return null;
        }
    };
    return IncompleteReferencedTraitAdaptationSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.IncompleteReferencedTraitAdaptationSyntaxNode = IncompleteReferencedTraitAdaptationSyntaxNode;
var ListDestructureSyntaxNode = /** @class */ (function (_super) {
    __extends(ListDestructureSyntaxNode, _super);
    function ListDestructureSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._variables = undefined;
        return _this;
    }
    Object.defineProperty(ListDestructureSyntaxNode.prototype, "listKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.listKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureSyntaxNode.prototype, "variables", {
        get: function () {
            if (this._variables === void 0) {
                this._variables = this.createChildNode(2);
            }
            return this._variables;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    ListDestructureSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitListDestructure(this);
    };
    ListDestructureSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitListDestructure(this);
    };
    ListDestructureSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._variables !== void 0 ? this._variables : null;
            default:
                return null;
        }
    };
    ListDestructureSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._variables === void 0) {
                    this._variables = this.createChildNode(2);
                }
                return this._variables;
            default:
                return null;
        }
    };
    return ListDestructureSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ListDestructureSyntaxNode = ListDestructureSyntaxNode;
var ListDestructureElementSyntaxNode = /** @class */ (function (_super) {
    __extends(ListDestructureElementSyntaxNode, _super);
    function ListDestructureElementSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._key = undefined;
        _this._value = undefined;
        return _this;
    }
    Object.defineProperty(ListDestructureElementSyntaxNode.prototype, "key", {
        get: function () {
            if (this._key === void 0) {
                this._key = this.createFirstChildNode();
            }
            return this._key;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureElementSyntaxNode.prototype, "doubleArrow", {
        get: function () {
            var token = this.node.doubleArrow;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(1), this.relativeIndexAt(1));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureElementSyntaxNode.prototype, "ampersand", {
        get: function () {
            var token = this.node.ampersand;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureElementSyntaxNode.prototype, "value", {
        get: function () {
            if (this._value === void 0) {
                var node = this.createChildNode(3);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._value = node;
            }
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListDestructureElementSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    ListDestructureElementSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitListDestructureElement(this);
    };
    ListDestructureElementSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitListDestructureElement(this);
    };
    ListDestructureElementSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._key !== void 0 ? this._key : null;
            case 3:
                return this._value !== void 0 ? this._value : null;
            default:
                return null;
        }
    };
    ListDestructureElementSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._key === void 0) {
                    this._key = this.createFirstChildNode();
                }
                return this._key;
            case 3:
                if (this._value === void 0) {
                    var node = this.createChildNode(3);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._value = node;
                }
                return this._value;
            default:
                return null;
        }
    };
    return ListDestructureElementSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ListDestructureElementSyntaxNode = ListDestructureElementSyntaxNode;
var MethodReferenceSyntaxNode = /** @class */ (function (_super) {
    __extends(MethodReferenceSyntaxNode, _super);
    function MethodReferenceSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._className = undefined;
        return _this;
    }
    Object.defineProperty(MethodReferenceSyntaxNode.prototype, "className", {
        get: function () {
            if (this._className === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._className = node;
            }
            return this._className;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodReferenceSyntaxNode.prototype, "doubleColon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.doubleColon, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodReferenceSyntaxNode.prototype, "methodName", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.methodName, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodReferenceSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    MethodReferenceSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitMethodReference(this);
    };
    MethodReferenceSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMethodReference(this);
    };
    MethodReferenceSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._className !== void 0 ? this._className : null;
            default:
                return null;
        }
    };
    MethodReferenceSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._className === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._className = node;
                }
                return this._className;
            default:
                return null;
        }
    };
    return MethodReferenceSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.MethodReferenceSyntaxNode = MethodReferenceSyntaxNode;
var ParameterSyntaxNode = /** @class */ (function (_super) {
    __extends(ParameterSyntaxNode, _super);
    function ParameterSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._type = undefined;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(ParameterSyntaxNode.prototype, "type", {
        get: function () {
            if (this._type === void 0) {
                this._type = this.createFirstChildNode();
            }
            return this._type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ParameterSyntaxNode.prototype, "ampersand", {
        get: function () {
            var token = this.node.ampersand;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(1), this.relativeIndexAt(1));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ParameterSyntaxNode.prototype, "ellipsis", {
        get: function () {
            var token = this.node.ellipsis;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ParameterSyntaxNode.prototype, "variable", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.variable, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ParameterSyntaxNode.prototype, "equal", {
        get: function () {
            var token = this.node.equal;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(4), this.relativeIndexAt(4));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ParameterSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                this._expression = this.createChildNode(5);
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ParameterSyntaxNode.prototype, "count", {
        get: function () {
            return 6;
        },
        enumerable: false,
        configurable: true
    });
    ParameterSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitParameter(this);
    };
    ParameterSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitParameter(this);
    };
    ParameterSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._type !== void 0 ? this._type : null;
            case 5:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    ParameterSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._type === void 0) {
                    this._type = this.createFirstChildNode();
                }
                return this._type;
            case 5:
                if (this._expression === void 0) {
                    this._expression = this.createChildNode(5);
                }
                return this._expression;
            default:
                return null;
        }
    };
    return ParameterSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.ParameterSyntaxNode = ParameterSyntaxNode;
var PropertyElementSyntaxNode = /** @class */ (function (_super) {
    __extends(PropertyElementSyntaxNode, _super);
    function PropertyElementSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(PropertyElementSyntaxNode.prototype, "variable", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.variable, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyElementSyntaxNode.prototype, "equal", {
        get: function () {
            var token = this.node.equal;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(1), this.relativeIndexAt(1));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyElementSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                this._expression = this.createChildNode(2);
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyElementSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    PropertyElementSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitPropertyElement(this);
    };
    PropertyElementSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitPropertyElement(this);
    };
    PropertyElementSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    PropertyElementSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expression === void 0) {
                    this._expression = this.createChildNode(2);
                }
                return this._expression;
            default:
                return null;
        }
    };
    return PropertyElementSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.PropertyElementSyntaxNode = PropertyElementSyntaxNode;
var StaticElementSyntaxNode = /** @class */ (function (_super) {
    __extends(StaticElementSyntaxNode, _super);
    function StaticElementSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(StaticElementSyntaxNode.prototype, "variable", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.variable, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticElementSyntaxNode.prototype, "equal", {
        get: function () {
            var token = this.node.equal;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(1), this.relativeIndexAt(1));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticElementSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                this._expression = this.createChildNode(2);
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticElementSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    StaticElementSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitStaticElement(this);
    };
    StaticElementSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStaticElement(this);
    };
    StaticElementSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    StaticElementSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expression === void 0) {
                    this._expression = this.createChildNode(2);
                }
                return this._expression;
            default:
                return null;
        }
    };
    return StaticElementSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.StaticElementSyntaxNode = StaticElementSyntaxNode;
var SwitchCaseSyntaxNode = /** @class */ (function (_super) {
    __extends(SwitchCaseSyntaxNode, _super);
    function SwitchCaseSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(SwitchCaseSyntaxNode.prototype, "clauseKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.clauseKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchCaseSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                this._expression = this.createChildNode(1);
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchCaseSyntaxNode.prototype, "separator", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.separator, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchCaseSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createChildNode(3);
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchCaseSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    SwitchCaseSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitSwitchCase(this);
    };
    SwitchCaseSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitSwitchCase(this);
    };
    SwitchCaseSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._expression !== void 0 ? this._expression : null;
            case 3:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    SwitchCaseSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._expression === void 0) {
                    this._expression = this.createChildNode(1);
                }
                return this._expression;
            case 3:
                if (this._statements === void 0) {
                    this._statements = this.createChildNode(3);
                }
                return this._statements;
            default:
                return null;
        }
    };
    return SwitchCaseSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.SwitchCaseSyntaxNode = SwitchCaseSyntaxNode;
var TraitPrecedenceSyntaxNode = /** @class */ (function (_super) {
    __extends(TraitPrecedenceSyntaxNode, _super);
    function TraitPrecedenceSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._methodReference = undefined;
        _this._traitNames = undefined;
        return _this;
    }
    Object.defineProperty(TraitPrecedenceSyntaxNode.prototype, "methodReference", {
        get: function () {
            if (this._methodReference === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._methodReference = node;
            }
            return this._methodReference;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitPrecedenceSyntaxNode.prototype, "insteadOfKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.insteadOfKeyword, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitPrecedenceSyntaxNode.prototype, "traitNames", {
        get: function () {
            if (this._traitNames === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._traitNames = node;
            }
            return this._traitNames;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitPrecedenceSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitPrecedenceSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    TraitPrecedenceSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitTraitPrecedence(this);
    };
    TraitPrecedenceSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitPrecedence(this);
    };
    TraitPrecedenceSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._methodReference !== void 0 ? this._methodReference : null;
            case 2:
                return this._traitNames !== void 0 ? this._traitNames : null;
            default:
                return null;
        }
    };
    TraitPrecedenceSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._methodReference === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._methodReference = node;
                }
                return this._methodReference;
            case 2:
                if (this._traitNames === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._traitNames = node;
                }
                return this._traitNames;
            default:
                return null;
        }
    };
    return TraitPrecedenceSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.TraitPrecedenceSyntaxNode = TraitPrecedenceSyntaxNode;
var TryCatchSyntaxNode = /** @class */ (function (_super) {
    __extends(TryCatchSyntaxNode, _super);
    function TryCatchSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._typeNames = undefined;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(TryCatchSyntaxNode.prototype, "catchKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.catchKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryCatchSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryCatchSyntaxNode.prototype, "typeNames", {
        get: function () {
            if (this._typeNames === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._typeNames = node;
            }
            return this._typeNames;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryCatchSyntaxNode.prototype, "variable", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.variable, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryCatchSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryCatchSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                var node = this.createChildNode(5);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statements = node;
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryCatchSyntaxNode.prototype, "count", {
        get: function () {
            return 6;
        },
        enumerable: false,
        configurable: true
    });
    TryCatchSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitTryCatch(this);
    };
    TryCatchSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTryCatch(this);
    };
    TryCatchSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._typeNames !== void 0 ? this._typeNames : null;
            case 5:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    TryCatchSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._typeNames === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._typeNames = node;
                }
                return this._typeNames;
            case 5:
                if (this._statements === void 0) {
                    var node = this.createChildNode(5);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statements = node;
                }
                return this._statements;
            default:
                return null;
        }
    };
    return TryCatchSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.TryCatchSyntaxNode = TryCatchSyntaxNode;
var TryFinallySyntaxNode = /** @class */ (function (_super) {
    __extends(TryFinallySyntaxNode, _super);
    function TryFinallySyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(TryFinallySyntaxNode.prototype, "finallyKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.finallyKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryFinallySyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statements = node;
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TryFinallySyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    TryFinallySyntaxNode.prototype.accept = function (visitor) {
        visitor.visitTryFinally(this);
    };
    TryFinallySyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTryFinally(this);
    };
    TryFinallySyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    TryFinallySyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._statements === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statements = node;
                }
                return this._statements;
            default:
                return null;
        }
    };
    return TryFinallySyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.TryFinallySyntaxNode = TryFinallySyntaxNode;
var UseElementSyntaxNode = /** @class */ (function (_super) {
    __extends(UseElementSyntaxNode, _super);
    function UseElementSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._target = undefined;
        return _this;
    }
    Object.defineProperty(UseElementSyntaxNode.prototype, "typeKeyword", {
        get: function () {
            var token = this.node.typeKeyword;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(0), this.relativeIndexAt(0));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseElementSyntaxNode.prototype, "target", {
        get: function () {
            if (this._target === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._target = node;
            }
            return this._target;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseElementSyntaxNode.prototype, "asKeyword", {
        get: function () {
            var token = this.node.asKeyword;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseElementSyntaxNode.prototype, "alias", {
        get: function () {
            var token = this.node.alias;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(3), this.relativeIndexAt(3));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseElementSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    UseElementSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitUseElement(this);
    };
    UseElementSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitUseElement(this);
    };
    UseElementSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._target !== void 0 ? this._target : null;
            default:
                return null;
        }
    };
    UseElementSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._target === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._target = node;
                }
                return this._target;
            default:
                return null;
        }
    };
    return UseElementSyntaxNode;
}(SyntaxNode_1.SyntaxNode));
exports.UseElementSyntaxNode = UseElementSyntaxNode;
var IntrinsicSyntaxNode = /** @class */ (function (_super) {
    __extends(IntrinsicSyntaxNode, _super);
    function IntrinsicSyntaxNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IntrinsicSyntaxNode;
}(ExpressionSyntaxNode));
exports.IntrinsicSyntaxNode = IntrinsicSyntaxNode;
var InvocationSyntaxNode = /** @class */ (function (_super) {
    __extends(InvocationSyntaxNode, _super);
    function InvocationSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    return InvocationSyntaxNode;
}(ExpressionSyntaxNode));
exports.InvocationSyntaxNode = InvocationSyntaxNode;
var IterationSyntaxNode = /** @class */ (function (_super) {
    __extends(IterationSyntaxNode, _super);
    function IterationSyntaxNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IterationSyntaxNode;
}(StatementSyntaxNode));
exports.IterationSyntaxNode = IterationSyntaxNode;
var JumpSyntaxNode = /** @class */ (function (_super) {
    __extends(JumpSyntaxNode, _super);
    function JumpSyntaxNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return JumpSyntaxNode;
}(StatementSyntaxNode));
exports.JumpSyntaxNode = JumpSyntaxNode;
var MemberAccessSyntaxNode = /** @class */ (function (_super) {
    __extends(MemberAccessSyntaxNode, _super);
    function MemberAccessSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    return MemberAccessSyntaxNode;
}(ExpressionSyntaxNode));
exports.MemberAccessSyntaxNode = MemberAccessSyntaxNode;
var MemberInvocationSyntaxNode = /** @class */ (function (_super) {
    __extends(MemberInvocationSyntaxNode, _super);
    function MemberInvocationSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    return MemberInvocationSyntaxNode;
}(InvocationSyntaxNode));
exports.MemberInvocationSyntaxNode = MemberInvocationSyntaxNode;
var ObjectCreationSyntaxNode = /** @class */ (function (_super) {
    __extends(ObjectCreationSyntaxNode, _super);
    function ObjectCreationSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    return ObjectCreationSyntaxNode;
}(ExpressionSyntaxNode));
exports.ObjectCreationSyntaxNode = ObjectCreationSyntaxNode;
var ScopedAccessSyntaxNode = /** @class */ (function (_super) {
    __extends(ScopedAccessSyntaxNode, _super);
    function ScopedAccessSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    return ScopedAccessSyntaxNode;
}(ExpressionSyntaxNode));
exports.ScopedAccessSyntaxNode = ScopedAccessSyntaxNode;
var ScopedInvocationSyntaxNode = /** @class */ (function (_super) {
    __extends(ScopedInvocationSyntaxNode, _super);
    function ScopedInvocationSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    return ScopedInvocationSyntaxNode;
}(InvocationSyntaxNode));
exports.ScopedInvocationSyntaxNode = ScopedInvocationSyntaxNode;
var SelectionSyntaxNode = /** @class */ (function (_super) {
    __extends(SelectionSyntaxNode, _super);
    function SelectionSyntaxNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SelectionSyntaxNode;
}(StatementSyntaxNode));
exports.SelectionSyntaxNode = SelectionSyntaxNode;
var TypeDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(TypeDeclarationSyntaxNode, _super);
    function TypeDeclarationSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    return TypeDeclarationSyntaxNode;
}(StatementSyntaxNode));
exports.TypeDeclarationSyntaxNode = TypeDeclarationSyntaxNode;
var VariableSyntaxNode = /** @class */ (function (_super) {
    __extends(VariableSyntaxNode, _super);
    function VariableSyntaxNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return VariableSyntaxNode;
}(ExpressionSyntaxNode));
exports.VariableSyntaxNode = VariableSyntaxNode;
var AnonymousFunctionSyntaxNode = /** @class */ (function (_super) {
    __extends(AnonymousFunctionSyntaxNode, _super);
    function AnonymousFunctionSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._parameters = undefined;
        _this._useClause = undefined;
        _this._returnType = undefined;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(AnonymousFunctionSyntaxNode.prototype, "staticKeyword", {
        get: function () {
            var token = this.node.staticKeyword;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(0), this.relativeIndexAt(0));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionSyntaxNode.prototype, "functionKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.functionKeyword, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionSyntaxNode.prototype, "ampersand", {
        get: function () {
            var token = this.node.ampersand;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionSyntaxNode.prototype, "parameters", {
        get: function () {
            if (this._parameters === void 0) {
                this._parameters = this.createChildNode(4);
            }
            return this._parameters;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(5), this.relativeIndexAt(5));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionSyntaxNode.prototype, "useClause", {
        get: function () {
            if (this._useClause === void 0) {
                this._useClause = this.createChildNode(6);
            }
            return this._useClause;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionSyntaxNode.prototype, "colon", {
        get: function () {
            var token = this.node.colon;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(7), this.relativeIndexAt(7));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionSyntaxNode.prototype, "returnType", {
        get: function () {
            if (this._returnType === void 0) {
                this._returnType = this.createChildNode(8);
            }
            return this._returnType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                var node = this.createChildNode(9);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statements = node;
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousFunctionSyntaxNode.prototype, "count", {
        get: function () {
            return 10;
        },
        enumerable: false,
        configurable: true
    });
    AnonymousFunctionSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitAnonymousFunction(this);
    };
    AnonymousFunctionSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitAnonymousFunction(this);
    };
    AnonymousFunctionSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 4:
                return this._parameters !== void 0 ? this._parameters : null;
            case 6:
                return this._useClause !== void 0 ? this._useClause : null;
            case 8:
                return this._returnType !== void 0 ? this._returnType : null;
            case 9:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    AnonymousFunctionSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 4:
                if (this._parameters === void 0) {
                    this._parameters = this.createChildNode(4);
                }
                return this._parameters;
            case 6:
                if (this._useClause === void 0) {
                    this._useClause = this.createChildNode(6);
                }
                return this._useClause;
            case 8:
                if (this._returnType === void 0) {
                    this._returnType = this.createChildNode(8);
                }
                return this._returnType;
            case 9:
                if (this._statements === void 0) {
                    var node = this.createChildNode(9);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statements = node;
                }
                return this._statements;
            default:
                return null;
        }
    };
    return AnonymousFunctionSyntaxNode;
}(ExpressionSyntaxNode));
exports.AnonymousFunctionSyntaxNode = AnonymousFunctionSyntaxNode;
var AnonymousObjectCreationSyntaxNode = /** @class */ (function (_super) {
    __extends(AnonymousObjectCreationSyntaxNode, _super);
    function AnonymousObjectCreationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._anonymousClass = undefined;
        return _this;
    }
    Object.defineProperty(AnonymousObjectCreationSyntaxNode.prototype, "newKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.newKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousObjectCreationSyntaxNode.prototype, "anonymousClass", {
        get: function () {
            if (this._anonymousClass === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._anonymousClass = node;
            }
            return this._anonymousClass;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnonymousObjectCreationSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    AnonymousObjectCreationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitAnonymousObjectCreation(this);
    };
    AnonymousObjectCreationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitAnonymousObjectCreation(this);
    };
    AnonymousObjectCreationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._anonymousClass !== void 0 ? this._anonymousClass : null;
            default:
                return null;
        }
    };
    AnonymousObjectCreationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._anonymousClass === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._anonymousClass = node;
                }
                return this._anonymousClass;
            default:
                return null;
        }
    };
    return AnonymousObjectCreationSyntaxNode;
}(ObjectCreationSyntaxNode));
exports.AnonymousObjectCreationSyntaxNode = AnonymousObjectCreationSyntaxNode;
var ArraySyntaxNode = /** @class */ (function (_super) {
    __extends(ArraySyntaxNode, _super);
    function ArraySyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._initializerList = undefined;
        return _this;
    }
    Object.defineProperty(ArraySyntaxNode.prototype, "arrayKeyword", {
        get: function () {
            var token = this.node.arrayKeyword;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(0), this.relativeIndexAt(0));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArraySyntaxNode.prototype, "openParenOrBracket", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParenOrBracket, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArraySyntaxNode.prototype, "initializerList", {
        get: function () {
            if (this._initializerList === void 0) {
                this._initializerList = this.createChildNode(2);
            }
            return this._initializerList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArraySyntaxNode.prototype, "closeParenOrBracket", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParenOrBracket, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArraySyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    ArraySyntaxNode.prototype.accept = function (visitor) {
        visitor.visitArray(this);
    };
    ArraySyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitArray(this);
    };
    ArraySyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._initializerList !== void 0 ? this._initializerList : null;
            default:
                return null;
        }
    };
    ArraySyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._initializerList === void 0) {
                    this._initializerList = this.createChildNode(2);
                }
                return this._initializerList;
            default:
                return null;
        }
    };
    return ArraySyntaxNode;
}(ExpressionSyntaxNode));
exports.ArraySyntaxNode = ArraySyntaxNode;
var ArrowFunctionSyntaxNode = /** @class */ (function (_super) {
    __extends(ArrowFunctionSyntaxNode, _super);
    function ArrowFunctionSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._parameters = undefined;
        _this._returnType = undefined;
        _this._expr = undefined;
        return _this;
    }
    Object.defineProperty(ArrowFunctionSyntaxNode.prototype, "staticKeyword", {
        get: function () {
            var token = this.node.staticKeyword;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(0), this.relativeIndexAt(0));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionSyntaxNode.prototype, "fnKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.fnKeyword, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionSyntaxNode.prototype, "ampersand", {
        get: function () {
            var token = this.node.ampersand;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionSyntaxNode.prototype, "parameters", {
        get: function () {
            if (this._parameters === void 0) {
                this._parameters = this.createChildNode(4);
            }
            return this._parameters;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(5), this.relativeIndexAt(5));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionSyntaxNode.prototype, "colon", {
        get: function () {
            var token = this.node.colon;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(6), this.relativeIndexAt(6));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionSyntaxNode.prototype, "returnType", {
        get: function () {
            if (this._returnType === void 0) {
                this._returnType = this.createChildNode(7);
            }
            return this._returnType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionSyntaxNode.prototype, "doubleArrow", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.doubleArrow, this, this.offsetAt(8), this.relativeIndexAt(8));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionSyntaxNode.prototype, "expr", {
        get: function () {
            if (this._expr === void 0) {
                var node = this.createChildNode(9);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expr = node;
            }
            return this._expr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArrowFunctionSyntaxNode.prototype, "count", {
        get: function () {
            return 10;
        },
        enumerable: false,
        configurable: true
    });
    ArrowFunctionSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitArrowFunction(this);
    };
    ArrowFunctionSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitArrowFunction(this);
    };
    ArrowFunctionSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 4:
                return this._parameters !== void 0 ? this._parameters : null;
            case 7:
                return this._returnType !== void 0 ? this._returnType : null;
            case 9:
                return this._expr !== void 0 ? this._expr : null;
            default:
                return null;
        }
    };
    ArrowFunctionSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 4:
                if (this._parameters === void 0) {
                    this._parameters = this.createChildNode(4);
                }
                return this._parameters;
            case 7:
                if (this._returnType === void 0) {
                    this._returnType = this.createChildNode(7);
                }
                return this._returnType;
            case 9:
                if (this._expr === void 0) {
                    var node = this.createChildNode(9);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expr = node;
                }
                return this._expr;
            default:
                return null;
        }
    };
    return ArrowFunctionSyntaxNode;
}(ExpressionSyntaxNode));
exports.ArrowFunctionSyntaxNode = ArrowFunctionSyntaxNode;
var AssignmentSyntaxNode = /** @class */ (function (_super) {
    __extends(AssignmentSyntaxNode, _super);
    function AssignmentSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._leftOperand = undefined;
        _this._rightOperand = undefined;
        return _this;
    }
    Object.defineProperty(AssignmentSyntaxNode.prototype, "leftOperand", {
        get: function () {
            if (this._leftOperand === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._leftOperand = node;
            }
            return this._leftOperand;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AssignmentSyntaxNode.prototype, "operator", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.operator, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AssignmentSyntaxNode.prototype, "ampersand", {
        get: function () {
            var token = this.node.ampersand;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AssignmentSyntaxNode.prototype, "rightOperand", {
        get: function () {
            if (this._rightOperand === void 0) {
                var node = this.createChildNode(3);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._rightOperand = node;
            }
            return this._rightOperand;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AssignmentSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    AssignmentSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitAssignmentExpression(this);
    };
    AssignmentSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitAssignmentExpression(this);
    };
    AssignmentSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._leftOperand !== void 0 ? this._leftOperand : null;
            case 3:
                return this._rightOperand !== void 0 ? this._rightOperand : null;
            default:
                return null;
        }
    };
    AssignmentSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._leftOperand === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._leftOperand = node;
                }
                return this._leftOperand;
            case 3:
                if (this._rightOperand === void 0) {
                    var node = this.createChildNode(3);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._rightOperand = node;
                }
                return this._rightOperand;
            default:
                return null;
        }
    };
    return AssignmentSyntaxNode;
}(ExpressionSyntaxNode));
exports.AssignmentSyntaxNode = AssignmentSyntaxNode;
var BinarySyntaxNode = /** @class */ (function (_super) {
    __extends(BinarySyntaxNode, _super);
    function BinarySyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._leftOperand = undefined;
        _this._rightOperand = undefined;
        return _this;
    }
    Object.defineProperty(BinarySyntaxNode.prototype, "leftOperand", {
        get: function () {
            if (this._leftOperand === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._leftOperand = node;
            }
            return this._leftOperand;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinarySyntaxNode.prototype, "operator", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.operator, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinarySyntaxNode.prototype, "rightOperand", {
        get: function () {
            if (this._rightOperand === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._rightOperand = node;
            }
            return this._rightOperand;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinarySyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    BinarySyntaxNode.prototype.accept = function (visitor) {
        visitor.visitBinaryExpression(this);
    };
    BinarySyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitBinaryExpression(this);
    };
    BinarySyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._leftOperand !== void 0 ? this._leftOperand : null;
            case 2:
                return this._rightOperand !== void 0 ? this._rightOperand : null;
            default:
                return null;
        }
    };
    BinarySyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._leftOperand === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._leftOperand = node;
                }
                return this._leftOperand;
            case 2:
                if (this._rightOperand === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._rightOperand = node;
                }
                return this._rightOperand;
            default:
                return null;
        }
    };
    return BinarySyntaxNode;
}(ExpressionSyntaxNode));
exports.BinarySyntaxNode = BinarySyntaxNode;
var BreakSyntaxNode = /** @class */ (function (_super) {
    __extends(BreakSyntaxNode, _super);
    function BreakSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._depth = undefined;
        return _this;
    }
    Object.defineProperty(BreakSyntaxNode.prototype, "breakKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.breakKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BreakSyntaxNode.prototype, "depth", {
        get: function () {
            if (this._depth === void 0) {
                this._depth = this.createChildNode(1);
            }
            return this._depth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BreakSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BreakSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    BreakSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitBreak(this);
    };
    BreakSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitBreak(this);
    };
    BreakSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._depth !== void 0 ? this._depth : null;
            default:
                return null;
        }
    };
    BreakSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._depth === void 0) {
                    this._depth = this.createChildNode(1);
                }
                return this._depth;
            default:
                return null;
        }
    };
    return BreakSyntaxNode;
}(JumpSyntaxNode));
exports.BreakSyntaxNode = BreakSyntaxNode;
var ClassConstantSyntaxNode = /** @class */ (function (_super) {
    __extends(ClassConstantSyntaxNode, _super);
    function ClassConstantSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._qualifier = undefined;
        return _this;
    }
    Object.defineProperty(ClassConstantSyntaxNode.prototype, "qualifier", {
        get: function () {
            if (this._qualifier === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._qualifier = node;
            }
            return this._qualifier;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantSyntaxNode.prototype, "doubleColon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.doubleColon, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantSyntaxNode.prototype, "identifier", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.identifier, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    ClassConstantSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitClassConstant(this);
    };
    ClassConstantSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClassConstant(this);
    };
    ClassConstantSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._qualifier !== void 0 ? this._qualifier : null;
            default:
                return null;
        }
    };
    ClassConstantSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._qualifier === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._qualifier = node;
                }
                return this._qualifier;
            default:
                return null;
        }
    };
    return ClassConstantSyntaxNode;
}(ScopedAccessSyntaxNode));
exports.ClassConstantSyntaxNode = ClassConstantSyntaxNode;
var ClassConstantDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(ClassConstantDeclarationSyntaxNode, _super);
    function ClassConstantDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._modifiers = undefined;
        _this._elements = undefined;
        return _this;
    }
    Object.defineProperty(ClassConstantDeclarationSyntaxNode.prototype, "modifiers", {
        get: function () {
            if (this._modifiers === void 0) {
                this._modifiers = this.createFirstChildNode();
            }
            return this._modifiers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantDeclarationSyntaxNode.prototype, "constKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.constKeyword, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantDeclarationSyntaxNode.prototype, "elements", {
        get: function () {
            if (this._elements === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._elements = node;
            }
            return this._elements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantDeclarationSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassConstantDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    ClassConstantDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitClassConstantDeclaration(this);
    };
    ClassConstantDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClassConstantDeclaration(this);
    };
    ClassConstantDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._modifiers !== void 0 ? this._modifiers : null;
            case 2:
                return this._elements !== void 0 ? this._elements : null;
            default:
                return null;
        }
    };
    ClassConstantDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._modifiers === void 0) {
                    this._modifiers = this.createFirstChildNode();
                }
                return this._modifiers;
            case 2:
                if (this._elements === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._elements = node;
                }
                return this._elements;
            default:
                return null;
        }
    };
    return ClassConstantDeclarationSyntaxNode;
}(StatementSyntaxNode));
exports.ClassConstantDeclarationSyntaxNode = ClassConstantDeclarationSyntaxNode;
var ClassDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(ClassDeclarationSyntaxNode, _super);
    function ClassDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._modifiers = undefined;
        _this._baseType = undefined;
        _this._interfaces = undefined;
        _this._members = undefined;
        return _this;
    }
    Object.defineProperty(ClassDeclarationSyntaxNode.prototype, "modifiers", {
        get: function () {
            if (this._modifiers === void 0) {
                this._modifiers = this.createFirstChildNode();
            }
            return this._modifiers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationSyntaxNode.prototype, "classKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.classKeyword, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationSyntaxNode.prototype, "identifier", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.identifier, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationSyntaxNode.prototype, "extendsKeyword", {
        get: function () {
            var token = this.node.extendsKeyword;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(3), this.relativeIndexAt(3));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationSyntaxNode.prototype, "baseType", {
        get: function () {
            if (this._baseType === void 0) {
                this._baseType = this.createChildNode(4);
            }
            return this._baseType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationSyntaxNode.prototype, "implementsKeyword", {
        get: function () {
            var token = this.node.implementsKeyword;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(5), this.relativeIndexAt(5));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationSyntaxNode.prototype, "interfaces", {
        get: function () {
            if (this._interfaces === void 0) {
                this._interfaces = this.createChildNode(6);
            }
            return this._interfaces;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationSyntaxNode.prototype, "openBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBrace, this, this.offsetAt(7), this.relativeIndexAt(7));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationSyntaxNode.prototype, "members", {
        get: function () {
            if (this._members === void 0) {
                this._members = this.createChildNode(8);
            }
            return this._members;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationSyntaxNode.prototype, "closeBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBrace, this, this.offsetAt(9), this.relativeIndexAt(9));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ClassDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 10;
        },
        enumerable: false,
        configurable: true
    });
    ClassDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitClassDeclaration(this);
    };
    ClassDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClassDeclaration(this);
    };
    ClassDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._modifiers !== void 0 ? this._modifiers : null;
            case 4:
                return this._baseType !== void 0 ? this._baseType : null;
            case 6:
                return this._interfaces !== void 0 ? this._interfaces : null;
            case 8:
                return this._members !== void 0 ? this._members : null;
            default:
                return null;
        }
    };
    ClassDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._modifiers === void 0) {
                    this._modifiers = this.createFirstChildNode();
                }
                return this._modifiers;
            case 4:
                if (this._baseType === void 0) {
                    this._baseType = this.createChildNode(4);
                }
                return this._baseType;
            case 6:
                if (this._interfaces === void 0) {
                    this._interfaces = this.createChildNode(6);
                }
                return this._interfaces;
            case 8:
                if (this._members === void 0) {
                    this._members = this.createChildNode(8);
                }
                return this._members;
            default:
                return null;
        }
    };
    return ClassDeclarationSyntaxNode;
}(TypeDeclarationSyntaxNode));
exports.ClassDeclarationSyntaxNode = ClassDeclarationSyntaxNode;
var CloneSyntaxNode = /** @class */ (function (_super) {
    __extends(CloneSyntaxNode, _super);
    function CloneSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(CloneSyntaxNode.prototype, "cloneKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.cloneKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CloneSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CloneSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    CloneSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitClone(this);
    };
    CloneSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitClone(this);
    };
    CloneSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    CloneSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._expression === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return CloneSyntaxNode;
}(ExpressionSyntaxNode));
exports.CloneSyntaxNode = CloneSyntaxNode;
var ConditionalSyntaxNode = /** @class */ (function (_super) {
    __extends(ConditionalSyntaxNode, _super);
    function ConditionalSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._condition = undefined;
        _this._trueExpr = undefined;
        _this._falseExpr = undefined;
        return _this;
    }
    Object.defineProperty(ConditionalSyntaxNode.prototype, "condition", {
        get: function () {
            if (this._condition === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._condition = node;
            }
            return this._condition;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionalSyntaxNode.prototype, "question", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.question, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionalSyntaxNode.prototype, "trueExpr", {
        get: function () {
            if (this._trueExpr === void 0) {
                this._trueExpr = this.createChildNode(2);
            }
            return this._trueExpr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionalSyntaxNode.prototype, "colon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.colon, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionalSyntaxNode.prototype, "falseExpr", {
        get: function () {
            if (this._falseExpr === void 0) {
                var node = this.createChildNode(4);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._falseExpr = node;
            }
            return this._falseExpr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConditionalSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    ConditionalSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitConditionalExpression(this);
    };
    ConditionalSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitConditionalExpression(this);
    };
    ConditionalSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._condition !== void 0 ? this._condition : null;
            case 2:
                return this._trueExpr !== void 0 ? this._trueExpr : null;
            case 4:
                return this._falseExpr !== void 0 ? this._falseExpr : null;
            default:
                return null;
        }
    };
    ConditionalSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._condition === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._condition = node;
                }
                return this._condition;
            case 2:
                if (this._trueExpr === void 0) {
                    this._trueExpr = this.createChildNode(2);
                }
                return this._trueExpr;
            case 4:
                if (this._falseExpr === void 0) {
                    var node = this.createChildNode(4);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._falseExpr = node;
                }
                return this._falseExpr;
            default:
                return null;
        }
    };
    return ConditionalSyntaxNode;
}(ExpressionSyntaxNode));
exports.ConditionalSyntaxNode = ConditionalSyntaxNode;
var ConstantSyntaxNode = /** @class */ (function (_super) {
    __extends(ConstantSyntaxNode, _super);
    function ConstantSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._name = undefined;
        return _this;
    }
    Object.defineProperty(ConstantSyntaxNode.prototype, "name", {
        get: function () {
            if (this._name === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._name = node;
            }
            return this._name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantSyntaxNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    ConstantSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitConstant(this);
    };
    ConstantSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitConstant(this);
    };
    ConstantSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._name !== void 0 ? this._name : null;
            default:
                return null;
        }
    };
    ConstantSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._name === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._name = node;
                }
                return this._name;
            default:
                return null;
        }
    };
    return ConstantSyntaxNode;
}(ExpressionSyntaxNode));
exports.ConstantSyntaxNode = ConstantSyntaxNode;
var ConstantDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(ConstantDeclarationSyntaxNode, _super);
    function ConstantDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._elements = undefined;
        return _this;
    }
    Object.defineProperty(ConstantDeclarationSyntaxNode.prototype, "constKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.constKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantDeclarationSyntaxNode.prototype, "elements", {
        get: function () {
            if (this._elements === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._elements = node;
            }
            return this._elements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantDeclarationSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConstantDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    ConstantDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitConstantDeclaration(this);
    };
    ConstantDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitConstantDeclaration(this);
    };
    ConstantDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._elements !== void 0 ? this._elements : null;
            default:
                return null;
        }
    };
    ConstantDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._elements === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._elements = node;
                }
                return this._elements;
            default:
                return null;
        }
    };
    return ConstantDeclarationSyntaxNode;
}(StatementSyntaxNode));
exports.ConstantDeclarationSyntaxNode = ConstantDeclarationSyntaxNode;
var ContinueSyntaxNode = /** @class */ (function (_super) {
    __extends(ContinueSyntaxNode, _super);
    function ContinueSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._depth = undefined;
        return _this;
    }
    Object.defineProperty(ContinueSyntaxNode.prototype, "continueKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.continueKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContinueSyntaxNode.prototype, "depth", {
        get: function () {
            if (this._depth === void 0) {
                this._depth = this.createChildNode(1);
            }
            return this._depth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContinueSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContinueSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    ContinueSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitContinue(this);
    };
    ContinueSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitContinue(this);
    };
    ContinueSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._depth !== void 0 ? this._depth : null;
            default:
                return null;
        }
    };
    ContinueSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._depth === void 0) {
                    this._depth = this.createChildNode(1);
                }
                return this._depth;
            default:
                return null;
        }
    };
    return ContinueSyntaxNode;
}(JumpSyntaxNode));
exports.ContinueSyntaxNode = ContinueSyntaxNode;
var DeclareSyntaxNode = /** @class */ (function (_super) {
    __extends(DeclareSyntaxNode, _super);
    function DeclareSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._directives = undefined;
        _this._statement = undefined;
        return _this;
    }
    Object.defineProperty(DeclareSyntaxNode.prototype, "declareKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.declareKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareSyntaxNode.prototype, "directives", {
        get: function () {
            if (this._directives === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._directives = node;
            }
            return this._directives;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareSyntaxNode.prototype, "statement", {
        get: function () {
            if (this._statement === void 0) {
                var node = this.createChildNode(4);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statement = node;
            }
            return this._statement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    DeclareSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitDeclare(this);
    };
    DeclareSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitDeclare(this);
    };
    DeclareSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._directives !== void 0 ? this._directives : null;
            case 4:
                return this._statement !== void 0 ? this._statement : null;
            default:
                return null;
        }
    };
    DeclareSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._directives === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._directives = node;
                }
                return this._directives;
            case 4:
                if (this._statement === void 0) {
                    var node = this.createChildNode(4);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statement = node;
                }
                return this._statement;
            default:
                return null;
        }
    };
    return DeclareSyntaxNode;
}(StatementSyntaxNode));
exports.DeclareSyntaxNode = DeclareSyntaxNode;
var DeclareBlockSyntaxNode = /** @class */ (function (_super) {
    __extends(DeclareBlockSyntaxNode, _super);
    function DeclareBlockSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._directives = undefined;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(DeclareBlockSyntaxNode.prototype, "declareKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.declareKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareBlockSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareBlockSyntaxNode.prototype, "directives", {
        get: function () {
            if (this._directives === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._directives = node;
            }
            return this._directives;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareBlockSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareBlockSyntaxNode.prototype, "colon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.colon, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareBlockSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createChildNode(5);
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareBlockSyntaxNode.prototype, "endDeclare", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.endDeclare, this, this.offsetAt(6), this.relativeIndexAt(6));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareBlockSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(7), this.relativeIndexAt(7));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DeclareBlockSyntaxNode.prototype, "count", {
        get: function () {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    DeclareBlockSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitDeclareBlock(this);
    };
    DeclareBlockSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitDeclareBlock(this);
    };
    DeclareBlockSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._directives !== void 0 ? this._directives : null;
            case 5:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    DeclareBlockSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._directives === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._directives = node;
                }
                return this._directives;
            case 5:
                if (this._statements === void 0) {
                    this._statements = this.createChildNode(5);
                }
                return this._statements;
            default:
                return null;
        }
    };
    return DeclareBlockSyntaxNode;
}(StatementSyntaxNode));
exports.DeclareBlockSyntaxNode = DeclareBlockSyntaxNode;
var DestructuringAssignmentSyntaxNode = /** @class */ (function (_super) {
    __extends(DestructuringAssignmentSyntaxNode, _super);
    function DestructuringAssignmentSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._unpackedList = undefined;
        _this._operand = undefined;
        return _this;
    }
    Object.defineProperty(DestructuringAssignmentSyntaxNode.prototype, "unpackedList", {
        get: function () {
            if (this._unpackedList === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._unpackedList = node;
            }
            return this._unpackedList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DestructuringAssignmentSyntaxNode.prototype, "operator", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.operator, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DestructuringAssignmentSyntaxNode.prototype, "operand", {
        get: function () {
            if (this._operand === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._operand = node;
            }
            return this._operand;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DestructuringAssignmentSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    DestructuringAssignmentSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitDestructuringAssignment(this);
    };
    DestructuringAssignmentSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitDestructuringAssignment(this);
    };
    DestructuringAssignmentSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._unpackedList !== void 0 ? this._unpackedList : null;
            case 2:
                return this._operand !== void 0 ? this._operand : null;
            default:
                return null;
        }
    };
    DestructuringAssignmentSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._unpackedList === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._unpackedList = node;
                }
                return this._unpackedList;
            case 2:
                if (this._operand === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._operand = node;
                }
                return this._operand;
            default:
                return null;
        }
    };
    return DestructuringAssignmentSyntaxNode;
}(ExpressionSyntaxNode));
exports.DestructuringAssignmentSyntaxNode = DestructuringAssignmentSyntaxNode;
var DoWhileSyntaxNode = /** @class */ (function (_super) {
    __extends(DoWhileSyntaxNode, _super);
    function DoWhileSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._statement = undefined;
        _this._condition = undefined;
        return _this;
    }
    Object.defineProperty(DoWhileSyntaxNode.prototype, "doKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.doKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoWhileSyntaxNode.prototype, "statement", {
        get: function () {
            if (this._statement === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statement = node;
            }
            return this._statement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoWhileSyntaxNode.prototype, "whileKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.whileKeyword, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoWhileSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoWhileSyntaxNode.prototype, "condition", {
        get: function () {
            if (this._condition === void 0) {
                var node = this.createChildNode(4);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._condition = node;
            }
            return this._condition;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoWhileSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(5), this.relativeIndexAt(5));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoWhileSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(6), this.relativeIndexAt(6));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DoWhileSyntaxNode.prototype, "count", {
        get: function () {
            return 7;
        },
        enumerable: false,
        configurable: true
    });
    DoWhileSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitDoWhile(this);
    };
    DoWhileSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitDoWhile(this);
    };
    DoWhileSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._statement !== void 0 ? this._statement : null;
            case 4:
                return this._condition !== void 0 ? this._condition : null;
            default:
                return null;
        }
    };
    DoWhileSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._statement === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statement = node;
                }
                return this._statement;
            case 4:
                if (this._condition === void 0) {
                    var node = this.createChildNode(4);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._condition = node;
                }
                return this._condition;
            default:
                return null;
        }
    };
    return DoWhileSyntaxNode;
}(IterationSyntaxNode));
exports.DoWhileSyntaxNode = DoWhileSyntaxNode;
var EchoSyntaxNode = /** @class */ (function (_super) {
    __extends(EchoSyntaxNode, _super);
    function EchoSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expressionList = undefined;
        return _this;
    }
    Object.defineProperty(EchoSyntaxNode.prototype, "echoKeyword", {
        get: function () {
            var token = this.node.echoKeyword;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(0), this.relativeIndexAt(0));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EchoSyntaxNode.prototype, "expressionList", {
        get: function () {
            if (this._expressionList === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expressionList = node;
            }
            return this._expressionList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EchoSyntaxNode.prototype, "semicolon", {
        get: function () {
            var token = this.node.semicolon;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EchoSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    EchoSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitEcho(this);
    };
    EchoSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitEcho(this);
    };
    EchoSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._expressionList !== void 0 ? this._expressionList : null;
            default:
                return null;
        }
    };
    EchoSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._expressionList === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expressionList = node;
                }
                return this._expressionList;
            default:
                return null;
        }
    };
    return EchoSyntaxNode;
}(StatementSyntaxNode));
exports.EchoSyntaxNode = EchoSyntaxNode;
var ElementAccessSyntaxNode = /** @class */ (function (_super) {
    __extends(ElementAccessSyntaxNode, _super);
    function ElementAccessSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._dereferencable = undefined;
        _this._index = undefined;
        return _this;
    }
    Object.defineProperty(ElementAccessSyntaxNode.prototype, "dereferencable", {
        get: function () {
            if (this._dereferencable === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._dereferencable = node;
            }
            return this._dereferencable;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElementAccessSyntaxNode.prototype, "openBraceOrBracket", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBraceOrBracket, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElementAccessSyntaxNode.prototype, "index", {
        get: function () {
            if (this._index === void 0) {
                this._index = this.createChildNode(2);
            }
            return this._index;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElementAccessSyntaxNode.prototype, "closeBraceOrBracket", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBraceOrBracket, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ElementAccessSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    ElementAccessSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitElementAccess(this);
    };
    ElementAccessSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitElementAccess(this);
    };
    ElementAccessSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._dereferencable !== void 0 ? this._dereferencable : null;
            case 2:
                return this._index !== void 0 ? this._index : null;
            default:
                return null;
        }
    };
    ElementAccessSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._dereferencable === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._dereferencable = node;
                }
                return this._dereferencable;
            case 2:
                if (this._index === void 0) {
                    this._index = this.createChildNode(2);
                }
                return this._index;
            default:
                return null;
        }
    };
    return ElementAccessSyntaxNode;
}(ExpressionSyntaxNode));
exports.ElementAccessSyntaxNode = ElementAccessSyntaxNode;
var EmptyIntrinsicSyntaxNode = /** @class */ (function (_super) {
    __extends(EmptyIntrinsicSyntaxNode, _super);
    function EmptyIntrinsicSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(EmptyIntrinsicSyntaxNode.prototype, "emptyKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.emptyKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmptyIntrinsicSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmptyIntrinsicSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmptyIntrinsicSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmptyIntrinsicSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    EmptyIntrinsicSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitEmptyIntrinsic(this);
    };
    EmptyIntrinsicSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitEmptyIntrinsic(this);
    };
    EmptyIntrinsicSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    EmptyIntrinsicSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expression === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return EmptyIntrinsicSyntaxNode;
}(IntrinsicSyntaxNode));
exports.EmptyIntrinsicSyntaxNode = EmptyIntrinsicSyntaxNode;
var ErrorControlSyntaxNode = /** @class */ (function (_super) {
    __extends(ErrorControlSyntaxNode, _super);
    function ErrorControlSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(ErrorControlSyntaxNode.prototype, "at", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.at, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ErrorControlSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ErrorControlSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    ErrorControlSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitErrorControl(this);
    };
    ErrorControlSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitErrorControl(this);
    };
    ErrorControlSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    ErrorControlSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._expression === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return ErrorControlSyntaxNode;
}(ExpressionSyntaxNode));
exports.ErrorControlSyntaxNode = ErrorControlSyntaxNode;
var EvalIntrinsicSyntaxNode = /** @class */ (function (_super) {
    __extends(EvalIntrinsicSyntaxNode, _super);
    function EvalIntrinsicSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(EvalIntrinsicSyntaxNode.prototype, "evalKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.evalKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvalIntrinsicSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvalIntrinsicSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvalIntrinsicSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvalIntrinsicSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    EvalIntrinsicSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitEvalIntrinsic(this);
    };
    EvalIntrinsicSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitEvalIntrinsic(this);
    };
    EvalIntrinsicSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    EvalIntrinsicSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expression === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return EvalIntrinsicSyntaxNode;
}(IntrinsicSyntaxNode));
exports.EvalIntrinsicSyntaxNode = EvalIntrinsicSyntaxNode;
var ExitIntrinsicSyntaxNode = /** @class */ (function (_super) {
    __extends(ExitIntrinsicSyntaxNode, _super);
    function ExitIntrinsicSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(ExitIntrinsicSyntaxNode.prototype, "exitOrDieKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.exitOrDieKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExitIntrinsicSyntaxNode.prototype, "openParen", {
        get: function () {
            var token = this.node.openParen;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(1), this.relativeIndexAt(1));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExitIntrinsicSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                this._expression = this.createChildNode(2);
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExitIntrinsicSyntaxNode.prototype, "closeParen", {
        get: function () {
            var token = this.node.closeParen;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(3), this.relativeIndexAt(3));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExitIntrinsicSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    ExitIntrinsicSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitExitIntrinsic(this);
    };
    ExitIntrinsicSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitExitIntrinsic(this);
    };
    ExitIntrinsicSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    ExitIntrinsicSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expression === void 0) {
                    this._expression = this.createChildNode(2);
                }
                return this._expression;
            default:
                return null;
        }
    };
    return ExitIntrinsicSyntaxNode;
}(IntrinsicSyntaxNode));
exports.ExitIntrinsicSyntaxNode = ExitIntrinsicSyntaxNode;
var ExpressionGroupSyntaxNode = /** @class */ (function (_super) {
    __extends(ExpressionGroupSyntaxNode, _super);
    function ExpressionGroupSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(ExpressionGroupSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionGroupSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionGroupSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionGroupSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    ExpressionGroupSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitExpressionGroup(this);
    };
    ExpressionGroupSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitExpressionGroup(this);
    };
    ExpressionGroupSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    ExpressionGroupSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._expression === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return ExpressionGroupSyntaxNode;
}(ExpressionSyntaxNode));
exports.ExpressionGroupSyntaxNode = ExpressionGroupSyntaxNode;
var ExpressionStatementSyntaxNode = /** @class */ (function (_super) {
    __extends(ExpressionStatementSyntaxNode, _super);
    function ExpressionStatementSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(ExpressionStatementSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                this._expression = this.createFirstChildNode();
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionStatementSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExpressionStatementSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    ExpressionStatementSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitExpressionStatement(this);
    };
    ExpressionStatementSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitExpressionStatement(this);
    };
    ExpressionStatementSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    ExpressionStatementSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._expression === void 0) {
                    this._expression = this.createFirstChildNode();
                }
                return this._expression;
            default:
                return null;
        }
    };
    return ExpressionStatementSyntaxNode;
}(StatementSyntaxNode));
exports.ExpressionStatementSyntaxNode = ExpressionStatementSyntaxNode;
var FlexibleHeredocTemplateSyntaxNode = /** @class */ (function (_super) {
    __extends(FlexibleHeredocTemplateSyntaxNode, _super);
    function FlexibleHeredocTemplateSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._flexibleElements = undefined;
        return _this;
    }
    Object.defineProperty(FlexibleHeredocTemplateSyntaxNode.prototype, "heredocStart", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.heredocStart, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FlexibleHeredocTemplateSyntaxNode.prototype, "flexibleElements", {
        get: function () {
            if (this._flexibleElements === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._flexibleElements = node;
            }
            return this._flexibleElements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FlexibleHeredocTemplateSyntaxNode.prototype, "heredocEnd", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.heredocEnd, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FlexibleHeredocTemplateSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    FlexibleHeredocTemplateSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitFlexibleHeredocTemplate(this);
    };
    FlexibleHeredocTemplateSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFlexibleHeredocTemplate(this);
    };
    FlexibleHeredocTemplateSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._flexibleElements !== void 0 ? this._flexibleElements : null;
            default:
                return null;
        }
    };
    FlexibleHeredocTemplateSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._flexibleElements === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._flexibleElements = node;
                }
                return this._flexibleElements;
            default:
                return null;
        }
    };
    return FlexibleHeredocTemplateSyntaxNode;
}(ExpressionSyntaxNode));
exports.FlexibleHeredocTemplateSyntaxNode = FlexibleHeredocTemplateSyntaxNode;
var ForSyntaxNode = /** @class */ (function (_super) {
    __extends(ForSyntaxNode, _super);
    function ForSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._initializers = undefined;
        _this._conditions = undefined;
        _this._incrementors = undefined;
        _this._statement = undefined;
        return _this;
    }
    Object.defineProperty(ForSyntaxNode.prototype, "forKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.forKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForSyntaxNode.prototype, "initializers", {
        get: function () {
            if (this._initializers === void 0) {
                this._initializers = this.createChildNode(2);
            }
            return this._initializers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForSyntaxNode.prototype, "firstSemicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.firstSemicolon, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForSyntaxNode.prototype, "conditions", {
        get: function () {
            if (this._conditions === void 0) {
                this._conditions = this.createChildNode(4);
            }
            return this._conditions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForSyntaxNode.prototype, "secondSemicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.secondSemicolon, this, this.offsetAt(5), this.relativeIndexAt(5));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForSyntaxNode.prototype, "incrementors", {
        get: function () {
            if (this._incrementors === void 0) {
                this._incrementors = this.createChildNode(6);
            }
            return this._incrementors;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(7), this.relativeIndexAt(7));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForSyntaxNode.prototype, "statement", {
        get: function () {
            if (this._statement === void 0) {
                var node = this.createChildNode(8);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statement = node;
            }
            return this._statement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForSyntaxNode.prototype, "count", {
        get: function () {
            return 9;
        },
        enumerable: false,
        configurable: true
    });
    ForSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitFor(this);
    };
    ForSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFor(this);
    };
    ForSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._initializers !== void 0 ? this._initializers : null;
            case 4:
                return this._conditions !== void 0 ? this._conditions : null;
            case 6:
                return this._incrementors !== void 0 ? this._incrementors : null;
            case 8:
                return this._statement !== void 0 ? this._statement : null;
            default:
                return null;
        }
    };
    ForSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._initializers === void 0) {
                    this._initializers = this.createChildNode(2);
                }
                return this._initializers;
            case 4:
                if (this._conditions === void 0) {
                    this._conditions = this.createChildNode(4);
                }
                return this._conditions;
            case 6:
                if (this._incrementors === void 0) {
                    this._incrementors = this.createChildNode(6);
                }
                return this._incrementors;
            case 8:
                if (this._statement === void 0) {
                    var node = this.createChildNode(8);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statement = node;
                }
                return this._statement;
            default:
                return null;
        }
    };
    return ForSyntaxNode;
}(IterationSyntaxNode));
exports.ForSyntaxNode = ForSyntaxNode;
var ForBlockSyntaxNode = /** @class */ (function (_super) {
    __extends(ForBlockSyntaxNode, _super);
    function ForBlockSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._initializers = undefined;
        _this._conditions = undefined;
        _this._incrementors = undefined;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(ForBlockSyntaxNode.prototype, "forKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.forKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "initializers", {
        get: function () {
            if (this._initializers === void 0) {
                this._initializers = this.createChildNode(2);
            }
            return this._initializers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "firstSemicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.firstSemicolon, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "conditions", {
        get: function () {
            if (this._conditions === void 0) {
                this._conditions = this.createChildNode(4);
            }
            return this._conditions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "secondSemicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.secondSemicolon, this, this.offsetAt(5), this.relativeIndexAt(5));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "incrementors", {
        get: function () {
            if (this._incrementors === void 0) {
                this._incrementors = this.createChildNode(6);
            }
            return this._incrementors;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(7), this.relativeIndexAt(7));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "colon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.colon, this, this.offsetAt(8), this.relativeIndexAt(8));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createChildNode(9);
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "endForKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.endForKeyword, this, this.offsetAt(10), this.relativeIndexAt(10));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(11), this.relativeIndexAt(11));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForBlockSyntaxNode.prototype, "count", {
        get: function () {
            return 12;
        },
        enumerable: false,
        configurable: true
    });
    ForBlockSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitForBlock(this);
    };
    ForBlockSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitForBlock(this);
    };
    ForBlockSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._initializers !== void 0 ? this._initializers : null;
            case 4:
                return this._conditions !== void 0 ? this._conditions : null;
            case 6:
                return this._incrementors !== void 0 ? this._incrementors : null;
            case 9:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    ForBlockSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._initializers === void 0) {
                    this._initializers = this.createChildNode(2);
                }
                return this._initializers;
            case 4:
                if (this._conditions === void 0) {
                    this._conditions = this.createChildNode(4);
                }
                return this._conditions;
            case 6:
                if (this._incrementors === void 0) {
                    this._incrementors = this.createChildNode(6);
                }
                return this._incrementors;
            case 9:
                if (this._statements === void 0) {
                    this._statements = this.createChildNode(9);
                }
                return this._statements;
            default:
                return null;
        }
    };
    return ForBlockSyntaxNode;
}(IterationSyntaxNode));
exports.ForBlockSyntaxNode = ForBlockSyntaxNode;
var ForEachSyntaxNode = /** @class */ (function (_super) {
    __extends(ForEachSyntaxNode, _super);
    function ForEachSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._source = undefined;
        _this._key = undefined;
        _this._value = undefined;
        _this._statement = undefined;
        return _this;
    }
    Object.defineProperty(ForEachSyntaxNode.prototype, "forEachKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.forEachKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachSyntaxNode.prototype, "source", {
        get: function () {
            if (this._source === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._source = node;
            }
            return this._source;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachSyntaxNode.prototype, "asKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.asKeyword, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachSyntaxNode.prototype, "key", {
        get: function () {
            if (this._key === void 0) {
                this._key = this.createChildNode(4);
            }
            return this._key;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachSyntaxNode.prototype, "doubleArrow", {
        get: function () {
            var token = this.node.doubleArrow;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(5), this.relativeIndexAt(5));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachSyntaxNode.prototype, "ampersand", {
        get: function () {
            var token = this.node.ampersand;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(6), this.relativeIndexAt(6));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachSyntaxNode.prototype, "value", {
        get: function () {
            if (this._value === void 0) {
                var node = this.createChildNode(7);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._value = node;
            }
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(8), this.relativeIndexAt(8));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachSyntaxNode.prototype, "statement", {
        get: function () {
            if (this._statement === void 0) {
                var node = this.createChildNode(9);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statement = node;
            }
            return this._statement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachSyntaxNode.prototype, "count", {
        get: function () {
            return 10;
        },
        enumerable: false,
        configurable: true
    });
    ForEachSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitForEach(this);
    };
    ForEachSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitForEach(this);
    };
    ForEachSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._source !== void 0 ? this._source : null;
            case 4:
                return this._key !== void 0 ? this._key : null;
            case 7:
                return this._value !== void 0 ? this._value : null;
            case 9:
                return this._statement !== void 0 ? this._statement : null;
            default:
                return null;
        }
    };
    ForEachSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._source === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._source = node;
                }
                return this._source;
            case 4:
                if (this._key === void 0) {
                    this._key = this.createChildNode(4);
                }
                return this._key;
            case 7:
                if (this._value === void 0) {
                    var node = this.createChildNode(7);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._value = node;
                }
                return this._value;
            case 9:
                if (this._statement === void 0) {
                    var node = this.createChildNode(9);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statement = node;
                }
                return this._statement;
            default:
                return null;
        }
    };
    return ForEachSyntaxNode;
}(IterationSyntaxNode));
exports.ForEachSyntaxNode = ForEachSyntaxNode;
var ForEachBlockSyntaxNode = /** @class */ (function (_super) {
    __extends(ForEachBlockSyntaxNode, _super);
    function ForEachBlockSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._source = undefined;
        _this._key = undefined;
        _this._value = undefined;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "forEachKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.forEachKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "source", {
        get: function () {
            if (this._source === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._source = node;
            }
            return this._source;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "asKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.asKeyword, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "key", {
        get: function () {
            if (this._key === void 0) {
                this._key = this.createChildNode(4);
            }
            return this._key;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "doubleArrow", {
        get: function () {
            var token = this.node.doubleArrow;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(5), this.relativeIndexAt(5));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "ampersand", {
        get: function () {
            var token = this.node.ampersand;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(6), this.relativeIndexAt(6));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "value", {
        get: function () {
            if (this._value === void 0) {
                var node = this.createChildNode(7);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._value = node;
            }
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(8), this.relativeIndexAt(8));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "colon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.colon, this, this.offsetAt(9), this.relativeIndexAt(9));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createChildNode(10);
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "endForEach", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.endForEach, this, this.offsetAt(11), this.relativeIndexAt(11));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(12), this.relativeIndexAt(12));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ForEachBlockSyntaxNode.prototype, "count", {
        get: function () {
            return 13;
        },
        enumerable: false,
        configurable: true
    });
    ForEachBlockSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitForEachBlock(this);
    };
    ForEachBlockSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitForEachBlock(this);
    };
    ForEachBlockSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._source !== void 0 ? this._source : null;
            case 4:
                return this._key !== void 0 ? this._key : null;
            case 7:
                return this._value !== void 0 ? this._value : null;
            case 10:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    ForEachBlockSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._source === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._source = node;
                }
                return this._source;
            case 4:
                if (this._key === void 0) {
                    this._key = this.createChildNode(4);
                }
                return this._key;
            case 7:
                if (this._value === void 0) {
                    var node = this.createChildNode(7);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._value = node;
                }
                return this._value;
            case 10:
                if (this._statements === void 0) {
                    this._statements = this.createChildNode(10);
                }
                return this._statements;
            default:
                return null;
        }
    };
    return ForEachBlockSyntaxNode;
}(IterationSyntaxNode));
exports.ForEachBlockSyntaxNode = ForEachBlockSyntaxNode;
var FullyQualifiedNameSyntaxNode = /** @class */ (function (_super) {
    __extends(FullyQualifiedNameSyntaxNode, _super);
    function FullyQualifiedNameSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._namespaceName = undefined;
        return _this;
    }
    Object.defineProperty(FullyQualifiedNameSyntaxNode.prototype, "leadingBackslash", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.leadingBackslash, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullyQualifiedNameSyntaxNode.prototype, "namespaceName", {
        get: function () {
            if (this._namespaceName === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._namespaceName = node;
            }
            return this._namespaceName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FullyQualifiedNameSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    FullyQualifiedNameSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitFullyQualifiedName(this);
    };
    FullyQualifiedNameSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFullyQualifiedName(this);
    };
    FullyQualifiedNameSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._namespaceName !== void 0 ? this._namespaceName : null;
            default:
                return null;
        }
    };
    FullyQualifiedNameSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._namespaceName === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._namespaceName = node;
                }
                return this._namespaceName;
            default:
                return null;
        }
    };
    return FullyQualifiedNameSyntaxNode;
}(NameSyntaxNode));
exports.FullyQualifiedNameSyntaxNode = FullyQualifiedNameSyntaxNode;
var FunctionDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(FunctionDeclarationSyntaxNode, _super);
    function FunctionDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._parameters = undefined;
        _this._returnType = undefined;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(FunctionDeclarationSyntaxNode.prototype, "functionKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.functionKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionDeclarationSyntaxNode.prototype, "ampersand", {
        get: function () {
            var token = this.node.ampersand;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(1), this.relativeIndexAt(1));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionDeclarationSyntaxNode.prototype, "identifier", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.identifier, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionDeclarationSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionDeclarationSyntaxNode.prototype, "parameters", {
        get: function () {
            if (this._parameters === void 0) {
                this._parameters = this.createChildNode(4);
            }
            return this._parameters;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionDeclarationSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(5), this.relativeIndexAt(5));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionDeclarationSyntaxNode.prototype, "colon", {
        get: function () {
            var token = this.node.colon;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(6), this.relativeIndexAt(6));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionDeclarationSyntaxNode.prototype, "returnType", {
        get: function () {
            if (this._returnType === void 0) {
                this._returnType = this.createChildNode(7);
            }
            return this._returnType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionDeclarationSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                var node = this.createChildNode(8);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statements = node;
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 9;
        },
        enumerable: false,
        configurable: true
    });
    FunctionDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitFunctionDeclaration(this);
    };
    FunctionDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFunctionDeclaration(this);
    };
    FunctionDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 4:
                return this._parameters !== void 0 ? this._parameters : null;
            case 7:
                return this._returnType !== void 0 ? this._returnType : null;
            case 8:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    FunctionDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 4:
                if (this._parameters === void 0) {
                    this._parameters = this.createChildNode(4);
                }
                return this._parameters;
            case 7:
                if (this._returnType === void 0) {
                    this._returnType = this.createChildNode(7);
                }
                return this._returnType;
            case 8:
                if (this._statements === void 0) {
                    var node = this.createChildNode(8);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statements = node;
                }
                return this._statements;
            default:
                return null;
        }
    };
    return FunctionDeclarationSyntaxNode;
}(StatementSyntaxNode));
exports.FunctionDeclarationSyntaxNode = FunctionDeclarationSyntaxNode;
var FunctionInvocationSyntaxNode = /** @class */ (function (_super) {
    __extends(FunctionInvocationSyntaxNode, _super);
    function FunctionInvocationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._reference = undefined;
        _this._argumentList = undefined;
        return _this;
    }
    Object.defineProperty(FunctionInvocationSyntaxNode.prototype, "reference", {
        get: function () {
            if (this._reference === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._reference = node;
            }
            return this._reference;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionInvocationSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionInvocationSyntaxNode.prototype, "argumentList", {
        get: function () {
            if (this._argumentList === void 0) {
                this._argumentList = this.createChildNode(2);
            }
            return this._argumentList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionInvocationSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionInvocationSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    FunctionInvocationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitFunctionInvocation(this);
    };
    FunctionInvocationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitFunctionInvocation(this);
    };
    FunctionInvocationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._reference !== void 0 ? this._reference : null;
            case 2:
                return this._argumentList !== void 0 ? this._argumentList : null;
            default:
                return null;
        }
    };
    FunctionInvocationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._reference === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._reference = node;
                }
                return this._reference;
            case 2:
                if (this._argumentList === void 0) {
                    this._argumentList = this.createChildNode(2);
                }
                return this._argumentList;
            default:
                return null;
        }
    };
    return FunctionInvocationSyntaxNode;
}(InvocationSyntaxNode));
exports.FunctionInvocationSyntaxNode = FunctionInvocationSyntaxNode;
var GlobalSyntaxNode = /** @class */ (function (_super) {
    __extends(GlobalSyntaxNode, _super);
    function GlobalSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._variables = undefined;
        return _this;
    }
    Object.defineProperty(GlobalSyntaxNode.prototype, "globalKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.globalKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GlobalSyntaxNode.prototype, "variables", {
        get: function () {
            if (this._variables === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._variables = node;
            }
            return this._variables;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GlobalSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GlobalSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    GlobalSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitGlobalDeclaration(this);
    };
    GlobalSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitGlobalDeclaration(this);
    };
    GlobalSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._variables !== void 0 ? this._variables : null;
            default:
                return null;
        }
    };
    GlobalSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._variables === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._variables = node;
                }
                return this._variables;
            default:
                return null;
        }
    };
    return GlobalSyntaxNode;
}(StatementSyntaxNode));
exports.GlobalSyntaxNode = GlobalSyntaxNode;
var GoToSyntaxNode = /** @class */ (function (_super) {
    __extends(GoToSyntaxNode, _super);
    function GoToSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    Object.defineProperty(GoToSyntaxNode.prototype, "gotoKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.gotoKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GoToSyntaxNode.prototype, "label", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.label, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GoToSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GoToSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    GoToSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitGoTo(this);
    };
    GoToSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitGoTo(this);
    };
    GoToSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    GoToSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    return GoToSyntaxNode;
}(JumpSyntaxNode));
exports.GoToSyntaxNode = GoToSyntaxNode;
var HaltCompilerSyntaxNode = /** @class */ (function (_super) {
    __extends(HaltCompilerSyntaxNode, _super);
    function HaltCompilerSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    Object.defineProperty(HaltCompilerSyntaxNode.prototype, "haltCompilerKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.haltCompilerKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HaltCompilerSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HaltCompilerSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HaltCompilerSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HaltCompilerSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    HaltCompilerSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitHaltCompiler(this);
    };
    HaltCompilerSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitHaltCompiler(this);
    };
    HaltCompilerSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    HaltCompilerSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    return HaltCompilerSyntaxNode;
}(StatementSyntaxNode));
exports.HaltCompilerSyntaxNode = HaltCompilerSyntaxNode;
var HeredocTemplateSyntaxNode = /** @class */ (function (_super) {
    __extends(HeredocTemplateSyntaxNode, _super);
    function HeredocTemplateSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._template = undefined;
        return _this;
    }
    Object.defineProperty(HeredocTemplateSyntaxNode.prototype, "heredocStart", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.heredocStart, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeredocTemplateSyntaxNode.prototype, "template", {
        get: function () {
            if (this._template === void 0) {
                this._template = this.createChildNode(1);
            }
            return this._template;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeredocTemplateSyntaxNode.prototype, "heredocEnd", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.heredocEnd, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeredocTemplateSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    HeredocTemplateSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitHeredocTemplate(this);
    };
    HeredocTemplateSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitHeredocTemplate(this);
    };
    HeredocTemplateSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._template !== void 0 ? this._template : null;
            default:
                return null;
        }
    };
    HeredocTemplateSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._template === void 0) {
                    this._template = this.createChildNode(1);
                }
                return this._template;
            default:
                return null;
        }
    };
    return HeredocTemplateSyntaxNode;
}(ExpressionSyntaxNode));
exports.HeredocTemplateSyntaxNode = HeredocTemplateSyntaxNode;
var IfSyntaxNode = /** @class */ (function (_super) {
    __extends(IfSyntaxNode, _super);
    function IfSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._condition = undefined;
        _this._statement = undefined;
        _this._elseIfClauses = undefined;
        _this._elseClause = undefined;
        return _this;
    }
    Object.defineProperty(IfSyntaxNode.prototype, "ifKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.ifKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfSyntaxNode.prototype, "condition", {
        get: function () {
            if (this._condition === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._condition = node;
            }
            return this._condition;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfSyntaxNode.prototype, "statement", {
        get: function () {
            if (this._statement === void 0) {
                var node = this.createChildNode(4);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statement = node;
            }
            return this._statement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfSyntaxNode.prototype, "elseIfClauses", {
        get: function () {
            if (this._elseIfClauses === void 0) {
                this._elseIfClauses = this.createChildNode(5);
            }
            return this._elseIfClauses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfSyntaxNode.prototype, "elseClause", {
        get: function () {
            if (this._elseClause === void 0) {
                this._elseClause = this.createChildNode(6);
            }
            return this._elseClause;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfSyntaxNode.prototype, "count", {
        get: function () {
            return 7;
        },
        enumerable: false,
        configurable: true
    });
    IfSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitIf(this);
    };
    IfSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIf(this);
    };
    IfSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._condition !== void 0 ? this._condition : null;
            case 4:
                return this._statement !== void 0 ? this._statement : null;
            case 5:
                return this._elseIfClauses !== void 0 ? this._elseIfClauses : null;
            case 6:
                return this._elseClause !== void 0 ? this._elseClause : null;
            default:
                return null;
        }
    };
    IfSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._condition === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._condition = node;
                }
                return this._condition;
            case 4:
                if (this._statement === void 0) {
                    var node = this.createChildNode(4);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statement = node;
                }
                return this._statement;
            case 5:
                if (this._elseIfClauses === void 0) {
                    this._elseIfClauses = this.createChildNode(5);
                }
                return this._elseIfClauses;
            case 6:
                if (this._elseClause === void 0) {
                    this._elseClause = this.createChildNode(6);
                }
                return this._elseClause;
            default:
                return null;
        }
    };
    return IfSyntaxNode;
}(SelectionSyntaxNode));
exports.IfSyntaxNode = IfSyntaxNode;
var IfBlockSyntaxNode = /** @class */ (function (_super) {
    __extends(IfBlockSyntaxNode, _super);
    function IfBlockSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._condition = undefined;
        _this._statements = undefined;
        _this._elseIfClauses = undefined;
        _this._elseClause = undefined;
        return _this;
    }
    Object.defineProperty(IfBlockSyntaxNode.prototype, "ifKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.ifKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockSyntaxNode.prototype, "condition", {
        get: function () {
            if (this._condition === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._condition = node;
            }
            return this._condition;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockSyntaxNode.prototype, "colon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.colon, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createChildNode(5);
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockSyntaxNode.prototype, "elseIfClauses", {
        get: function () {
            if (this._elseIfClauses === void 0) {
                this._elseIfClauses = this.createChildNode(6);
            }
            return this._elseIfClauses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockSyntaxNode.prototype, "elseClause", {
        get: function () {
            if (this._elseClause === void 0) {
                this._elseClause = this.createChildNode(7);
            }
            return this._elseClause;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockSyntaxNode.prototype, "endIfKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.endIfKeyword, this, this.offsetAt(8), this.relativeIndexAt(8));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(9), this.relativeIndexAt(9));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IfBlockSyntaxNode.prototype, "count", {
        get: function () {
            return 10;
        },
        enumerable: false,
        configurable: true
    });
    IfBlockSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitIfBlock(this);
    };
    IfBlockSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIfBlock(this);
    };
    IfBlockSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._condition !== void 0 ? this._condition : null;
            case 5:
                return this._statements !== void 0 ? this._statements : null;
            case 6:
                return this._elseIfClauses !== void 0 ? this._elseIfClauses : null;
            case 7:
                return this._elseClause !== void 0 ? this._elseClause : null;
            default:
                return null;
        }
    };
    IfBlockSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._condition === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._condition = node;
                }
                return this._condition;
            case 5:
                if (this._statements === void 0) {
                    this._statements = this.createChildNode(5);
                }
                return this._statements;
            case 6:
                if (this._elseIfClauses === void 0) {
                    this._elseIfClauses = this.createChildNode(6);
                }
                return this._elseIfClauses;
            case 7:
                if (this._elseClause === void 0) {
                    this._elseClause = this.createChildNode(7);
                }
                return this._elseClause;
            default:
                return null;
        }
    };
    return IfBlockSyntaxNode;
}(SelectionSyntaxNode));
exports.IfBlockSyntaxNode = IfBlockSyntaxNode;
var IncompleteMemberSyntaxNode = /** @class */ (function (_super) {
    __extends(IncompleteMemberSyntaxNode, _super);
    function IncompleteMemberSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._modifiers = undefined;
        return _this;
    }
    Object.defineProperty(IncompleteMemberSyntaxNode.prototype, "modifiers", {
        get: function () {
            if (this._modifiers === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._modifiers = node;
            }
            return this._modifiers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IncompleteMemberSyntaxNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    IncompleteMemberSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitIncompleteMember(this);
    };
    IncompleteMemberSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIncompleteMember(this);
    };
    IncompleteMemberSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._modifiers !== void 0 ? this._modifiers : null;
            default:
                return null;
        }
    };
    IncompleteMemberSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._modifiers === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._modifiers = node;
                }
                return this._modifiers;
            default:
                return null;
        }
    };
    return IncompleteMemberSyntaxNode;
}(StatementSyntaxNode));
exports.IncompleteMemberSyntaxNode = IncompleteMemberSyntaxNode;
var IndirectMemberAccessSyntaxNode = /** @class */ (function (_super) {
    __extends(IndirectMemberAccessSyntaxNode, _super);
    function IndirectMemberAccessSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._dereferencable = undefined;
        _this._member = undefined;
        return _this;
    }
    Object.defineProperty(IndirectMemberAccessSyntaxNode.prototype, "dereferencable", {
        get: function () {
            if (this._dereferencable === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._dereferencable = node;
            }
            return this._dereferencable;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMemberAccessSyntaxNode.prototype, "objectOperator", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.objectOperator, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMemberAccessSyntaxNode.prototype, "openBrace", {
        get: function () {
            var token = this.node.openBrace;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMemberAccessSyntaxNode.prototype, "member", {
        get: function () {
            if (this._member === void 0) {
                var node = this.createChildNode(3);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._member = node;
            }
            return this._member;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMemberAccessSyntaxNode.prototype, "closeBrace", {
        get: function () {
            var token = this.node.closeBrace;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(4), this.relativeIndexAt(4));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMemberAccessSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    IndirectMemberAccessSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitMemberAccess(this);
    };
    IndirectMemberAccessSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMemberAccess(this);
    };
    IndirectMemberAccessSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._dereferencable !== void 0 ? this._dereferencable : null;
            case 3:
                return this._member !== void 0 ? this._member : null;
            default:
                return null;
        }
    };
    IndirectMemberAccessSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._dereferencable === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._dereferencable = node;
                }
                return this._dereferencable;
            case 3:
                if (this._member === void 0) {
                    var node = this.createChildNode(3);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._member = node;
                }
                return this._member;
            default:
                return null;
        }
    };
    return IndirectMemberAccessSyntaxNode;
}(MemberAccessSyntaxNode));
exports.IndirectMemberAccessSyntaxNode = IndirectMemberAccessSyntaxNode;
var IndirectMethodInvocationSyntaxNode = /** @class */ (function (_super) {
    __extends(IndirectMethodInvocationSyntaxNode, _super);
    function IndirectMethodInvocationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._dereferenceable = undefined;
        _this._member = undefined;
        _this._argumentList = undefined;
        return _this;
    }
    Object.defineProperty(IndirectMethodInvocationSyntaxNode.prototype, "dereferenceable", {
        get: function () {
            if (this._dereferenceable === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._dereferenceable = node;
            }
            return this._dereferenceable;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMethodInvocationSyntaxNode.prototype, "objectOperator", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.objectOperator, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMethodInvocationSyntaxNode.prototype, "openBrace", {
        get: function () {
            var token = this.node.openBrace;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMethodInvocationSyntaxNode.prototype, "member", {
        get: function () {
            if (this._member === void 0) {
                var node = this.createChildNode(3);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._member = node;
            }
            return this._member;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMethodInvocationSyntaxNode.prototype, "closeBrace", {
        get: function () {
            var token = this.node.closeBrace;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(4), this.relativeIndexAt(4));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMethodInvocationSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(5), this.relativeIndexAt(5));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMethodInvocationSyntaxNode.prototype, "argumentList", {
        get: function () {
            if (this._argumentList === void 0) {
                this._argumentList = this.createChildNode(6);
            }
            return this._argumentList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMethodInvocationSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(7), this.relativeIndexAt(7));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectMethodInvocationSyntaxNode.prototype, "count", {
        get: function () {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    IndirectMethodInvocationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitMethodInvocation(this);
    };
    IndirectMethodInvocationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMethodInvocation(this);
    };
    IndirectMethodInvocationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._dereferenceable !== void 0 ? this._dereferenceable : null;
            case 3:
                return this._member !== void 0 ? this._member : null;
            case 6:
                return this._argumentList !== void 0 ? this._argumentList : null;
            default:
                return null;
        }
    };
    IndirectMethodInvocationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._dereferenceable === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._dereferenceable = node;
                }
                return this._dereferenceable;
            case 3:
                if (this._member === void 0) {
                    var node = this.createChildNode(3);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._member = node;
                }
                return this._member;
            case 6:
                if (this._argumentList === void 0) {
                    this._argumentList = this.createChildNode(6);
                }
                return this._argumentList;
            default:
                return null;
        }
    };
    return IndirectMethodInvocationSyntaxNode;
}(MemberInvocationSyntaxNode));
exports.IndirectMethodInvocationSyntaxNode = IndirectMethodInvocationSyntaxNode;
var IndirectObjectCreationSyntaxNode = /** @class */ (function (_super) {
    __extends(IndirectObjectCreationSyntaxNode, _super);
    function IndirectObjectCreationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._classNameReference = undefined;
        _this._argumentList = undefined;
        return _this;
    }
    Object.defineProperty(IndirectObjectCreationSyntaxNode.prototype, "newKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.newKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectObjectCreationSyntaxNode.prototype, "classNameReference", {
        get: function () {
            if (this._classNameReference === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._classNameReference = node;
            }
            return this._classNameReference;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectObjectCreationSyntaxNode.prototype, "openParen", {
        get: function () {
            var token = this.node.openParen;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectObjectCreationSyntaxNode.prototype, "argumentList", {
        get: function () {
            if (this._argumentList === void 0) {
                this._argumentList = this.createChildNode(3);
            }
            return this._argumentList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectObjectCreationSyntaxNode.prototype, "closeParen", {
        get: function () {
            var token = this.node.closeParen;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(4), this.relativeIndexAt(4));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectObjectCreationSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    IndirectObjectCreationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitObjectCreation(this);
    };
    IndirectObjectCreationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitObjectCreation(this);
    };
    IndirectObjectCreationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._classNameReference !== void 0 ? this._classNameReference : null;
            case 3:
                return this._argumentList !== void 0 ? this._argumentList : null;
            default:
                return null;
        }
    };
    IndirectObjectCreationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._classNameReference === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._classNameReference = node;
                }
                return this._classNameReference;
            case 3:
                if (this._argumentList === void 0) {
                    this._argumentList = this.createChildNode(3);
                }
                return this._argumentList;
            default:
                return null;
        }
    };
    return IndirectObjectCreationSyntaxNode;
}(ObjectCreationSyntaxNode));
exports.IndirectObjectCreationSyntaxNode = IndirectObjectCreationSyntaxNode;
var IndirectScopedInvocationSyntaxNode = /** @class */ (function (_super) {
    __extends(IndirectScopedInvocationSyntaxNode, _super);
    function IndirectScopedInvocationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._qualifier = undefined;
        _this._member = undefined;
        _this._argumentList = undefined;
        return _this;
    }
    Object.defineProperty(IndirectScopedInvocationSyntaxNode.prototype, "qualifier", {
        get: function () {
            if (this._qualifier === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._qualifier = node;
            }
            return this._qualifier;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectScopedInvocationSyntaxNode.prototype, "doubleColon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.doubleColon, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectScopedInvocationSyntaxNode.prototype, "openBrace", {
        get: function () {
            var token = this.node.openBrace;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectScopedInvocationSyntaxNode.prototype, "member", {
        get: function () {
            if (this._member === void 0) {
                var node = this.createChildNode(3);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._member = node;
            }
            return this._member;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectScopedInvocationSyntaxNode.prototype, "closeBrace", {
        get: function () {
            var token = this.node.closeBrace;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(4), this.relativeIndexAt(4));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectScopedInvocationSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(5), this.relativeIndexAt(5));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectScopedInvocationSyntaxNode.prototype, "argumentList", {
        get: function () {
            if (this._argumentList === void 0) {
                this._argumentList = this.createChildNode(6);
            }
            return this._argumentList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectScopedInvocationSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(7), this.relativeIndexAt(7));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectScopedInvocationSyntaxNode.prototype, "count", {
        get: function () {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    IndirectScopedInvocationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitScopedInvocation(this);
    };
    IndirectScopedInvocationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitScopedInvocation(this);
    };
    IndirectScopedInvocationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._qualifier !== void 0 ? this._qualifier : null;
            case 3:
                return this._member !== void 0 ? this._member : null;
            case 6:
                return this._argumentList !== void 0 ? this._argumentList : null;
            default:
                return null;
        }
    };
    IndirectScopedInvocationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._qualifier === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._qualifier = node;
                }
                return this._qualifier;
            case 3:
                if (this._member === void 0) {
                    var node = this.createChildNode(3);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._member = node;
                }
                return this._member;
            case 6:
                if (this._argumentList === void 0) {
                    this._argumentList = this.createChildNode(6);
                }
                return this._argumentList;
            default:
                return null;
        }
    };
    return IndirectScopedInvocationSyntaxNode;
}(ScopedInvocationSyntaxNode));
exports.IndirectScopedInvocationSyntaxNode = IndirectScopedInvocationSyntaxNode;
var IndirectStringVariableSyntaxNode = /** @class */ (function (_super) {
    __extends(IndirectStringVariableSyntaxNode, _super);
    function IndirectStringVariableSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(IndirectStringVariableSyntaxNode.prototype, "dollarOpenBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.dollarOpenBrace, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectStringVariableSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectStringVariableSyntaxNode.prototype, "closeBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBrace, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectStringVariableSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    IndirectStringVariableSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitIndirectStringVariable(this);
    };
    IndirectStringVariableSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIndirectStringVariable(this);
    };
    IndirectStringVariableSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    IndirectStringVariableSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._expression === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return IndirectStringVariableSyntaxNode;
}(ExpressionSyntaxNode));
exports.IndirectStringVariableSyntaxNode = IndirectStringVariableSyntaxNode;
var IndirectVariableSyntaxNode = /** @class */ (function (_super) {
    __extends(IndirectVariableSyntaxNode, _super);
    function IndirectVariableSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(IndirectVariableSyntaxNode.prototype, "dollar", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.dollar, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectVariableSyntaxNode.prototype, "openBrace", {
        get: function () {
            var token = this.node.openBrace;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(1), this.relativeIndexAt(1));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectVariableSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectVariableSyntaxNode.prototype, "closeBrace", {
        get: function () {
            var token = this.node.closeBrace;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(3), this.relativeIndexAt(3));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IndirectVariableSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    IndirectVariableSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitIndirectVariable(this);
    };
    IndirectVariableSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIndirectVariable(this);
    };
    IndirectVariableSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    IndirectVariableSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expression === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return IndirectVariableSyntaxNode;
}(VariableSyntaxNode));
exports.IndirectVariableSyntaxNode = IndirectVariableSyntaxNode;
var InstanceOfSyntaxNode = /** @class */ (function (_super) {
    __extends(InstanceOfSyntaxNode, _super);
    function InstanceOfSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._operand = undefined;
        _this._classNameOrReference = undefined;
        return _this;
    }
    Object.defineProperty(InstanceOfSyntaxNode.prototype, "operand", {
        get: function () {
            if (this._operand === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._operand = node;
            }
            return this._operand;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InstanceOfSyntaxNode.prototype, "instanceOfKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.instanceOfKeyword, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InstanceOfSyntaxNode.prototype, "classNameOrReference", {
        get: function () {
            if (this._classNameOrReference === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._classNameOrReference = node;
            }
            return this._classNameOrReference;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InstanceOfSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    InstanceOfSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitInstanceOf(this);
    };
    InstanceOfSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitInstanceOf(this);
    };
    InstanceOfSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._operand !== void 0 ? this._operand : null;
            case 2:
                return this._classNameOrReference !== void 0 ? this._classNameOrReference : null;
            default:
                return null;
        }
    };
    InstanceOfSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._operand === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._operand = node;
                }
                return this._operand;
            case 2:
                if (this._classNameOrReference === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._classNameOrReference = node;
                }
                return this._classNameOrReference;
            default:
                return null;
        }
    };
    return InstanceOfSyntaxNode;
}(ExpressionSyntaxNode));
exports.InstanceOfSyntaxNode = InstanceOfSyntaxNode;
var InterfaceDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(InterfaceDeclarationSyntaxNode, _super);
    function InterfaceDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._baseInterfaces = undefined;
        _this._members = undefined;
        return _this;
    }
    Object.defineProperty(InterfaceDeclarationSyntaxNode.prototype, "interfaceKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.interfaceKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InterfaceDeclarationSyntaxNode.prototype, "identifier", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.identifier, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InterfaceDeclarationSyntaxNode.prototype, "extendsKeyword", {
        get: function () {
            var token = this.node.extendsKeyword;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InterfaceDeclarationSyntaxNode.prototype, "baseInterfaces", {
        get: function () {
            if (this._baseInterfaces === void 0) {
                this._baseInterfaces = this.createChildNode(3);
            }
            return this._baseInterfaces;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InterfaceDeclarationSyntaxNode.prototype, "openBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBrace, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InterfaceDeclarationSyntaxNode.prototype, "members", {
        get: function () {
            if (this._members === void 0) {
                this._members = this.createChildNode(5);
            }
            return this._members;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InterfaceDeclarationSyntaxNode.prototype, "closeBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBrace, this, this.offsetAt(6), this.relativeIndexAt(6));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InterfaceDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 7;
        },
        enumerable: false,
        configurable: true
    });
    InterfaceDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitInterfaceDeclaration(this);
    };
    InterfaceDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitInterfaceDeclaration(this);
    };
    InterfaceDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 3:
                return this._baseInterfaces !== void 0 ? this._baseInterfaces : null;
            case 5:
                return this._members !== void 0 ? this._members : null;
            default:
                return null;
        }
    };
    InterfaceDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 3:
                if (this._baseInterfaces === void 0) {
                    this._baseInterfaces = this.createChildNode(3);
                }
                return this._baseInterfaces;
            case 5:
                if (this._members === void 0) {
                    this._members = this.createChildNode(5);
                }
                return this._members;
            default:
                return null;
        }
    };
    return InterfaceDeclarationSyntaxNode;
}(TypeDeclarationSyntaxNode));
exports.InterfaceDeclarationSyntaxNode = InterfaceDeclarationSyntaxNode;
var IsSetIntrinsicSyntaxNode = /** @class */ (function (_super) {
    __extends(IsSetIntrinsicSyntaxNode, _super);
    function IsSetIntrinsicSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expressions = undefined;
        return _this;
    }
    Object.defineProperty(IsSetIntrinsicSyntaxNode.prototype, "isSetKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.isSetKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IsSetIntrinsicSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IsSetIntrinsicSyntaxNode.prototype, "expressions", {
        get: function () {
            if (this._expressions === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expressions = node;
            }
            return this._expressions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IsSetIntrinsicSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IsSetIntrinsicSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    IsSetIntrinsicSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitIsSetIntrinsic(this);
    };
    IsSetIntrinsicSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitIsSetIntrinsic(this);
    };
    IsSetIntrinsicSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expressions !== void 0 ? this._expressions : null;
            default:
                return null;
        }
    };
    IsSetIntrinsicSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expressions === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expressions = node;
                }
                return this._expressions;
            default:
                return null;
        }
    };
    return IsSetIntrinsicSyntaxNode;
}(IntrinsicSyntaxNode));
exports.IsSetIntrinsicSyntaxNode = IsSetIntrinsicSyntaxNode;
var LabelSyntaxNode = /** @class */ (function (_super) {
    __extends(LabelSyntaxNode, _super);
    function LabelSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    Object.defineProperty(LabelSyntaxNode.prototype, "label", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.label, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LabelSyntaxNode.prototype, "colon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.colon, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LabelSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    LabelSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitLabel(this);
    };
    LabelSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitLabel(this);
    };
    LabelSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    LabelSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    return LabelSyntaxNode;
}(StatementSyntaxNode));
exports.LabelSyntaxNode = LabelSyntaxNode;
var LexicalVariableSyntaxNode = /** @class */ (function (_super) {
    __extends(LexicalVariableSyntaxNode, _super);
    function LexicalVariableSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    Object.defineProperty(LexicalVariableSyntaxNode.prototype, "ampersand", {
        get: function () {
            var token = this.node.ampersand;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(0), this.relativeIndexAt(0));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LexicalVariableSyntaxNode.prototype, "variable", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.variable, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LexicalVariableSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    LexicalVariableSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitLexicalVariable(this);
    };
    LexicalVariableSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitLexicalVariable(this);
    };
    LexicalVariableSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    LexicalVariableSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    return LexicalVariableSyntaxNode;
}(VariableSyntaxNode));
exports.LexicalVariableSyntaxNode = LexicalVariableSyntaxNode;
var LiteralSyntaxNode = /** @class */ (function (_super) {
    __extends(LiteralSyntaxNode, _super);
    function LiteralSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    Object.defineProperty(LiteralSyntaxNode.prototype, "value", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.value, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LiteralSyntaxNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    LiteralSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitLiteral(this);
    };
    LiteralSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitLiteral(this);
    };
    LiteralSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    LiteralSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    return LiteralSyntaxNode;
}(ExpressionSyntaxNode));
exports.LiteralSyntaxNode = LiteralSyntaxNode;
var LocalVariableSyntaxNode = /** @class */ (function (_super) {
    __extends(LocalVariableSyntaxNode, _super);
    function LocalVariableSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    Object.defineProperty(LocalVariableSyntaxNode.prototype, "variable", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.variable, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalVariableSyntaxNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    LocalVariableSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitLocalVariable(this);
    };
    LocalVariableSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitLocalVariable(this);
    };
    LocalVariableSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    LocalVariableSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    return LocalVariableSyntaxNode;
}(VariableSyntaxNode));
exports.LocalVariableSyntaxNode = LocalVariableSyntaxNode;
var MethodDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(MethodDeclarationSyntaxNode, _super);
    function MethodDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._modifiers = undefined;
        _this._parameters = undefined;
        _this._returnType = undefined;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "modifiers", {
        get: function () {
            if (this._modifiers === void 0) {
                this._modifiers = this.createFirstChildNode();
            }
            return this._modifiers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "functionKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.functionKeyword, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "ampersand", {
        get: function () {
            var token = this.node.ampersand;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "identifierOrKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.identifierOrKeyword, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "parameters", {
        get: function () {
            if (this._parameters === void 0) {
                this._parameters = this.createChildNode(5);
            }
            return this._parameters;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(6), this.relativeIndexAt(6));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "colon", {
        get: function () {
            var token = this.node.colon;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(7), this.relativeIndexAt(7));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "returnType", {
        get: function () {
            if (this._returnType === void 0) {
                this._returnType = this.createChildNode(8);
            }
            return this._returnType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createChildNode(9);
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "semicolon", {
        get: function () {
            var token = this.node.semicolon;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(10), this.relativeIndexAt(10));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MethodDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 11;
        },
        enumerable: false,
        configurable: true
    });
    MethodDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitMethodDeclaration(this);
    };
    MethodDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMethodDeclaration(this);
    };
    MethodDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._modifiers !== void 0 ? this._modifiers : null;
            case 5:
                return this._parameters !== void 0 ? this._parameters : null;
            case 8:
                return this._returnType !== void 0 ? this._returnType : null;
            case 9:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    MethodDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._modifiers === void 0) {
                    this._modifiers = this.createFirstChildNode();
                }
                return this._modifiers;
            case 5:
                if (this._parameters === void 0) {
                    this._parameters = this.createChildNode(5);
                }
                return this._parameters;
            case 8:
                if (this._returnType === void 0) {
                    this._returnType = this.createChildNode(8);
                }
                return this._returnType;
            case 9:
                if (this._statements === void 0) {
                    this._statements = this.createChildNode(9);
                }
                return this._statements;
            default:
                return null;
        }
    };
    return MethodDeclarationSyntaxNode;
}(StatementSyntaxNode));
exports.MethodDeclarationSyntaxNode = MethodDeclarationSyntaxNode;
var NamedMemberAccessSyntaxNode = /** @class */ (function (_super) {
    __extends(NamedMemberAccessSyntaxNode, _super);
    function NamedMemberAccessSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._dereferencable = undefined;
        return _this;
    }
    Object.defineProperty(NamedMemberAccessSyntaxNode.prototype, "dereferencable", {
        get: function () {
            if (this._dereferencable === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._dereferencable = node;
            }
            return this._dereferencable;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMemberAccessSyntaxNode.prototype, "objectOperator", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.objectOperator, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMemberAccessSyntaxNode.prototype, "member", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.member, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMemberAccessSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    NamedMemberAccessSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitMemberAccess(this);
    };
    NamedMemberAccessSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMemberAccess(this);
    };
    NamedMemberAccessSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._dereferencable !== void 0 ? this._dereferencable : null;
            default:
                return null;
        }
    };
    NamedMemberAccessSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._dereferencable === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._dereferencable = node;
                }
                return this._dereferencable;
            default:
                return null;
        }
    };
    return NamedMemberAccessSyntaxNode;
}(MemberAccessSyntaxNode));
exports.NamedMemberAccessSyntaxNode = NamedMemberAccessSyntaxNode;
var NamedMethodInvocationSyntaxNode = /** @class */ (function (_super) {
    __extends(NamedMethodInvocationSyntaxNode, _super);
    function NamedMethodInvocationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._dereferenceable = undefined;
        _this._argumentList = undefined;
        return _this;
    }
    Object.defineProperty(NamedMethodInvocationSyntaxNode.prototype, "dereferenceable", {
        get: function () {
            if (this._dereferenceable === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._dereferenceable = node;
            }
            return this._dereferenceable;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMethodInvocationSyntaxNode.prototype, "objectOperator", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.objectOperator, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMethodInvocationSyntaxNode.prototype, "identifierOrKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.identifierOrKeyword, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMethodInvocationSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMethodInvocationSyntaxNode.prototype, "argumentList", {
        get: function () {
            if (this._argumentList === void 0) {
                this._argumentList = this.createChildNode(4);
            }
            return this._argumentList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMethodInvocationSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(5), this.relativeIndexAt(5));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedMethodInvocationSyntaxNode.prototype, "count", {
        get: function () {
            return 6;
        },
        enumerable: false,
        configurable: true
    });
    NamedMethodInvocationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitMethodInvocation(this);
    };
    NamedMethodInvocationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitMethodInvocation(this);
    };
    NamedMethodInvocationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._dereferenceable !== void 0 ? this._dereferenceable : null;
            case 4:
                return this._argumentList !== void 0 ? this._argumentList : null;
            default:
                return null;
        }
    };
    NamedMethodInvocationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._dereferenceable === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._dereferenceable = node;
                }
                return this._dereferenceable;
            case 4:
                if (this._argumentList === void 0) {
                    this._argumentList = this.createChildNode(4);
                }
                return this._argumentList;
            default:
                return null;
        }
    };
    return NamedMethodInvocationSyntaxNode;
}(MemberInvocationSyntaxNode));
exports.NamedMethodInvocationSyntaxNode = NamedMethodInvocationSyntaxNode;
var NamedObjectCreationSyntaxNode = /** @class */ (function (_super) {
    __extends(NamedObjectCreationSyntaxNode, _super);
    function NamedObjectCreationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._className = undefined;
        _this._argumentList = undefined;
        return _this;
    }
    Object.defineProperty(NamedObjectCreationSyntaxNode.prototype, "newKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.newKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedObjectCreationSyntaxNode.prototype, "className", {
        get: function () {
            if (this._className === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._className = node;
            }
            return this._className;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedObjectCreationSyntaxNode.prototype, "openParen", {
        get: function () {
            var token = this.node.openParen;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedObjectCreationSyntaxNode.prototype, "argumentList", {
        get: function () {
            if (this._argumentList === void 0) {
                this._argumentList = this.createChildNode(3);
            }
            return this._argumentList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedObjectCreationSyntaxNode.prototype, "closeParen", {
        get: function () {
            var token = this.node.closeParen;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(4), this.relativeIndexAt(4));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedObjectCreationSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    NamedObjectCreationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitObjectCreation(this);
    };
    NamedObjectCreationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitObjectCreation(this);
    };
    NamedObjectCreationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._className !== void 0 ? this._className : null;
            case 3:
                return this._argumentList !== void 0 ? this._argumentList : null;
            default:
                return null;
        }
    };
    NamedObjectCreationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._className === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._className = node;
                }
                return this._className;
            case 3:
                if (this._argumentList === void 0) {
                    this._argumentList = this.createChildNode(3);
                }
                return this._argumentList;
            default:
                return null;
        }
    };
    return NamedObjectCreationSyntaxNode;
}(ObjectCreationSyntaxNode));
exports.NamedObjectCreationSyntaxNode = NamedObjectCreationSyntaxNode;
var NamedScopedInvocationSyntaxNode = /** @class */ (function (_super) {
    __extends(NamedScopedInvocationSyntaxNode, _super);
    function NamedScopedInvocationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._qualifier = undefined;
        _this._argumentList = undefined;
        return _this;
    }
    Object.defineProperty(NamedScopedInvocationSyntaxNode.prototype, "qualifier", {
        get: function () {
            if (this._qualifier === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._qualifier = node;
            }
            return this._qualifier;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedScopedInvocationSyntaxNode.prototype, "doubleColon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.doubleColon, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedScopedInvocationSyntaxNode.prototype, "member", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.member, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedScopedInvocationSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedScopedInvocationSyntaxNode.prototype, "argumentList", {
        get: function () {
            if (this._argumentList === void 0) {
                this._argumentList = this.createChildNode(4);
            }
            return this._argumentList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedScopedInvocationSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(5), this.relativeIndexAt(5));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedScopedInvocationSyntaxNode.prototype, "count", {
        get: function () {
            return 6;
        },
        enumerable: false,
        configurable: true
    });
    NamedScopedInvocationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitScopedInvocation(this);
    };
    NamedScopedInvocationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitScopedInvocation(this);
    };
    NamedScopedInvocationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._qualifier !== void 0 ? this._qualifier : null;
            case 4:
                return this._argumentList !== void 0 ? this._argumentList : null;
            default:
                return null;
        }
    };
    NamedScopedInvocationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._qualifier === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._qualifier = node;
                }
                return this._qualifier;
            case 4:
                if (this._argumentList === void 0) {
                    this._argumentList = this.createChildNode(4);
                }
                return this._argumentList;
            default:
                return null;
        }
    };
    return NamedScopedInvocationSyntaxNode;
}(ScopedInvocationSyntaxNode));
exports.NamedScopedInvocationSyntaxNode = NamedScopedInvocationSyntaxNode;
var NamedTraitAliasSyntaxNode = /** @class */ (function (_super) {
    __extends(NamedTraitAliasSyntaxNode, _super);
    function NamedTraitAliasSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    Object.defineProperty(NamedTraitAliasSyntaxNode.prototype, "methodName", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.methodName, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedTraitAliasSyntaxNode.prototype, "asKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.asKeyword, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedTraitAliasSyntaxNode.prototype, "modifier", {
        get: function () {
            var token = this.node.modifier;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedTraitAliasSyntaxNode.prototype, "alias", {
        get: function () {
            var token = this.node.alias;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(3), this.relativeIndexAt(3));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedTraitAliasSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedTraitAliasSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    NamedTraitAliasSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitTraitAlias(this);
    };
    NamedTraitAliasSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitAlias(this);
    };
    NamedTraitAliasSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    NamedTraitAliasSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    return NamedTraitAliasSyntaxNode;
}(TraitAliasSyntaxNode));
exports.NamedTraitAliasSyntaxNode = NamedTraitAliasSyntaxNode;
var NamedTypeSyntaxNode = /** @class */ (function (_super) {
    __extends(NamedTypeSyntaxNode, _super);
    function NamedTypeSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._typeName = undefined;
        return _this;
    }
    Object.defineProperty(NamedTypeSyntaxNode.prototype, "question", {
        get: function () {
            var token = this.node.question;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(0), this.relativeIndexAt(0));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedTypeSyntaxNode.prototype, "typeName", {
        get: function () {
            if (this._typeName === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._typeName = node;
            }
            return this._typeName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamedTypeSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    NamedTypeSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitType(this);
    };
    NamedTypeSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitType(this);
    };
    NamedTypeSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._typeName !== void 0 ? this._typeName : null;
            default:
                return null;
        }
    };
    NamedTypeSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._typeName === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._typeName = node;
                }
                return this._typeName;
            default:
                return null;
        }
    };
    return NamedTypeSyntaxNode;
}(TypeSyntaxNode));
exports.NamedTypeSyntaxNode = NamedTypeSyntaxNode;
var NamespaceDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(NamespaceDeclarationSyntaxNode, _super);
    function NamespaceDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._name = undefined;
        return _this;
    }
    Object.defineProperty(NamespaceDeclarationSyntaxNode.prototype, "namespaceKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.namespaceKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceDeclarationSyntaxNode.prototype, "name", {
        get: function () {
            if (this._name === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._name = node;
            }
            return this._name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceDeclarationSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    NamespaceDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitNamespaceDeclaration(this);
    };
    NamespaceDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitNamespaceDeclaration(this);
    };
    NamespaceDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._name !== void 0 ? this._name : null;
            default:
                return null;
        }
    };
    NamespaceDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._name === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._name = node;
                }
                return this._name;
            default:
                return null;
        }
    };
    return NamespaceDeclarationSyntaxNode;
}(StatementSyntaxNode));
exports.NamespaceDeclarationSyntaxNode = NamespaceDeclarationSyntaxNode;
var NamespaceGroupDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(NamespaceGroupDeclarationSyntaxNode, _super);
    function NamespaceGroupDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._name = undefined;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(NamespaceGroupDeclarationSyntaxNode.prototype, "namespaceKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.namespaceKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceGroupDeclarationSyntaxNode.prototype, "name", {
        get: function () {
            if (this._name === void 0) {
                this._name = this.createChildNode(1);
            }
            return this._name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceGroupDeclarationSyntaxNode.prototype, "openBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBrace, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceGroupDeclarationSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createChildNode(3);
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceGroupDeclarationSyntaxNode.prototype, "closeBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBrace, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NamespaceGroupDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    NamespaceGroupDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitNamespaceGroupDeclaration(this);
    };
    NamespaceGroupDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitNamespaceGroupDeclaration(this);
    };
    NamespaceGroupDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._name !== void 0 ? this._name : null;
            case 3:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    NamespaceGroupDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._name === void 0) {
                    this._name = this.createChildNode(1);
                }
                return this._name;
            case 3:
                if (this._statements === void 0) {
                    this._statements = this.createChildNode(3);
                }
                return this._statements;
            default:
                return null;
        }
    };
    return NamespaceGroupDeclarationSyntaxNode;
}(StatementSyntaxNode));
exports.NamespaceGroupDeclarationSyntaxNode = NamespaceGroupDeclarationSyntaxNode;
var PartiallyQualifiedNameSyntaxNode = /** @class */ (function (_super) {
    __extends(PartiallyQualifiedNameSyntaxNode, _super);
    function PartiallyQualifiedNameSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._namespaceName = undefined;
        return _this;
    }
    Object.defineProperty(PartiallyQualifiedNameSyntaxNode.prototype, "namespaceName", {
        get: function () {
            if (this._namespaceName === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._namespaceName = node;
            }
            return this._namespaceName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PartiallyQualifiedNameSyntaxNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    PartiallyQualifiedNameSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitPartiallyQualifiedName(this);
    };
    PartiallyQualifiedNameSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitPartiallyQualifiedName(this);
    };
    PartiallyQualifiedNameSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._namespaceName !== void 0 ? this._namespaceName : null;
            default:
                return null;
        }
    };
    PartiallyQualifiedNameSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._namespaceName === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._namespaceName = node;
                }
                return this._namespaceName;
            default:
                return null;
        }
    };
    return PartiallyQualifiedNameSyntaxNode;
}(NameSyntaxNode));
exports.PartiallyQualifiedNameSyntaxNode = PartiallyQualifiedNameSyntaxNode;
var PostfixUnarySyntaxNode = /** @class */ (function (_super) {
    __extends(PostfixUnarySyntaxNode, _super);
    function PostfixUnarySyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._operand = undefined;
        return _this;
    }
    Object.defineProperty(PostfixUnarySyntaxNode.prototype, "operand", {
        get: function () {
            if (this._operand === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._operand = node;
            }
            return this._operand;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PostfixUnarySyntaxNode.prototype, "operator", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.operator, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PostfixUnarySyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    PostfixUnarySyntaxNode.prototype.accept = function (visitor) {
        visitor.visitPostfixUnaryExpression(this);
    };
    PostfixUnarySyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitPostfixUnaryExpression(this);
    };
    PostfixUnarySyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._operand !== void 0 ? this._operand : null;
            default:
                return null;
        }
    };
    PostfixUnarySyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._operand === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._operand = node;
                }
                return this._operand;
            default:
                return null;
        }
    };
    return PostfixUnarySyntaxNode;
}(ExpressionSyntaxNode));
exports.PostfixUnarySyntaxNode = PostfixUnarySyntaxNode;
var PredefinedTypeSyntaxNode = /** @class */ (function (_super) {
    __extends(PredefinedTypeSyntaxNode, _super);
    function PredefinedTypeSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    Object.defineProperty(PredefinedTypeSyntaxNode.prototype, "question", {
        get: function () {
            var token = this.node.question;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(0), this.relativeIndexAt(0));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PredefinedTypeSyntaxNode.prototype, "keyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.keyword, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PredefinedTypeSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    PredefinedTypeSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitType(this);
    };
    PredefinedTypeSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitType(this);
    };
    PredefinedTypeSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    PredefinedTypeSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    return PredefinedTypeSyntaxNode;
}(TypeSyntaxNode));
exports.PredefinedTypeSyntaxNode = PredefinedTypeSyntaxNode;
var PrintIntrinsicSyntaxNode = /** @class */ (function (_super) {
    __extends(PrintIntrinsicSyntaxNode, _super);
    function PrintIntrinsicSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(PrintIntrinsicSyntaxNode.prototype, "printKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.printKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PrintIntrinsicSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PrintIntrinsicSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    PrintIntrinsicSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitPrintIntrinsic(this);
    };
    PrintIntrinsicSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitPrintIntrinsic(this);
    };
    PrintIntrinsicSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    PrintIntrinsicSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._expression === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return PrintIntrinsicSyntaxNode;
}(IntrinsicSyntaxNode));
exports.PrintIntrinsicSyntaxNode = PrintIntrinsicSyntaxNode;
var PropertyDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(PropertyDeclarationSyntaxNode, _super);
    function PropertyDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._modifiers = undefined;
        _this._type = undefined;
        _this._properties = undefined;
        return _this;
    }
    Object.defineProperty(PropertyDeclarationSyntaxNode.prototype, "modifiers", {
        get: function () {
            if (this._modifiers === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._modifiers = node;
            }
            return this._modifiers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyDeclarationSyntaxNode.prototype, "type", {
        get: function () {
            if (this._type === void 0) {
                this._type = this.createChildNode(1);
            }
            return this._type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyDeclarationSyntaxNode.prototype, "properties", {
        get: function () {
            if (this._properties === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._properties = node;
            }
            return this._properties;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyDeclarationSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    PropertyDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitPropertyDeclaration(this);
    };
    PropertyDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitPropertyDeclaration(this);
    };
    PropertyDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._modifiers !== void 0 ? this._modifiers : null;
            case 1:
                return this._type !== void 0 ? this._type : null;
            case 2:
                return this._properties !== void 0 ? this._properties : null;
            default:
                return null;
        }
    };
    PropertyDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._modifiers === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._modifiers = node;
                }
                return this._modifiers;
            case 1:
                if (this._type === void 0) {
                    this._type = this.createChildNode(1);
                }
                return this._type;
            case 2:
                if (this._properties === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._properties = node;
                }
                return this._properties;
            default:
                return null;
        }
    };
    return PropertyDeclarationSyntaxNode;
}(StatementSyntaxNode));
exports.PropertyDeclarationSyntaxNode = PropertyDeclarationSyntaxNode;
var ReferencedTraitAliasSyntaxNode = /** @class */ (function (_super) {
    __extends(ReferencedTraitAliasSyntaxNode, _super);
    function ReferencedTraitAliasSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._reference = undefined;
        return _this;
    }
    Object.defineProperty(ReferencedTraitAliasSyntaxNode.prototype, "reference", {
        get: function () {
            if (this._reference === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._reference = node;
            }
            return this._reference;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReferencedTraitAliasSyntaxNode.prototype, "asKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.asKeyword, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReferencedTraitAliasSyntaxNode.prototype, "modifier", {
        get: function () {
            var token = this.node.modifier;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReferencedTraitAliasSyntaxNode.prototype, "alias", {
        get: function () {
            var token = this.node.alias;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(3), this.relativeIndexAt(3));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReferencedTraitAliasSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReferencedTraitAliasSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    ReferencedTraitAliasSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitTraitAlias(this);
    };
    ReferencedTraitAliasSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitAlias(this);
    };
    ReferencedTraitAliasSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._reference !== void 0 ? this._reference : null;
            default:
                return null;
        }
    };
    ReferencedTraitAliasSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._reference === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._reference = node;
                }
                return this._reference;
            default:
                return null;
        }
    };
    return ReferencedTraitAliasSyntaxNode;
}(TraitAliasSyntaxNode));
exports.ReferencedTraitAliasSyntaxNode = ReferencedTraitAliasSyntaxNode;
var RelativeNameSyntaxNode = /** @class */ (function (_super) {
    __extends(RelativeNameSyntaxNode, _super);
    function RelativeNameSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._namespaceName = undefined;
        return _this;
    }
    Object.defineProperty(RelativeNameSyntaxNode.prototype, "namespaceKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.namespaceKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RelativeNameSyntaxNode.prototype, "leadingBackslash", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.leadingBackslash, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RelativeNameSyntaxNode.prototype, "namespaceName", {
        get: function () {
            if (this._namespaceName === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._namespaceName = node;
            }
            return this._namespaceName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RelativeNameSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    RelativeNameSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitRelativeName(this);
    };
    RelativeNameSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitRelativeName(this);
    };
    RelativeNameSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._namespaceName !== void 0 ? this._namespaceName : null;
            default:
                return null;
        }
    };
    RelativeNameSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._namespaceName === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._namespaceName = node;
                }
                return this._namespaceName;
            default:
                return null;
        }
    };
    return RelativeNameSyntaxNode;
}(NameSyntaxNode));
exports.RelativeNameSyntaxNode = RelativeNameSyntaxNode;
var ReturnSyntaxNode = /** @class */ (function (_super) {
    __extends(ReturnSyntaxNode, _super);
    function ReturnSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(ReturnSyntaxNode.prototype, "returnKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.returnKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReturnSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                this._expression = this.createChildNode(1);
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReturnSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReturnSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    ReturnSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitReturn(this);
    };
    ReturnSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitReturn(this);
    };
    ReturnSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    ReturnSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._expression === void 0) {
                    this._expression = this.createChildNode(1);
                }
                return this._expression;
            default:
                return null;
        }
    };
    return ReturnSyntaxNode;
}(JumpSyntaxNode));
exports.ReturnSyntaxNode = ReturnSyntaxNode;
var ScriptInclusionSyntaxNode = /** @class */ (function (_super) {
    __extends(ScriptInclusionSyntaxNode, _super);
    function ScriptInclusionSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(ScriptInclusionSyntaxNode.prototype, "inclusionKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.inclusionKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScriptInclusionSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ScriptInclusionSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    ScriptInclusionSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitScriptInclusion(this);
    };
    ScriptInclusionSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitScriptInclusion(this);
    };
    ScriptInclusionSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    ScriptInclusionSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._expression === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return ScriptInclusionSyntaxNode;
}(IntrinsicSyntaxNode));
exports.ScriptInclusionSyntaxNode = ScriptInclusionSyntaxNode;
var ShellCommandTemplateSyntaxNode = /** @class */ (function (_super) {
    __extends(ShellCommandTemplateSyntaxNode, _super);
    function ShellCommandTemplateSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._template = undefined;
        return _this;
    }
    Object.defineProperty(ShellCommandTemplateSyntaxNode.prototype, "openBackQuote", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBackQuote, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShellCommandTemplateSyntaxNode.prototype, "template", {
        get: function () {
            if (this._template === void 0) {
                this._template = this.createChildNode(1);
            }
            return this._template;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShellCommandTemplateSyntaxNode.prototype, "closeBackQuote", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBackQuote, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShellCommandTemplateSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    ShellCommandTemplateSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitShellCommandTemplate(this);
    };
    ShellCommandTemplateSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitShellCommandTemplate(this);
    };
    ShellCommandTemplateSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._template !== void 0 ? this._template : null;
            default:
                return null;
        }
    };
    ShellCommandTemplateSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._template === void 0) {
                    this._template = this.createChildNode(1);
                }
                return this._template;
            default:
                return null;
        }
    };
    return ShellCommandTemplateSyntaxNode;
}(ExpressionSyntaxNode));
exports.ShellCommandTemplateSyntaxNode = ShellCommandTemplateSyntaxNode;
var StatementBlockSyntaxNode = /** @class */ (function (_super) {
    __extends(StatementBlockSyntaxNode, _super);
    function StatementBlockSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(StatementBlockSyntaxNode.prototype, "openBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBrace, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StatementBlockSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createChildNode(1);
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StatementBlockSyntaxNode.prototype, "closeBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBrace, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StatementBlockSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    StatementBlockSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitStatementBlock(this);
    };
    StatementBlockSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStatementBlock(this);
    };
    StatementBlockSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    StatementBlockSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._statements === void 0) {
                    this._statements = this.createChildNode(1);
                }
                return this._statements;
            default:
                return null;
        }
    };
    return StatementBlockSyntaxNode;
}(StatementSyntaxNode));
exports.StatementBlockSyntaxNode = StatementBlockSyntaxNode;
var StaticSyntaxNode = /** @class */ (function (_super) {
    __extends(StaticSyntaxNode, _super);
    function StaticSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._variables = undefined;
        return _this;
    }
    Object.defineProperty(StaticSyntaxNode.prototype, "staticKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.staticKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticSyntaxNode.prototype, "variables", {
        get: function () {
            if (this._variables === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._variables = node;
            }
            return this._variables;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    StaticSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitStaticDeclaration(this);
    };
    StaticSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStaticDeclaration(this);
    };
    StaticSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._variables !== void 0 ? this._variables : null;
            default:
                return null;
        }
    };
    StaticSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._variables === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._variables = node;
                }
                return this._variables;
            default:
                return null;
        }
    };
    return StaticSyntaxNode;
}(StatementSyntaxNode));
exports.StaticSyntaxNode = StaticSyntaxNode;
var StaticPropertySyntaxNode = /** @class */ (function (_super) {
    __extends(StaticPropertySyntaxNode, _super);
    function StaticPropertySyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._qualifier = undefined;
        _this._member = undefined;
        return _this;
    }
    Object.defineProperty(StaticPropertySyntaxNode.prototype, "qualifier", {
        get: function () {
            if (this._qualifier === void 0) {
                var node = this.createFirstChildNode();
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._qualifier = node;
            }
            return this._qualifier;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticPropertySyntaxNode.prototype, "doubleColon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.doubleColon, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticPropertySyntaxNode.prototype, "member", {
        get: function () {
            if (this._member === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._member = node;
            }
            return this._member;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StaticPropertySyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    StaticPropertySyntaxNode.prototype.accept = function (visitor) {
        visitor.visitStaticProperty(this);
    };
    StaticPropertySyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStaticProperty(this);
    };
    StaticPropertySyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 0:
                return this._qualifier !== void 0 ? this._qualifier : null;
            case 2:
                return this._member !== void 0 ? this._member : null;
            default:
                return null;
        }
    };
    StaticPropertySyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 0:
                if (this._qualifier === void 0) {
                    var node = this.createFirstChildNode();
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._qualifier = node;
                }
                return this._qualifier;
            case 2:
                if (this._member === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._member = node;
                }
                return this._member;
            default:
                return null;
        }
    };
    return StaticPropertySyntaxNode;
}(ScopedAccessSyntaxNode));
exports.StaticPropertySyntaxNode = StaticPropertySyntaxNode;
var StringElementAccessSyntaxNode = /** @class */ (function (_super) {
    __extends(StringElementAccessSyntaxNode, _super);
    function StringElementAccessSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    Object.defineProperty(StringElementAccessSyntaxNode.prototype, "variable", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.variable, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringElementAccessSyntaxNode.prototype, "openBracket", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBracket, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringElementAccessSyntaxNode.prototype, "minus", {
        get: function () {
            var token = this.node.minus;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringElementAccessSyntaxNode.prototype, "index", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.index, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringElementAccessSyntaxNode.prototype, "closeBracket", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBracket, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringElementAccessSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    StringElementAccessSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitStringElementAccess(this);
    };
    StringElementAccessSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStringElementAccess(this);
    };
    StringElementAccessSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    StringElementAccessSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    return StringElementAccessSyntaxNode;
}(ExpressionSyntaxNode));
exports.StringElementAccessSyntaxNode = StringElementAccessSyntaxNode;
var StringExpressionSyntaxNode = /** @class */ (function (_super) {
    __extends(StringExpressionSyntaxNode, _super);
    function StringExpressionSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(StringExpressionSyntaxNode.prototype, "openBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBrace, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringExpressionSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringExpressionSyntaxNode.prototype, "closeBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBrace, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringExpressionSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    StringExpressionSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitStringExpression(this);
    };
    StringExpressionSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStringExpression(this);
    };
    StringExpressionSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    StringExpressionSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._expression === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return StringExpressionSyntaxNode;
}(ExpressionSyntaxNode));
exports.StringExpressionSyntaxNode = StringExpressionSyntaxNode;
var StringTemplateSyntaxNode = /** @class */ (function (_super) {
    __extends(StringTemplateSyntaxNode, _super);
    function StringTemplateSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._template = undefined;
        return _this;
    }
    Object.defineProperty(StringTemplateSyntaxNode.prototype, "openQuote", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openQuote, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringTemplateSyntaxNode.prototype, "template", {
        get: function () {
            if (this._template === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._template = node;
            }
            return this._template;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringTemplateSyntaxNode.prototype, "closeQuote", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeQuote, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringTemplateSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    StringTemplateSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitStringTemplate(this);
    };
    StringTemplateSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStringTemplate(this);
    };
    StringTemplateSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._template !== void 0 ? this._template : null;
            default:
                return null;
        }
    };
    StringTemplateSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._template === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._template = node;
                }
                return this._template;
            default:
                return null;
        }
    };
    return StringTemplateSyntaxNode;
}(ExpressionSyntaxNode));
exports.StringTemplateSyntaxNode = StringTemplateSyntaxNode;
var StringVariableSyntaxNode = /** @class */ (function (_super) {
    __extends(StringVariableSyntaxNode, _super);
    function StringVariableSyntaxNode(node, parent, offset) {
        return _super.call(this, node, parent, offset) || this;
    }
    Object.defineProperty(StringVariableSyntaxNode.prototype, "identifier", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.identifier, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StringVariableSyntaxNode.prototype, "count", {
        get: function () {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    StringVariableSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitStringVariable(this);
    };
    StringVariableSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitStringVariable(this);
    };
    StringVariableSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    StringVariableSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            default:
                return null;
        }
    };
    return StringVariableSyntaxNode;
}(VariableSyntaxNode));
exports.StringVariableSyntaxNode = StringVariableSyntaxNode;
var SwitchSyntaxNode = /** @class */ (function (_super) {
    __extends(SwitchSyntaxNode, _super);
    function SwitchSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        _this._caseClauses = undefined;
        return _this;
    }
    Object.defineProperty(SwitchSyntaxNode.prototype, "switchKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.switchKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchSyntaxNode.prototype, "openBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBrace, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchSyntaxNode.prototype, "caseSemicolon", {
        get: function () {
            var token = this.node.caseSemicolon;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(5), this.relativeIndexAt(5));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchSyntaxNode.prototype, "caseClauses", {
        get: function () {
            if (this._caseClauses === void 0) {
                this._caseClauses = this.createChildNode(6);
            }
            return this._caseClauses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchSyntaxNode.prototype, "closeBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBrace, this, this.offsetAt(7), this.relativeIndexAt(7));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchSyntaxNode.prototype, "count", {
        get: function () {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    SwitchSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitSwitch(this);
    };
    SwitchSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitSwitch(this);
    };
    SwitchSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expression !== void 0 ? this._expression : null;
            case 6:
                return this._caseClauses !== void 0 ? this._caseClauses : null;
            default:
                return null;
        }
    };
    SwitchSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expression === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            case 6:
                if (this._caseClauses === void 0) {
                    this._caseClauses = this.createChildNode(6);
                }
                return this._caseClauses;
            default:
                return null;
        }
    };
    return SwitchSyntaxNode;
}(SelectionSyntaxNode));
exports.SwitchSyntaxNode = SwitchSyntaxNode;
var SwitchBlockSyntaxNode = /** @class */ (function (_super) {
    __extends(SwitchBlockSyntaxNode, _super);
    function SwitchBlockSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        _this._caseClauses = undefined;
        return _this;
    }
    Object.defineProperty(SwitchBlockSyntaxNode.prototype, "switchKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.switchKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchBlockSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchBlockSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchBlockSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchBlockSyntaxNode.prototype, "colon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.colon, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchBlockSyntaxNode.prototype, "caseSemicolon", {
        get: function () {
            var token = this.node.caseSemicolon;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(5), this.relativeIndexAt(5));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchBlockSyntaxNode.prototype, "caseClauses", {
        get: function () {
            if (this._caseClauses === void 0) {
                this._caseClauses = this.createChildNode(6);
            }
            return this._caseClauses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchBlockSyntaxNode.prototype, "endSwitch", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.endSwitch, this, this.offsetAt(7), this.relativeIndexAt(7));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchBlockSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(8), this.relativeIndexAt(8));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SwitchBlockSyntaxNode.prototype, "count", {
        get: function () {
            return 9;
        },
        enumerable: false,
        configurable: true
    });
    SwitchBlockSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitSwitchBlock(this);
    };
    SwitchBlockSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitSwitchBlock(this);
    };
    SwitchBlockSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expression !== void 0 ? this._expression : null;
            case 6:
                return this._caseClauses !== void 0 ? this._caseClauses : null;
            default:
                return null;
        }
    };
    SwitchBlockSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expression === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            case 6:
                if (this._caseClauses === void 0) {
                    this._caseClauses = this.createChildNode(6);
                }
                return this._caseClauses;
            default:
                return null;
        }
    };
    return SwitchBlockSyntaxNode;
}(SelectionSyntaxNode));
exports.SwitchBlockSyntaxNode = SwitchBlockSyntaxNode;
var ThrowSyntaxNode = /** @class */ (function (_super) {
    __extends(ThrowSyntaxNode, _super);
    function ThrowSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expression = undefined;
        return _this;
    }
    Object.defineProperty(ThrowSyntaxNode.prototype, "throwKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.throwKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThrowSyntaxNode.prototype, "expression", {
        get: function () {
            if (this._expression === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expression = node;
            }
            return this._expression;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThrowSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ThrowSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    ThrowSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitThrow(this);
    };
    ThrowSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitThrow(this);
    };
    ThrowSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._expression !== void 0 ? this._expression : null;
            default:
                return null;
        }
    };
    ThrowSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._expression === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expression = node;
                }
                return this._expression;
            default:
                return null;
        }
    };
    return ThrowSyntaxNode;
}(StatementSyntaxNode));
exports.ThrowSyntaxNode = ThrowSyntaxNode;
var TraitDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(TraitDeclarationSyntaxNode, _super);
    function TraitDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._members = undefined;
        return _this;
    }
    Object.defineProperty(TraitDeclarationSyntaxNode.prototype, "traitKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.traitKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitDeclarationSyntaxNode.prototype, "identifier", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.identifier, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitDeclarationSyntaxNode.prototype, "openBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBrace, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitDeclarationSyntaxNode.prototype, "members", {
        get: function () {
            if (this._members === void 0) {
                this._members = this.createChildNode(3);
            }
            return this._members;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitDeclarationSyntaxNode.prototype, "closeBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBrace, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    TraitDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitTraitDeclaration(this);
    };
    TraitDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitDeclaration(this);
    };
    TraitDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 3:
                return this._members !== void 0 ? this._members : null;
            default:
                return null;
        }
    };
    TraitDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 3:
                if (this._members === void 0) {
                    this._members = this.createChildNode(3);
                }
                return this._members;
            default:
                return null;
        }
    };
    return TraitDeclarationSyntaxNode;
}(TypeDeclarationSyntaxNode));
exports.TraitDeclarationSyntaxNode = TraitDeclarationSyntaxNode;
var TraitUseSyntaxNode = /** @class */ (function (_super) {
    __extends(TraitUseSyntaxNode, _super);
    function TraitUseSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._traitNames = undefined;
        return _this;
    }
    Object.defineProperty(TraitUseSyntaxNode.prototype, "useKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.useKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseSyntaxNode.prototype, "traitNames", {
        get: function () {
            if (this._traitNames === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._traitNames = node;
            }
            return this._traitNames;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseSyntaxNode.prototype, "count", {
        get: function () {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    TraitUseSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitTraitUse(this);
    };
    TraitUseSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitUse(this);
    };
    TraitUseSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._traitNames !== void 0 ? this._traitNames : null;
            default:
                return null;
        }
    };
    TraitUseSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._traitNames === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._traitNames = node;
                }
                return this._traitNames;
            default:
                return null;
        }
    };
    return TraitUseSyntaxNode;
}(StatementSyntaxNode));
exports.TraitUseSyntaxNode = TraitUseSyntaxNode;
var TraitUseGroupSyntaxNode = /** @class */ (function (_super) {
    __extends(TraitUseGroupSyntaxNode, _super);
    function TraitUseGroupSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._traitNames = undefined;
        _this._adaptations = undefined;
        return _this;
    }
    Object.defineProperty(TraitUseGroupSyntaxNode.prototype, "useKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.useKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseGroupSyntaxNode.prototype, "traitNames", {
        get: function () {
            if (this._traitNames === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._traitNames = node;
            }
            return this._traitNames;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseGroupSyntaxNode.prototype, "openBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBrace, this, this.offsetAt(2), this.relativeIndexAt(2));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseGroupSyntaxNode.prototype, "adaptations", {
        get: function () {
            if (this._adaptations === void 0) {
                this._adaptations = this.createChildNode(3);
            }
            return this._adaptations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseGroupSyntaxNode.prototype, "closeBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBrace, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraitUseGroupSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    TraitUseGroupSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitTraitUseGroup(this);
    };
    TraitUseGroupSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTraitUseGroup(this);
    };
    TraitUseGroupSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._traitNames !== void 0 ? this._traitNames : null;
            case 3:
                return this._adaptations !== void 0 ? this._adaptations : null;
            default:
                return null;
        }
    };
    TraitUseGroupSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._traitNames === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._traitNames = node;
                }
                return this._traitNames;
            case 3:
                if (this._adaptations === void 0) {
                    this._adaptations = this.createChildNode(3);
                }
                return this._adaptations;
            default:
                return null;
        }
    };
    return TraitUseGroupSyntaxNode;
}(StatementSyntaxNode));
exports.TraitUseGroupSyntaxNode = TraitUseGroupSyntaxNode;
var TrySyntaxNode = /** @class */ (function (_super) {
    __extends(TrySyntaxNode, _super);
    function TrySyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._statements = undefined;
        _this._catchClauses = undefined;
        _this._finallyClause = undefined;
        return _this;
    }
    Object.defineProperty(TrySyntaxNode.prototype, "tryKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.tryKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TrySyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statements = node;
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TrySyntaxNode.prototype, "catchClauses", {
        get: function () {
            if (this._catchClauses === void 0) {
                this._catchClauses = this.createChildNode(2);
            }
            return this._catchClauses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TrySyntaxNode.prototype, "finallyClause", {
        get: function () {
            if (this._finallyClause === void 0) {
                this._finallyClause = this.createChildNode(3);
            }
            return this._finallyClause;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TrySyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    TrySyntaxNode.prototype.accept = function (visitor) {
        visitor.visitTry(this);
    };
    TrySyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitTry(this);
    };
    TrySyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._statements !== void 0 ? this._statements : null;
            case 2:
                return this._catchClauses !== void 0 ? this._catchClauses : null;
            case 3:
                return this._finallyClause !== void 0 ? this._finallyClause : null;
            default:
                return null;
        }
    };
    TrySyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._statements === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statements = node;
                }
                return this._statements;
            case 2:
                if (this._catchClauses === void 0) {
                    this._catchClauses = this.createChildNode(2);
                }
                return this._catchClauses;
            case 3:
                if (this._finallyClause === void 0) {
                    this._finallyClause = this.createChildNode(3);
                }
                return this._finallyClause;
            default:
                return null;
        }
    };
    return TrySyntaxNode;
}(StatementSyntaxNode));
exports.TrySyntaxNode = TrySyntaxNode;
var UnarySyntaxNode = /** @class */ (function (_super) {
    __extends(UnarySyntaxNode, _super);
    function UnarySyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._operand = undefined;
        return _this;
    }
    Object.defineProperty(UnarySyntaxNode.prototype, "operator", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.operator, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnarySyntaxNode.prototype, "operand", {
        get: function () {
            if (this._operand === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._operand = node;
            }
            return this._operand;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnarySyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    UnarySyntaxNode.prototype.accept = function (visitor) {
        visitor.visitUnaryExpression(this);
    };
    UnarySyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitUnaryExpression(this);
    };
    UnarySyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._operand !== void 0 ? this._operand : null;
            default:
                return null;
        }
    };
    UnarySyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._operand === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._operand = node;
                }
                return this._operand;
            default:
                return null;
        }
    };
    return UnarySyntaxNode;
}(ExpressionSyntaxNode));
exports.UnarySyntaxNode = UnarySyntaxNode;
var UnsetSyntaxNode = /** @class */ (function (_super) {
    __extends(UnsetSyntaxNode, _super);
    function UnsetSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._expressionList = undefined;
        return _this;
    }
    Object.defineProperty(UnsetSyntaxNode.prototype, "unsetKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.unsetKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnsetSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnsetSyntaxNode.prototype, "expressionList", {
        get: function () {
            if (this._expressionList === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._expressionList = node;
            }
            return this._expressionList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnsetSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnsetSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnsetSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    UnsetSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitUnset(this);
    };
    UnsetSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitUnset(this);
    };
    UnsetSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._expressionList !== void 0 ? this._expressionList : null;
            default:
                return null;
        }
    };
    UnsetSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._expressionList === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._expressionList = node;
                }
                return this._expressionList;
            default:
                return null;
        }
    };
    return UnsetSyntaxNode;
}(StatementSyntaxNode));
exports.UnsetSyntaxNode = UnsetSyntaxNode;
var UseDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(UseDeclarationSyntaxNode, _super);
    function UseDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._declarations = undefined;
        return _this;
    }
    Object.defineProperty(UseDeclarationSyntaxNode.prototype, "useKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.useKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseDeclarationSyntaxNode.prototype, "useType", {
        get: function () {
            var token = this.node.useType;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(1), this.relativeIndexAt(1));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseDeclarationSyntaxNode.prototype, "declarations", {
        get: function () {
            if (this._declarations === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._declarations = node;
            }
            return this._declarations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseDeclarationSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    UseDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitUseDeclaration(this);
    };
    UseDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitUseDeclaration(this);
    };
    UseDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._declarations !== void 0 ? this._declarations : null;
            default:
                return null;
        }
    };
    UseDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._declarations === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._declarations = node;
                }
                return this._declarations;
            default:
                return null;
        }
    };
    return UseDeclarationSyntaxNode;
}(StatementSyntaxNode));
exports.UseDeclarationSyntaxNode = UseDeclarationSyntaxNode;
var UseGroupDeclarationSyntaxNode = /** @class */ (function (_super) {
    __extends(UseGroupDeclarationSyntaxNode, _super);
    function UseGroupDeclarationSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._rootName = undefined;
        _this._declarations = undefined;
        return _this;
    }
    Object.defineProperty(UseGroupDeclarationSyntaxNode.prototype, "useKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.useKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseGroupDeclarationSyntaxNode.prototype, "useType", {
        get: function () {
            var token = this.node.useType;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(1), this.relativeIndexAt(1));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseGroupDeclarationSyntaxNode.prototype, "rootName", {
        get: function () {
            if (this._rootName === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._rootName = node;
            }
            return this._rootName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseGroupDeclarationSyntaxNode.prototype, "openBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openBrace, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseGroupDeclarationSyntaxNode.prototype, "declarations", {
        get: function () {
            if (this._declarations === void 0) {
                var node = this.createChildNode(4);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._declarations = node;
            }
            return this._declarations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseGroupDeclarationSyntaxNode.prototype, "closeBrace", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeBrace, this, this.offsetAt(5), this.relativeIndexAt(5));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseGroupDeclarationSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(6), this.relativeIndexAt(6));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UseGroupDeclarationSyntaxNode.prototype, "count", {
        get: function () {
            return 7;
        },
        enumerable: false,
        configurable: true
    });
    UseGroupDeclarationSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitUseGroupDeclaration(this);
    };
    UseGroupDeclarationSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitUseGroupDeclaration(this);
    };
    UseGroupDeclarationSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._rootName !== void 0 ? this._rootName : null;
            case 4:
                return this._declarations !== void 0 ? this._declarations : null;
            default:
                return null;
        }
    };
    UseGroupDeclarationSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._rootName === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._rootName = node;
                }
                return this._rootName;
            case 4:
                if (this._declarations === void 0) {
                    var node = this.createChildNode(4);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._declarations = node;
                }
                return this._declarations;
            default:
                return null;
        }
    };
    return UseGroupDeclarationSyntaxNode;
}(StatementSyntaxNode));
exports.UseGroupDeclarationSyntaxNode = UseGroupDeclarationSyntaxNode;
var WhileSyntaxNode = /** @class */ (function (_super) {
    __extends(WhileSyntaxNode, _super);
    function WhileSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._condition = undefined;
        _this._statement = undefined;
        return _this;
    }
    Object.defineProperty(WhileSyntaxNode.prototype, "whileKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.whileKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileSyntaxNode.prototype, "condition", {
        get: function () {
            if (this._condition === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._condition = node;
            }
            return this._condition;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileSyntaxNode.prototype, "statement", {
        get: function () {
            if (this._statement === void 0) {
                var node = this.createChildNode(4);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._statement = node;
            }
            return this._statement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileSyntaxNode.prototype, "count", {
        get: function () {
            return 5;
        },
        enumerable: false,
        configurable: true
    });
    WhileSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitWhile(this);
    };
    WhileSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitWhile(this);
    };
    WhileSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._condition !== void 0 ? this._condition : null;
            case 4:
                return this._statement !== void 0 ? this._statement : null;
            default:
                return null;
        }
    };
    WhileSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._condition === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._condition = node;
                }
                return this._condition;
            case 4:
                if (this._statement === void 0) {
                    var node = this.createChildNode(4);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._statement = node;
                }
                return this._statement;
            default:
                return null;
        }
    };
    return WhileSyntaxNode;
}(IterationSyntaxNode));
exports.WhileSyntaxNode = WhileSyntaxNode;
var WhileBlockSyntaxNode = /** @class */ (function (_super) {
    __extends(WhileBlockSyntaxNode, _super);
    function WhileBlockSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._condition = undefined;
        _this._statements = undefined;
        return _this;
    }
    Object.defineProperty(WhileBlockSyntaxNode.prototype, "whileKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.whileKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileBlockSyntaxNode.prototype, "openParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.openParen, this, this.offsetAt(1), this.relativeIndexAt(1));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileBlockSyntaxNode.prototype, "condition", {
        get: function () {
            if (this._condition === void 0) {
                var node = this.createChildNode(2);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._condition = node;
            }
            return this._condition;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileBlockSyntaxNode.prototype, "closeParen", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.closeParen, this, this.offsetAt(3), this.relativeIndexAt(3));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileBlockSyntaxNode.prototype, "colon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.colon, this, this.offsetAt(4), this.relativeIndexAt(4));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileBlockSyntaxNode.prototype, "statements", {
        get: function () {
            if (this._statements === void 0) {
                this._statements = this.createChildNode(5);
            }
            return this._statements;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileBlockSyntaxNode.prototype, "endWhileKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.endWhileKeyword, this, this.offsetAt(6), this.relativeIndexAt(6));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileBlockSyntaxNode.prototype, "semicolon", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.semicolon, this, this.offsetAt(7), this.relativeIndexAt(7));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WhileBlockSyntaxNode.prototype, "count", {
        get: function () {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    WhileBlockSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitWhileBlock(this);
    };
    WhileBlockSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitWhileBlock(this);
    };
    WhileBlockSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 2:
                return this._condition !== void 0 ? this._condition : null;
            case 5:
                return this._statements !== void 0 ? this._statements : null;
            default:
                return null;
        }
    };
    WhileBlockSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 2:
                if (this._condition === void 0) {
                    var node = this.createChildNode(2);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._condition = node;
                }
                return this._condition;
            case 5:
                if (this._statements === void 0) {
                    this._statements = this.createChildNode(5);
                }
                return this._statements;
            default:
                return null;
        }
    };
    return WhileBlockSyntaxNode;
}(IterationSyntaxNode));
exports.WhileBlockSyntaxNode = WhileBlockSyntaxNode;
var YieldSyntaxNode = /** @class */ (function (_super) {
    __extends(YieldSyntaxNode, _super);
    function YieldSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._key = undefined;
        _this._value = undefined;
        return _this;
    }
    Object.defineProperty(YieldSyntaxNode.prototype, "yieldKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.yieldKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(YieldSyntaxNode.prototype, "key", {
        get: function () {
            if (this._key === void 0) {
                this._key = this.createChildNode(1);
            }
            return this._key;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(YieldSyntaxNode.prototype, "doubleArrow", {
        get: function () {
            var token = this.node.doubleArrow;
            if (token !== null) {
                return new SyntaxToken_1.SyntaxToken(token, this, this.offsetAt(2), this.relativeIndexAt(2));
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(YieldSyntaxNode.prototype, "value", {
        get: function () {
            if (this._value === void 0) {
                this._value = this.createChildNode(3);
            }
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(YieldSyntaxNode.prototype, "count", {
        get: function () {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    YieldSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitYield(this);
    };
    YieldSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitYield(this);
    };
    YieldSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._key !== void 0 ? this._key : null;
            case 3:
                return this._value !== void 0 ? this._value : null;
            default:
                return null;
        }
    };
    YieldSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._key === void 0) {
                    this._key = this.createChildNode(1);
                }
                return this._key;
            case 3:
                if (this._value === void 0) {
                    this._value = this.createChildNode(3);
                }
                return this._value;
            default:
                return null;
        }
    };
    return YieldSyntaxNode;
}(ExpressionSyntaxNode));
exports.YieldSyntaxNode = YieldSyntaxNode;
var YieldFromSyntaxNode = /** @class */ (function (_super) {
    __extends(YieldFromSyntaxNode, _super);
    function YieldFromSyntaxNode(node, parent, offset) {
        var _this = _super.call(this, node, parent, offset) || this;
        _this._delegate = undefined;
        return _this;
    }
    Object.defineProperty(YieldFromSyntaxNode.prototype, "yieldFromKeyword", {
        get: function () {
            return new SyntaxToken_1.SyntaxToken(this.node.yieldFromKeyword, this, this.offsetAt(0), this.relativeIndexAt(0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(YieldFromSyntaxNode.prototype, "delegate", {
        get: function () {
            if (this._delegate === void 0) {
                var node = this.createChildNode(1);
                if (!node) {
                    throw new php_common_1.InvalidOperationException('Unable to create child node');
                }
                this._delegate = node;
            }
            return this._delegate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(YieldFromSyntaxNode.prototype, "count", {
        get: function () {
            return 2;
        },
        enumerable: false,
        configurable: true
    });
    YieldFromSyntaxNode.prototype.accept = function (visitor) {
        visitor.visitYieldFrom(this);
    };
    YieldFromSyntaxNode.prototype.acceptResult = function (visitor) {
        return visitor.visitYieldFrom(this);
    };
    YieldFromSyntaxNode.prototype.childAt = function (index) {
        switch (index) {
            case 1:
                return this._delegate !== void 0 ? this._delegate : null;
            default:
                return null;
        }
    };
    YieldFromSyntaxNode.prototype.defineChildAt = function (index) {
        switch (index) {
            case 1:
                if (this._delegate === void 0) {
                    var node = this.createChildNode(1);
                    if (!node) {
                        throw new php_common_1.InvalidOperationException('Unable to create child node');
                    }
                    this._delegate = node;
                }
                return this._delegate;
            default:
                return null;
        }
    };
    return YieldFromSyntaxNode;
}(ExpressionSyntaxNode));
exports.YieldFromSyntaxNode = YieldFromSyntaxNode;
