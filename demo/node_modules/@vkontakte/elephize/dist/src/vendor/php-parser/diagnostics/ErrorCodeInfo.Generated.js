/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ----------------------------------------------------------------------------
// THIS IS A GENERATED FILE. DO NOT MODIFY.
// ----------------------------------------------------------------------------
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorCodeInfo = void 0;
var php_common_1 = require("../../php-common");
var ErrorCode_Generated_1 = require("./ErrorCode.Generated");
var DiagnosticSeverity_1 = require("./DiagnosticSeverity");
var ResourceSet_1 = require("./ResourceSet");
var ErrorCodeInfo = /** @class */ (function () {
    function ErrorCodeInfo() {
    }
    ErrorCodeInfo.formatMessage = function (code, messageArgs) {
        var message = ErrorCodeInfo.getMessage(code);
        if (messageArgs.length > 0) {
            var args_1 = messageArgs.slice();
            message = message.replace(/%s/g, function () { return args_1.shift(); });
        }
        return message;
    };
    ErrorCodeInfo.getMessage = function (code) {
        if (code <= ErrorCode_Generated_1.ErrorCode.Unknown) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        var data = ErrorCodeInfo.Resources.get(code.toString());
        return data.text;
    };
    ErrorCodeInfo.getSeverity = function (code) {
        if (ErrorCodeInfo.isInfo(code)) {
            return DiagnosticSeverity_1.DiagnosticSeverity.Info;
        }
        else if (ErrorCodeInfo.isWarning(code)) {
            return DiagnosticSeverity_1.DiagnosticSeverity.Warning;
        }
        else {
            return DiagnosticSeverity_1.DiagnosticSeverity.Error;
        }
    };
    ErrorCodeInfo.isInfo = function (code) {
        switch (code) {
            default:
                return false;
        }
    };
    ErrorCodeInfo.isWarning = function (code) {
        switch (code) {
            case ErrorCode_Generated_1.ErrorCode.WRN_InvalidEscapeSequence:
            case ErrorCode_Generated_1.ErrorCode.WRN_OctalEscapeSequenceOverflow:
            case ErrorCode_Generated_1.ErrorCode.WRN_UnterminatedComment:
            case ErrorCode_Generated_1.ErrorCode.WRN_EmptySwitchBlock:
            case ErrorCode_Generated_1.ErrorCode.WRN_PossibleMistakenEmptyStatement:
            case ErrorCode_Generated_1.ErrorCode.WRN_RealCast:
            case ErrorCode_Generated_1.ErrorCode.WRN_UnsetCast:
                return true;
            default:
                return false;
        }
    };
    ErrorCodeInfo.Resources = new ResourceSet_1.ResourceSet('../ErrorCode.json');
    return ErrorCodeInfo;
}());
exports.ErrorCodeInfo = ErrorCodeInfo;
