/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxNodeBase = void 0;
var php_common_1 = require("../../../php-common");
var DiagnosticSeverity_1 = require("../../diagnostics/DiagnosticSeverity");
var NodeExtensions_1 = require("../node/NodeExtensions");
var SyntaxNodeExtensions_1 = require("./SyntaxNodeExtensions");
var SyntaxToken_1 = require("./SyntaxToken");
var TextSpan_1 = require("../../text/TextSpan");
/**
 * Stores the iteration state of a (parent) node.
 *
 * @todo Add triviaIndex property?
 */
var NodeIteration = /** @class */ (function () {
    /**
     * Constructs a `NodeIteration` object.
     *
     * @param {INode} node
     *   The current node being iterated upon.
     * @param {number} childIndex
     *   The index of a child to restart from.
     */
    function NodeIteration(node, childIndex) {
        this.node = node;
        this.childIndex = childIndex;
    }
    return NodeIteration;
}());
/**
 * Provides a base class for non-terminal nodes in a syntax tree.
 */
var SyntaxNodeBase = /** @class */ (function () {
    /**
     * Constructs a `SyntaxNodeBase` object.
     *
     * @param {INode} node
     *   An object containing the metadata for this node.
     * @param {ISyntaxNode|null} parent
     *   The syntax node containing this node, if any.
     * @param {number} offset
     *   The absolute location of this node in the source text.
     */
    function SyntaxNodeBase(node, parent, offset) {
        php_common_1.Debug.assert(offset >= 0);
        this.node = node;
        this.offset = offset;
        this.parent = parent;
    }
    Object.defineProperty(SyntaxNodeBase.prototype, "count", {
        /**
         * The number of child nodes and tokens.
         *
         * @todo Unused.
         */
        get: function () {
            return this.node.count;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxNodeBase.prototype, "fullWidth", {
        /**
         * The width of the node, including trivia.
         *
         * This is a performance optimization to avoid the overhead of creating and
         * using a `TextSpan` object.
         *
         * @todo Unused.
         */
        get: function () {
            return this.node.fullWidth;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxNodeBase.prototype, "hasError", {
        /**
         * @inheritDoc
         */
        get: function () {
            var e_1, _a;
            if (!this.node.containsDiagnostics) {
                return false;
            }
            try {
                for (var _b = __values(this.getDiagnostics()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var d = _c.value;
                    if (d.severity === DiagnosticSeverity_1.DiagnosticSeverity.Error) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxNodeBase.prototype, "isList", {
        /**
         * Determines if the current node contains a list of child nodes and tokens.
         *
         * @todo Unused.
         */
        get: function () {
            return this.node.isList;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxNodeBase.prototype, "isToken", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.node.isToken;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxNodeBase.prototype, "containsDiagnostics", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.node.containsDiagnostics;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxNodeBase.prototype, "containsSkippedText", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.node.containsSkippedText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxNodeBase.prototype, "fullSpan", {
        /**
         * @inheritDoc
         */
        get: function () {
            // NOTE: This is unlikely to be called unless the node also contains a
            // diagnostic. Since the vast majority of nodes are fine, this is not stored
            // as a property in order to save memory.
            return new TextSpan_1.TextSpan(this.offset, this.node.fullWidth);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxNodeBase.prototype, "hasLeadingTrivia", {
        /**
         * Determines if the node contains a child token with leading trivia.
         */
        get: function () {
            return this.leadingTrivia !== null ? this.leadingTrivia.count > 0 : false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxNodeBase.prototype, "isMissing", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.node.isMissing;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxNodeBase.prototype, "leadingTrivia", {
        /**
         * The leading trivia of the first token within the node.
         */
        get: function () {
            var token = this.firstToken(true);
            if (token !== null) {
                return token.leadingTrivia;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxNodeBase.prototype, "span", {
        /**
         * @inheritDoc
         */
        get: function () {
            var triviaWidth = this.node.leadingTriviaWidth;
            return new TextSpan_1.TextSpan(this.offset + triviaWidth, this.node.fullWidth - triviaWidth);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Finds the child token at the given offset.
     *
     * @param {SyntaxNodeBase} parent
     *   The parent node.
     * @param {number} offset
     *   The offset of the token, relative to the start of the syntax tree.
     *
     * @todo Experimental.
     */
    SyntaxNodeBase.getToken = function (parent, offset) {
        php_common_1.Debug.assert(parent.fullSpan.contains(offset));
        var node = parent.node;
        var start = parent.offset;
        var index = 0;
        var relativeIndex = 0;
        var count = node.count;
        while (index < count) {
            var child = node.childAt(index);
            if (child !== null) {
                var end = start + child.fullWidth;
                if (offset < end) {
                    if (child.isToken) {
                        // If the child is a token then the parent must be a node.
                        return new SyntaxToken_1.SyntaxToken(child, parent, start, relativeIndex);
                    }
                    // Found a node, search through its children.
                    // @todo Technically this could be done recursively.
                    var syntaxNode = parent.defineChildAt(index);
                    if (!(syntaxNode instanceof SyntaxNodeBase)) {
                        // Either the child did not exist (which shouldn't be possible) or
                        // the parent created a child that didn't derive from its base type.
                        throw new php_common_1.InvalidOperationException();
                    }
                    node = child;
                    parent = syntaxNode;
                    index = child.indexAtOffset(offset - start);
                    count = child.count;
                    start += child.offsetAt(index);
                    relativeIndex += NodeExtensions_1.NodeExtensions.childCount(child);
                    continue;
                }
                else {
                    // Offset is not within this child.
                    start = end;
                    relativeIndex += NodeExtensions_1.NodeExtensions.childCount(child);
                }
            }
            index++;
        }
        // Parent did not contain the specified offset.
        throw new php_common_1.Exception('Token not found');
    };
    /**
     * Gets a descendant node or token based on a relative index.
     *
     * @param {SyntaxNodeBase} parent
     *   The parent node.
     * @param {number} relativeIndex
     *   The child index relative to any lists contained in the parent.
     *
     * @todo Experimental.
     */
    SyntaxNodeBase.relativeChildAt = function (parent, relativeIndex) {
        var child = null;
        var nodeIndex = 0;
        var listIndex = relativeIndex;
        var offset = parent.offset;
        // Find the actual index of the child in the current node, its index in the
        // child list (if any), and its offset.
        var count = parent.node.count;
        while (nodeIndex < count) {
            child = parent.node.childAt(nodeIndex);
            if (child !== null) {
                var size = child.isList ? child.count : 1;
                if (listIndex < size) {
                    break;
                }
                listIndex -= size;
                offset += child.fullWidth;
            }
            nodeIndex++;
        }
        if (child === null) {
            throw new php_common_1.Exception('Child node not found');
        }
        var syntaxNode = parent.defineChildAt(nodeIndex);
        if (syntaxNode !== null) {
            if (!child.isList) {
                // If the node is not a list, then neither is the syntax node.
                return syntaxNode;
            }
            if (!(syntaxNode instanceof SyntaxNodeBase)) {
                // The parent created a child that didn't derive from its base type.
                throw new php_common_1.InvalidOperationException();
            }
            var syntaxListChild = syntaxNode.defineChildAt(listIndex);
            if (syntaxListChild !== null) {
                // Lists can only contain nodes.
                return syntaxListChild;
            }
            // Found a token in a delimited list.
            child = child.childAt(listIndex);
            offset = syntaxNode.offsetAt(listIndex);
            if (child === null) {
                throw new php_common_1.Exception('List nodes cannot contain undefined or null entries');
            }
        }
        // The child must be a token (and its parent must be a node).
        return new SyntaxToken_1.SyntaxToken(child, parent, offset, relativeIndex);
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.allChildren = function () {
        var count = NodeExtensions_1.NodeExtensions.childCount(this.node);
        var children = new Array(count);
        for (var i = 0; i < count; i++) {
            children[i] = SyntaxNodeBase.relativeChildAt(this, i);
        }
        return children;
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.ancestors = function () {
        return this.parent !== null ? this.parent.ancestorsAndSelf() : [];
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.ancestorsAndSelf = function () {
        var parents = [];
        var node = this;
        while (node !== null) {
            parents.push(node);
            node = node.parent;
        }
        return parents;
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.childNodes = function () {
        var nodes = [];
        var count = NodeExtensions_1.NodeExtensions.childCount(this.node);
        for (var i = 0; i < count; i++) {
            var child = SyntaxNodeBase.relativeChildAt(this, i);
            if (!child.isToken) {
                nodes.push(child);
            }
        }
        return nodes;
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.childTokens = function () {
        var tokens = [];
        var children = this.allChildren();
        for (var i = 0; i < children.length; i++) {
            var child = children[i];
            if (child.isToken) {
                tokens.push(child);
            }
        }
        return tokens;
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.contains = function (node) {
        if (node === null || !this.fullSpan.contains(node.fullSpan)) {
            return false;
        }
        while (node !== null) {
            if (this.equals(node)) {
                return true;
            }
            node = node.parent;
        }
        return false;
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.equals = function (value) {
        // Reference equality should be sufficient since nodes should not be
        // created multiple times while traversing through a syntax tree.
        return this === value;
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.findChildNode = function (span, innermostNode) {
        if (innermostNode === void 0) { innermostNode = false; }
        // Find the first token in the span.
        var token = this.findChildToken(span.start);
        // Then find the first node that contains the entire span.
        var node = token.parent.firstAncestorOrSelf(function (value) {
            return value.fullSpan.contains(span);
        });
        if (node === null) {
            throw new php_common_1.Exception('Parent node not found'); // Unreachable.
        }
        if (!innermostNode) {
            while (node.parent !== null) {
                // @todo It would be faster to use `fullWidth` instead.
                if (!node.parent.fullSpan.equals(node.fullSpan)) {
                    break;
                }
                if (SyntaxNodeExtensions_1.SyntaxNodeExtensions.isSourceTextSyntaxNode(node.parent)) {
                    break;
                }
                node = node.parent;
            }
        }
        return node;
    };
    /**
     * @inheritdoc
     */
    SyntaxNodeBase.prototype.findChildToken = function (offset) {
        var end = this.offset + this.node.fullWidth;
        if (offset === end && SyntaxNodeExtensions_1.SyntaxNodeExtensions.isSourceTextSyntaxNode(this)) {
            return this.eof;
        }
        if (!this.fullSpan.contains(offset)) {
            throw new php_common_1.ArgumentOutOfRangeException();
        }
        return SyntaxNodeBase.getToken(this, offset);
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.firstAncestorOrSelf = function (nodeFilter) {
        var node = this;
        while (node !== null) {
            if (nodeFilter === undefined || nodeFilter(node)) {
                return node;
            }
            node = node.parent;
        }
        return null;
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.firstToken = function (includeZeroWidth) {
        if (includeZeroWidth === void 0) { includeZeroWidth = false; }
        if (!includeZeroWidth) {
            return SyntaxNodeExtensions_1.SyntaxNodeExtensions.tryGetFirstToken(this, SyntaxToken_1.SyntaxToken.hasWidth);
        }
        return SyntaxNodeExtensions_1.SyntaxNodeExtensions.tryGetFirstToken(this);
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.getAllChildren = function () {
        var count, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    count = NodeExtensions_1.NodeExtensions.childCount(this.node);
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < count)) return [3 /*break*/, 4];
                    return [4 /*yield*/, SyntaxNodeBase.relativeChildAt(this, i)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.getAllChildrenReversed = function () {
        var count, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    count = NodeExtensions_1.NodeExtensions.childCount(this.node);
                    i = count - 1;
                    _a.label = 1;
                case 1:
                    if (!(i >= 0)) return [3 /*break*/, 4];
                    return [4 /*yield*/, SyntaxNodeBase.relativeChildAt(this, i)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i--;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.getAncestors = function () {
        var node;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    node = this.parent;
                    _a.label = 1;
                case 1:
                    if (!(node !== null)) return [3 /*break*/, 3];
                    return [4 /*yield*/, node];
                case 2:
                    _a.sent();
                    node = node.parent;
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.getAncestorsAndSelf = function () {
        var node;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    node = this;
                    _a.label = 1;
                case 1:
                    if (!(node !== null)) return [3 /*break*/, 3];
                    return [4 /*yield*/, node];
                case 2:
                    _a.sent();
                    node = node.parent;
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.getChildNodes = function () {
        var _a, _b, child, e_2_1;
        var e_2, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 5, 6, 7]);
                    _a = __values(this.getAllChildren()), _b = _a.next();
                    _d.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    child = _b.value;
                    if (!!child.isToken) return [3 /*break*/, 3];
                    return [4 /*yield*/, child];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_2_1 = _d.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.getChildTokens = function () {
        var _a, _b, child, e_3_1;
        var e_3, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 5, 6, 7]);
                    _a = __values(this.getAllChildren()), _b = _a.next();
                    _d.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    child = _b.value;
                    if (!child.isToken) return [3 /*break*/, 3];
                    return [4 /*yield*/, child];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_3_1 = _d.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_3) throw e_3.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.getDiagnostics = function () {
        var offset, iterationStack, iteration, node, triviaDiagnostics, i, start, diagnostics, i, start, count, i, child;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!this.node.containsDiagnostics) {
                        return [2 /*return*/];
                    }
                    offset = 0;
                    iterationStack = [new NodeIteration(this.node, 0)];
                    _a.label = 1;
                case 1:
                    if (!(iterationStack.length > 0)) return [3 /*break*/, 11];
                    iteration = iterationStack.pop();
                    node = iteration.node;
                    if (!(iteration.childIndex === 0)) return [3 /*break*/, 10];
                    if (!(node.leadingTrivia !== null && node.leadingTrivia.containsDiagnostics)) return [3 /*break*/, 5];
                    triviaDiagnostics = this.getTriviaDiagnostics(node.leadingTrivia);
                    i = 0;
                    _a.label = 2;
                case 2:
                    if (!(i < triviaDiagnostics.length)) return [3 /*break*/, 5];
                    start = offset + triviaDiagnostics[i].offset;
                    return [4 /*yield*/, triviaDiagnostics[i].withOffset(start)];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    i++;
                    return [3 /*break*/, 2];
                case 5:
                    diagnostics = node.diagnostics;
                    i = 0;
                    _a.label = 6;
                case 6:
                    if (!(i < diagnostics.length)) return [3 /*break*/, 9];
                    start = offset /*+ triviaWidth*/ + diagnostics[i].offset;
                    // @todo Temporary. SyntaxDiagnostics are not meant to have absolute positions.
                    return [4 /*yield*/, diagnostics[i].withOffset(start)];
                case 7:
                    // @todo Temporary. SyntaxDiagnostics are not meant to have absolute positions.
                    _a.sent();
                    _a.label = 8;
                case 8:
                    i++;
                    return [3 /*break*/, 6];
                case 9:
                    if (node.isToken) {
                        offset += node.fullWidth;
                    }
                    _a.label = 10;
                case 10:
                    count = node.count;
                    for (i = iteration.childIndex; i < count; i++) {
                        child = node.childAt(i);
                        if (child === null) {
                            continue;
                        }
                        if (child.containsDiagnostics) {
                            // Put the current node back. It will need to be finished later.
                            iterationStack.push(new NodeIteration(node, i + 1));
                            // The first child with a diagnostic is now the priority.
                            iterationStack.push(new NodeIteration(child, 0));
                            break;
                        }
                        else {
                            offset += child.fullWidth;
                        }
                    }
                    return [3 /*break*/, 1];
                case 11: return [2 /*return*/];
            }
        });
    };
    /**
     * @inheritDoc
     */
    SyntaxNodeBase.prototype.lastToken = function (includeZeroWidth) {
        if (includeZeroWidth === void 0) { includeZeroWidth = false; }
        if (!includeZeroWidth) {
            return SyntaxNodeExtensions_1.SyntaxNodeExtensions.tryGetLastToken(this, SyntaxToken_1.SyntaxToken.hasWidth);
        }
        return SyntaxNodeExtensions_1.SyntaxNodeExtensions.tryGetLastToken(this);
    };
    /**
     * Calculates the offset of the child at the given index.
     */
    SyntaxNodeBase.prototype.offsetAt = function (index) {
        var offset = 0;
        while (index > 0) {
            index--;
            // If a syntax node to the left has already been created, try and avoid
            // the worst case scenario of computing the offset of every child node.
            var childSyntaxNode = this.childAt(index);
            if (childSyntaxNode instanceof SyntaxNodeBase) {
                return childSyntaxNode.offset + childSyntaxNode.node.fullWidth + offset;
            }
            var childNode = this.node.childAt(index);
            if (childNode !== null) {
                offset += childNode.fullWidth;
            }
        }
        return this.offset + offset;
    };
    /**
     * Determines the relative index of a child.
     */
    SyntaxNodeBase.prototype.relativeIndexAt = function (index) {
        var relativeIndex = 0;
        for (var i = 0; i < index; i++) {
            var child = this.node.childAt(i);
            if (child !== null) {
                relativeIndex += child.isList ? child.count : 1;
            }
        }
        return relativeIndex;
    };
    /**
     * @todo Document getTriviaDiagnostics().
     */
    SyntaxNodeBase.prototype.getTriviaDiagnostics = function (trivia) {
        php_common_1.Debug.assert(trivia.containsDiagnostics);
        var diagnostics = [];
        if (trivia.isList) {
            var hasSkippedDiagnostic = false;
            var count = trivia.count;
            for (var i = 0; i < count; i++) {
                var child = trivia.childAt(i);
                if (child === null) {
                    continue;
                }
                php_common_1.Debug.assert(child.isTrivia);
                if (child.containsDiagnostics) {
                    if (child.containsSkippedText) {
                        if (!hasSkippedDiagnostic) {
                            diagnostics.push(child.diagnostics[0]);
                            hasSkippedDiagnostic = true;
                        }
                    }
                    else {
                        diagnostics = diagnostics.concat(child.diagnostics);
                    }
                }
            }
        }
        else {
            php_common_1.Debug.assert(trivia.isTrivia);
            if (trivia.containsSkippedText) {
                diagnostics.push(trivia.diagnostics[0]);
            }
            else {
                diagnostics = diagnostics.concat(trivia.diagnostics);
            }
        }
        return diagnostics;
    };
    return SyntaxNodeBase;
}());
exports.SyntaxNodeBase = SyntaxNodeBase;
