/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceTextBase = void 0;
var php_common_1 = require("../../php-common");
var SourceTextBuilder_1 = require("./SourceTextBuilder");
var SourceTextFactory_1 = require("./SourceTextFactory");
var TextSpan_1 = require("./TextSpan");
/**
 * Provides a base class for objects that contain source code.
 */
var SourceTextBase = /** @class */ (function () {
    function SourceTextBase() {
    }
    /**
     * @inheritDoc
     */
    SourceTextBase.prototype.equals = function (value) {
        if (value === this) {
            return true;
        }
        if (this.length !== value.length) {
            return false;
        }
        for (var i = 0; i < this.length; i++) {
            if (this.charCodeAt(i) !== value.charCodeAt(i)) {
                return false;
            }
        }
        return true;
    };
    /**
     * @inheritDoc
     */
    SourceTextBase.prototype.withChanges = function (changes) {
        var e_1, _a;
        var offset = 0;
        var hasInsertedText = false;
        var builder = new SourceTextBuilder_1.SourceTextBuilder(this.encoding);
        try {
            for (var changes_1 = __values(changes), changes_1_1 = changes_1.next(); !changes_1_1.done; changes_1_1 = changes_1.next()) {
                var change = changes_1_1.value;
                if (change.span.start < offset) {
                    throw new php_common_1.ArgumentException('Text changes must be sequential and cannot overlap');
                }
                // Skip "insert" and "delete" changes that do nothing.
                if (change.span.length === 0 && change.text.length === 0) {
                    continue;
                }
                // Add text between the previous change and this change.
                if (change.span.start > offset) {
                    builder.append(this.slice(new TextSpan_1.TextSpan(offset, change.span.start - offset)));
                }
                // If this is an "insert" or "replace" change, add its text.
                if (change.text.length > 0) {
                    builder.append(SourceTextFactory_1.SourceTextFactory.from(change.text));
                    hasInsertedText = true;
                }
                offset = change.span.end;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (changes_1_1 && !changes_1_1.done && (_a = changes_1.return)) _a.call(changes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // Nothing changed.
        if (offset === 0 && !hasInsertedText) {
            return this;
        }
        // Add the text between the last change and the end of the text.
        if (offset < this.length) {
            builder.append(this.slice(new TextSpan_1.TextSpan(offset, this.length - offset)));
        }
        return builder.toSourceText();
    };
    /**
     * Determines if the given span is within the source text.
     *
     * @param {TextSpan} span
     *   The span being checked.
     */
    SourceTextBase.prototype.isSpanInText = function (span) {
        if (span.start < 0 || span.start > this.length || span.end > this.length) {
            return false;
        }
        return true;
    };
    return SourceTextBase;
}());
exports.SourceTextBase = SourceTextBase;
