/**
 * Copyright 2017 Matt Acosta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxTriviaList = void 0;
var php_common_1 = require("../../../php-common");
var NodeExtensions_1 = require("../node/NodeExtensions");
var SyntaxNodeExtensions_1 = require("./SyntaxNodeExtensions");
var SyntaxTrivia_1 = require("./SyntaxTrivia");
var TextSpan_1 = require("../../text/TextSpan");
/**
 * Represents a collection of trivia nodes.
 */
var SyntaxTriviaList = /** @class */ (function () {
    /**
     * Constructs a `SyntaxTriviaList` object.
     */
    function SyntaxTriviaList(node, token, offset, index) {
        if (index === void 0) { index = 0; }
        this.index = index;
        this.node = node;
        this.offset = offset;
        this.token = token;
    }
    Object.defineProperty(SyntaxTriviaList.prototype, "count", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.node !== null ? (this.node.isList ? this.node.count : 1) : 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxTriviaList.prototype, "fullSpan", {
        /**
         * @inheritDoc
         */
        get: function () {
            return new TextSpan_1.TextSpan(this.offset, this.node !== null ? this.node.fullWidth : 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SyntaxTriviaList.prototype, "span", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.node !== null
                ? new TextSpan_1.TextSpan(this.offset + this.node.leadingTriviaWidth, this.node.width)
                : new TextSpan_1.TextSpan(this.offset, 0);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Attempts to get the first token from a trivia node containing structure.
     *
     * @param {ISyntaxTriviaList} triviaList
     *   The list of trivia to search.
     * @param {SyntaxTriviaFilter=} triviaFilter
     *   A callback used to limit which trivia nodes are searched.
     * @param {SyntaxTokenFilter=} tokenFilter
     *   A callback used to limit which structured nodes are returned.
     *
     * @return {ISyntaxToken|null}
     *   The first matching token, or `null` if either a trivia filter was not
     *   provided or no tokens matched the token filter.
     */
    SyntaxTriviaList.tryGetFirstToken = function (triviaList, triviaFilter, tokenFilter) {
        var e_1, _a;
        if (triviaFilter === undefined) {
            return null;
        }
        try {
            for (var triviaList_1 = __values(triviaList), triviaList_1_1 = triviaList_1.next(); !triviaList_1_1.done; triviaList_1_1 = triviaList_1.next()) {
                var trivia = triviaList_1_1.value;
                if (trivia.containsStructuredTrivia && triviaFilter(trivia)) {
                    // Suppress TS2345: Result cannot be null due to if-condition.
                    var structure = trivia.getStructure();
                    var token = SyntaxNodeExtensions_1.SyntaxNodeExtensions.tryGetFirstToken(structure, tokenFilter);
                    if (token !== null) {
                        return token;
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (triviaList_1_1 && !triviaList_1_1.done && (_a = triviaList_1.return)) _a.call(triviaList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return null;
    };
    /**
     * Attempts to get the last token from a trivia node containing structure
     * while searching in reversed order.
     *
     * @param {ISyntaxTriviaList} triviaList
     *   The list of trivia to search.
     * @param {SyntaxTriviaFilter=} triviaFilter
     *   A callback used to limit which trivia nodes are searched.
     * @param {SyntaxTokenFilter=} tokenFilter
     *   A callback used to limit which structured nodes are returned.
     *
     * @return {ISyntaxToken|null}
     *   The last matching token, or `null` if either a trivia filter was not
     *   provided or no tokens matched the token filter.
     */
    SyntaxTriviaList.tryGetLastToken = function (triviaList, triviaFilter, tokenFilter) {
        var e_2, _a;
        if (triviaFilter === undefined) {
            return null;
        }
        try {
            for (var _b = __values(triviaList.reversed()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var trivia = _c.value;
                if (trivia.containsStructuredTrivia && triviaFilter(trivia)) {
                    // Suppress TS2345: Result cannot be null due to if-condition.
                    var structure = trivia.getStructure();
                    var token = SyntaxNodeExtensions_1.SyntaxNodeExtensions.tryGetLastToken(structure, tokenFilter);
                    if (token !== null) {
                        return token;
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return null;
    };
    /**
     * @todo Experimental.
     */
    SyntaxTriviaList.prototype[Symbol.iterator] = function () {
        var length_1, i, node, offset;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (this.node === null) {
                        return [2 /*return*/];
                    }
                    if (!this.node.isList) return [3 /*break*/, 5];
                    length_1 = this.node.count;
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < length_1)) return [3 /*break*/, 4];
                    node = this.node.childAt(i);
                    offset = this.offset + this.node.offsetAt(i);
                    return [4 /*yield*/, new SyntaxTrivia_1.SyntaxTrivia(node, this.token, offset, this.index + i)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, new SyntaxTrivia_1.SyntaxTrivia(this.node, this.token, this.offset, this.index)];
                case 6:
                    _a.sent();
                    _a.label = 7;
                case 7: return [2 /*return*/];
            }
        });
    };
    /**
     * @inheritDoc
     */
    SyntaxTriviaList.prototype.equals = function (value) {
        if (this === value) {
            return true;
        }
        if (this.index === value.index && this.token.equals(value.token)) {
            return NodeExtensions_1.NodeExtensions.equals(this.node, value.node);
        }
        return false;
    };
    /**
     * @inheritDoc
     */
    SyntaxTriviaList.prototype.reversed = function () {
        var length_2, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(this.node !== null)) return [3 /*break*/, 4];
                    length_2 = this.count;
                    i = length_2 - 1;
                    _a.label = 1;
                case 1:
                    if (!(i >= 0)) return [3 /*break*/, 4];
                    return [4 /*yield*/, this.triviaAt(i)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i--;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    /**
     * @inheritDoc
     */
    SyntaxTriviaList.prototype.triviaAt = function (index) {
        if (this.node !== null) {
            if (this.node.isList) {
                if (index >= 0 && index < this.node.count) {
                    var offset = this.offset + this.node.offsetAt(index);
                    return new SyntaxTrivia_1.SyntaxTrivia(this.node.childAt(index), this.token, offset, this.index + index);
                }
            }
            else if (index === 0) {
                return new SyntaxTrivia_1.SyntaxTrivia(this.node, this.token, this.offset, this.index);
            }
        }
        throw new php_common_1.IndexOutOfRangeException();
    };
    /**
     * @todo Experimental.
     */
    SyntaxTriviaList.prototype.toArray = function () {
        if (this.node === null) {
            return [];
        }
        var list = new Array(this.node.count);
        if (this.node.isList) {
            var length_3 = this.node.count;
            for (var i = 0; i < length_3; i++) {
                var node = this.node.childAt(i);
                var offset = this.offset + this.node.offsetAt(i);
                list[i] = new SyntaxTrivia_1.SyntaxTrivia(node, this.token, offset, this.index + i);
            }
        }
        else {
            list[0] = new SyntaxTrivia_1.SyntaxTrivia(this.node, this.token, this.offset, this.index);
        }
        return list;
    };
    return SyntaxTriviaList;
}());
exports.SyntaxTriviaList = SyntaxTriviaList;
