"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringReplace = void 0;
var ts = require("typescript");
var _propName_1 = require("./_propName");
var basicTypes_1 = require("../../components/typeInference/basicTypes");
var renderNodes_1 = require("../../components/codegen/renderNodes");
var regexFlags_1 = require("../../utils/regexFlags");
/**
 * String.prototype.replace support
 *
 * @param node
 * @param context
 */
var stringReplace = function (node, context) {
    var propReplace = _propName_1.propNameIs('replace', node);
    var propReplaceAll = _propName_1.propNameIs('replaceAll', node);
    if (!(propReplace || propReplaceAll)) {
        return undefined;
    }
    if (!basicTypes_1.hasType(node.expression, context.checker, 'string')) {
        context.log.error('Left-hand expression must have string inferred type', [], context.log.ctx(node));
        return 'null';
    }
    context.nodeFlagsStore.upsert(node, { name: 'string_replace' });
    var varNameNode = node.expression.expression;
    var _a = __read(renderNodes_1.renderNodes(__spreadArray([], __read(node.arguments)), context), 2), pattern = _a[0], replacement = _a[1];
    var varName = renderNodes_1.renderNode(varNameNode, context);
    // replace can use string or regexp as pattern, so we should check inferred type of argument.
    var nd = node.arguments[0];
    var type = context.checker.getTypeAtLocation(nd);
    if (type.isStringLiteral() || context.checker.typeToString(type, nd, ts.TypeFormatFlags.None) === 'string') {
        // string literals as pattern
        if (propReplaceAll) {
            return "str_replace(" + pattern + ", " + replacement + ", " + varName + ")";
        }
        else {
            return "implode(" + replacement + ", explode(" + pattern + ", " + varName + ", 1))";
        }
    }
    else if (nd.kind === ts.SyntaxKind.RegularExpressionLiteral) { // regexp instances as pattern
        var reInfo = regexFlags_1.extractRegexFlags(pattern, context.log, nd);
        var uFlag = context.encoding.includes('utf') ? 'u' : ''; // always append unicode flag if we're outputting unicode
        if (reInfo.globalSearch) {
            return "preg_replace(\"/" + reInfo.expression + "/" + reInfo.phpFlags + uFlag + "\", " + replacement + ", " + varName + ")";
        }
        else {
            return "preg_replace(\"/" + reInfo.expression + "/" + reInfo.phpFlags + uFlag + "\", " + replacement + ", " + varName + ", 1)";
        }
    }
    else {
        context.log.error('String.prototype.replace: Non-string and non-regexp-literal patterns are not supported by transpiler.', [], context.log.ctx(node));
        return 'null';
    }
};
exports.stringReplace = stringReplace;
