"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tNewExpression = void 0;
var ts = require("typescript");
var ast_1 = require("../utils/ast");
var tNewExpression = function (node, context) {
    var _a = __read(context.moduleDescriptor.findImportedIdentifier(node.expression.getText()) || [], 2), file = _a[0], ident = _a[1];
    if (!file || !ident || !context.registry.isPlainClass(file, ident)) {
        context.log.error('Keyword `new` is supported only for plain classes', [], context.log.ctx(node));
        return '';
    }
    ast_1.flagParentOfType(node, [ts.SyntaxKind.VariableDeclaration], {
        boundClassInstance: context.registry.getPlainClassName(file, ident),
    }, context.nodeFlagsStore);
    return "new " + context.registry.getPlainClassName(file, ident) + "()";
};
exports.tNewExpression = tNewExpression;
