"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tJsxSelfClosingElement = void 0;
var ts = require("typescript");
var intrinsicElements_1 = require("../internalConfig/intrinsicElements");
var renderNodes_1 = require("../components/codegen/renderNodes");
function tJsxSelfClosingElement(node, context) {
    var _a;
    var attrs = renderNodes_1.renderNode(node.attributes, context);
    // support for dangerouslySetInnerHtml; don't render children if we have some prerendered data for node
    var innerhtml = ((_a = context.nodeFlagsStore.get(node)) === null || _a === void 0 ? void 0 : _a.prerenderedData) || [];
    if (node.tagName.kind !== ts.SyntaxKind.Identifier) {
        context.log.error('Non-identifiers are not supported as jsx elements', [], context.log.ctx(node));
        return 'null';
    }
    if (intrinsicElements_1.intrinsicElements[node.tagName.getText()]) {
        return "\\" + context.namespaces.builtins + "\\IntrinsicElement::get(\"" + node.tagName.getText() + "\")->render(" + (attrs || '[]') + ", [" + innerhtml.join(', ') + "])";
    }
    else {
        var decl = context.scope.findByIdent(node.tagName.getText());
        if (!decl) {
            context.log.error('Component identifier not declared: %s', [node.tagName.getText()], context.log.ctx(node));
            return 'null';
        }
        var _b = __read(decl, 1), declaration = _b[0];
        var component = void 0;
        if (declaration.flags.External || declaration.flags.DereferencedImport) {
            component = context.registry.getExportedComponent(context.moduleDescriptor, declaration.targetModulePath, node.tagName.getText());
        }
        else {
            component = context.registry.getLocalComponent(context.moduleDescriptor, node.tagName.getText());
        }
        if (!component) {
            context.log.error('Component not found neither in exports, nor in local scope: %s', [node.tagName.getText()], context.log.ctx(node));
            return '';
        }
        return component + "->render(" + (attrs || '[]') + ", [" + innerhtml.join(', ') + "])";
    }
}
exports.tJsxSelfClosingElement = tJsxSelfClosingElement;
