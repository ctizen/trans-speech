"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.arrayStringIncludes = void 0;
var ts = require("typescript");
var _propName_1 = require("./_propName");
var basicTypes_1 = require("../../components/typeInference/basicTypes");
var ast_1 = require("../../utils/ast");
var renderNodes_1 = require("../../components/codegen/renderNodes");
/**
 * String.prototype.includes support
 * Array.prototype.includes support
 *
 * @param node
 * @param context
 */
var arrayStringIncludes = function (node, context) {
    if (!_propName_1.propNameIs('includes', node)) {
        return undefined;
    }
    var nd = node.expression.expression;
    var type = context.checker.getTypeAtLocation(nd);
    var varNameNode = ast_1.getCallExpressionLeftSide(node);
    if (type.isStringLiteral() || context.checker.typeToString(type, nd, ts.TypeFormatFlags.None) === 'string') {
        var args = renderNodes_1.renderNodes(__spreadArray([], __read(node.arguments)), context);
        var varName = renderNodes_1.renderNode(varNameNode, context);
        if (!args || !args[0]) {
            context.log.error('String.prototype.includes: can\'t find searchable element in call.', [], context.log.ctx(node));
            return 'null';
        }
        if (args[1]) {
            return "strpos(" + varName + ", " + args[0] + ", " + args[1] + ") !== false";
        }
        else {
            return "strpos(" + varName + ", " + args[0] + ") !== false";
        }
    }
    else {
        if (!basicTypes_1.hasArrayType(node.expression, context.checker, context.log)) {
            context.log.error('Left-hand expression must have string, array-like or iterable inferred type', [], context.log.ctx(node));
            return 'null';
        }
        var args = renderNodes_1.renderNodes(__spreadArray([], __read(node.arguments)), context);
        var varName = renderNodes_1.renderNode(varNameNode, context);
        if (!args || !args[0]) {
            context.log.error('Array.prototype.includes: can\'t find searchable element in call.', [], context.log.ctx(node));
            return 'null';
        }
        if (args[1]) {
            return "in_array(" + args[0] + ", array_slice(" + varName + ", " + args[1] + "), true)";
        }
        else {
            return "in_array(" + args[0] + ", " + varName + ", true)";
        }
    }
};
exports.arrayStringIncludes = arrayStringIncludes;
