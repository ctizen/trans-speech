"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasOwnProperty = void 0;
var _propName_1 = require("./_propName");
var basicTypes_1 = require("../../components/typeInference/basicTypes");
var ast_1 = require("../../utils/ast");
var renderNodes_1 = require("../../components/codegen/renderNodes");
/**
 * Object.prototype.hasOwnProperty support
 *
 * @param node
 * @param context
 */
var hasOwnProperty = function (node, context) {
    if (!_propName_1.propNameIs('hasOwnProperty', node)) {
        return undefined;
    }
    var primitiveType = basicTypes_1.getPhpPrimitiveType(node.expression, context.checker, context.log);
    if (!primitiveType.includes('[]') && !primitiveType.includes('mixed')) {
        context.log.error('Left-hand expression must have object-like inferred type', [], context.log.ctx(node));
        return 'null';
    }
    var varNameNode = ast_1.getCallExpressionLeftSide(node);
    var args = renderNodes_1.renderNodes(__spreadArray([], __read(node.arguments)), context);
    var varName = renderNodes_1.renderNode(varNameNode, context);
    if (!args || !args[0]) {
        context.log.error('Object.prototype.hasOwnProperty: missing argument in call.', [], context.log.ctx(node));
        return 'null';
    }
    return "array_key_exists(" + args[0] + ", " + varName + ")";
};
exports.hasOwnProperty = hasOwnProperty;
