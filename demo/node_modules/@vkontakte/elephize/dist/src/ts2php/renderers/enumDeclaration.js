"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tEnumDeclaration = void 0;
var ts = require("typescript");
var renderNodes_1 = require("../components/codegen/renderNodes");
var basicTypes_1 = require("../components/typeInference/basicTypes");
var tEnumDeclaration = function (node, context) {
    var name = node.name.escapedText.toString();
    context.scope.addDeclaration(name, [], { dryRun: context.dryRun });
    var descriptor = context.registry.deriveEnumComponent(name, context.moduleDescriptor);
    if (!descriptor) {
        throw new Error();
    }
    var nextMemberValue = 0;
    var membersCount = 0;
    var assignedMembersCount = 0;
    node.members.forEach(function (member) {
        if (member.name.kind !== ts.SyntaxKind.Identifier && member.name.kind !== ts.SyntaxKind.StringLiteral && member.name.kind !== ts.SyntaxKind.NumericLiteral) {
            context.log.error('Only constant keys are supported for enums', [], context.log.ctx(member));
            return;
        }
        membersCount++;
        if (member.initializer) {
            assignedMembersCount++;
        }
        var val = member.initializer && renderNodes_1.renderNode(member.initializer, context);
        var valInt = val ? parseInt(val, 10) : 0;
        if (val && val === valInt.toString()) {
            nextMemberValue = valInt + 1;
        }
        else if (val === undefined) {
            val = nextMemberValue.toString();
            nextMemberValue++;
        }
        descriptor.addStaticConst(member.name.getText()
            .replace(/^['"]|['"]$/g, '')
            .toUpperCase(), val, member.initializer ?
            basicTypes_1.getPhpPrimitiveType(member.initializer, context.checker, context.log) :
            'int');
    });
    if (assignedMembersCount !== 0 && membersCount !== assignedMembersCount && context.dryRun) {
        context.log.error('Enum members must be either all assigned with values, or all unassigned.', [], context.log.ctx(node));
    }
    return '';
};
exports.tEnumDeclaration = tEnumDeclaration;
