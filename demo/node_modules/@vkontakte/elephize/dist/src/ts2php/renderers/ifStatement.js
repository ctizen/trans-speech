"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tIfStatement = void 0;
var isTopLevel_1 = require("../utils/isTopLevel");
var varsUsage_1 = require("../components/unusedCodeElimination/varsUsage");
var renderNodes_1 = require("../components/codegen/renderNodes");
function tIfStatement(node, context) {
    var e_1, _a;
    var _b = __read(varsUsage_1.collectVars(function () { return renderNodes_1.renderNode(node.expression, context); }, context), 2), usedVars = _b[0], condition = _b[1];
    var _c = __read(renderNodes_1.renderNodes([node.thenStatement, node.elseStatement], context), 2), ifTrue = _c[0], ifFalse = _c[1];
    var flags = context.nodeFlagsStore.get(node);
    if (flags === null || flags === void 0 ? void 0 : flags.drop) {
        return (flags === null || flags === void 0 ? void 0 : flags.dropReplacement) || '';
    }
    try {
        for (var _d = __values(Array.from(usedVars)), _e = _d.next(); !_e.done; _e = _d.next()) {
            var ident = _e.value;
            context.scope.addUsage(ident, [], { terminateLocally: true, dryRun: context.dryRun });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var expr;
    if (ifFalse) {
        expr = "if (" + condition + ") " + ifTrue + " else " + ifFalse;
    }
    else {
        expr = "if (" + condition + ") " + ifTrue;
    }
    if (isTopLevel_1.isTopLevel(node, context)) {
        context.moduleDescriptor.addStatement(expr);
    }
    return expr;
}
exports.tIfStatement = tIfStatement;
