"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tForInStatement = void 0;
var isTopLevel_1 = require("../utils/isTopLevel");
var usageGraph_1 = require("../components/unusedCodeElimination/usageGraph");
var renderNodes_1 = require("../components/codegen/renderNodes");
function tForInStatement(node, context) {
    // Automatically add usage for declared vars inside for-statement
    var onDecl = function (ident) {
        context.scope.addUsage(ident, [], { terminateLocally: true, dryRun: context.dryRun });
    };
    context.scope.addEventListener(usageGraph_1.Scope.EV_DECL, onDecl);
    var _a = __read(renderNodes_1.renderNodes([node.initializer, node.expression], context), 2), initializer = _a[0], expression = _a[1];
    context.scope.removeEventListener(usageGraph_1.Scope.EV_DECL, onDecl);
    var statement = renderNodes_1.renderNode(node.statement, context);
    var expr = "foreach (" + expression + " as " + initializer + " => $_tmpVal) " + statement;
    if (isTopLevel_1.isTopLevel(node, context)) {
        context.moduleDescriptor.addStatement(expr);
    }
    return expr;
}
exports.tForInStatement = tForInStatement;
