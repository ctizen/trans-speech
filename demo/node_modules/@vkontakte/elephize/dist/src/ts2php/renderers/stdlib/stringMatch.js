"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringMatch = void 0;
var ts = require("typescript");
var _propName_1 = require("./_propName");
var basicTypes_1 = require("../../components/typeInference/basicTypes");
var renderNodes_1 = require("../../components/codegen/renderNodes");
var regexFlags_1 = require("../../utils/regexFlags");
/**
 * String.prototype.match support
 *
 * @param node
 * @param context
 */
var stringMatch = function (node, context) {
    if (!_propName_1.propNameIs('match', node)) {
        return undefined;
    }
    if (!basicTypes_1.hasType(node.expression, context.checker, 'string')) {
        context.log.error('Left-hand expression must have string inferred type', [], context.log.ctx(node));
        return 'null';
    }
    context.nodeFlagsStore.upsert(node, { name: 'string_match' });
    var varNameNode = node.expression.expression;
    var pattern = renderNodes_1.renderNode(node.arguments[0], context);
    var varName = renderNodes_1.renderNode(varNameNode, context);
    var nd = node.arguments[0];
    if (nd.kind === ts.SyntaxKind.RegularExpressionLiteral) { // we support only regexp literals as pattern
        var reInfo = regexFlags_1.extractRegexFlags(pattern, context.log, nd);
        var uFlag = context.encoding.includes('utf') ? 'u' : ''; // always append unicode flag if we're outputting unicode
        if (reInfo.globalSearch) {
            context.log.warn('Global search flag with String.prototype.match may output unexpected results. Check your code.', [], context.log.ctx(node));
            return "Stdlib::strMatchG(\"/" + reInfo.expression + "/" + reInfo.phpFlags + uFlag + "\", " + varName + ")";
        }
        else {
            return "Stdlib::strMatch(\"/" + reInfo.expression + "/" + reInfo.phpFlags + uFlag + "\", " + varName + ")";
        }
    }
    else {
        context.log.error('String.prototype.match: Non-string and non-regexp-literal patterns are not supported by transpiler.', [], context.log.ctx(node));
        return 'null';
    }
};
exports.stringMatch = stringMatch;
