"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.arrayReduce = void 0;
var ts = require("typescript");
var _propName_1 = require("./_propName");
var basicTypes_1 = require("../../components/typeInference/basicTypes");
var ast_1 = require("../../utils/ast");
var renderNodes_1 = require("../../components/codegen/renderNodes");
/**
 * Array.prototype.reduce support
 *
 * @param node
 * @param context
 */
var arrayReduce = function (node, context) {
    if (!_propName_1.propNameIs('reduce', node)) {
        return undefined;
    }
    if (!basicTypes_1.hasArrayType(node.expression, context.checker, context.log)) {
        context.log.error('Left-hand expression must have array-like or iterable inferred type', [], context.log.ctx(node));
        return 'null';
    }
    var initialValue = ast_1.getChildChainByType(node, [
        ts.SyntaxKind.SyntaxList,
        [
            ts.SyntaxKind.StringLiteral,
            ts.SyntaxKind.NumericLiteral,
            ts.SyntaxKind.ArrayLiteralExpression,
            ts.SyntaxKind.ObjectLiteralExpression,
        ],
    ]);
    var funcNode = ast_1.getCallExpressionCallbackArg(node);
    var funcArgsCount = (funcNode === null || funcNode === void 0 ? void 0 : funcNode.parameters.length) || 0;
    if (funcArgsCount > 2) {
        context.log.error('Array.prototype.reduce with index in callback is not supported', [], context.log.ctx(node));
        return 'null';
    }
    if (!initialValue) {
        context.log.error('Array.prototype.reduce should have initial value of the accumulator', [], context.log.ctx(node));
        return 'null';
    }
    var varNode = ast_1.getCallExpressionLeftSide(node);
    var _a = __read(renderNodes_1.renderNodes([initialValue, funcNode, varNode], context), 3), accumulator = _a[0], renderedFunction = _a[1], varName = _a[2];
    return "array_reduce(" + varName + ", " + renderedFunction + ", " + accumulator + ")";
};
exports.arrayReduce = arrayReduce;
