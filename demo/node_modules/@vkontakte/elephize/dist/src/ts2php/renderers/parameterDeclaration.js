"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tParameterDeclaration = void 0;
var ts = require("typescript");
var ast_1 = require("../utils/ast");
var objectBindingPattern_1 = require("./objectBindingPattern");
var arrayBindingPattern_1 = require("./arrayBindingPattern");
var pathsAndNames_1 = require("../utils/pathsAndNames");
var renderNodes_1 = require("../components/codegen/renderNodes");
function tParameterDeclaration(node, context) {
    var _a, _b, _c, _d;
    // Object/array destructuring
    if (node.name.kind === ts.SyntaxKind.ObjectBindingPattern || node.name.kind === ts.SyntaxKind.ArrayBindingPattern) {
        var parentFunc = ast_1.getClosestParentOfAnyType(node, [
            ts.SyntaxKind.FunctionExpression,
            ts.SyntaxKind.FunctionDeclaration,
            ts.SyntaxKind.ArrowFunction,
        ]);
        if (!parentFunc) {
            context.log.error('No function found for parameters declaration: this is unexpected error', [], context.log.ctx(node));
            return '';
        }
        var index = ((_a = context.nodeFlagsStore.get(parentFunc)) === null || _a === void 0 ? void 0 : _a.elIndex) || 1;
        var varName = "anon_deref_" + index;
        context.nodeFlagsStore.upsert(parentFunc, { elIndex: index + 1 });
        var renderedString = (node.name.kind === ts.SyntaxKind.ObjectBindingPattern ?
            objectBindingPattern_1.renderElements(node.name, varName, context) :
            arrayBindingPattern_1.renderElements(node.name, varName, context)).renderedString;
        var vars = ((_c = (_b = context.nodeFlagsStore.get(parentFunc)) === null || _b === void 0 ? void 0 : _b.destructuringInfo) === null || _c === void 0 ? void 0 : _c.vars) || '';
        context.nodeFlagsStore.upsert(parentFunc, {
            destructuringInfo: { vars: [vars, renderedString].filter(function (el) { return !!el; }).join('\n') },
        });
        return "$" + pathsAndNames_1.snakify(varName);
    }
    if (node.dotDotDotToken) {
        return "...$" + node.name.getText();
    }
    if (node.initializer) {
        var defaultValue = renderNodes_1.renderNode(node.initializer, context);
        var name_1 = pathsAndNames_1.snakify(node.name.getText());
        var statement = "$" + name_1 + " = $" + name_1 + " ?? " + defaultValue + ";";
        var parentFunc = ast_1.getClosestParentOfAnyType(node, [
            ts.SyntaxKind.FunctionExpression,
            ts.SyntaxKind.FunctionDeclaration,
            ts.SyntaxKind.ArrowFunction,
        ]);
        if (!parentFunc) {
            context.log.error('No function found for parameters declaration: this is unexpected error', [], context.log.ctx(node));
            return '';
        }
        context.nodeFlagsStore.upsert(parentFunc, {
            optionalParamsWithDefaults: (((_d = context.nodeFlagsStore.get(parentFunc)) === null || _d === void 0 ? void 0 : _d.optionalParamsWithDefaults) || []).concat([statement]),
        });
    }
    return "$" + pathsAndNames_1.snakify(node.name.getText());
}
exports.tParameterDeclaration = tParameterDeclaration;
