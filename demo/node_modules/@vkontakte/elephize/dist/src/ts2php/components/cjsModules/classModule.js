"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassModule = void 0;
var commonjsModule_1 = require("./commonjsModule");
var moduleRegistry_1 = require("./moduleRegistry");
var ClassModule = /** @class */ (function (_super) {
    __extends(ClassModule, _super);
    function ClassModule(className, sourceFileName, targetFileName, _namespaces, serverFilesRoot, builtinsPath, log, originalIdentName, ancestorModule) {
        var _this = _super.call(this, className + 'Class', sourceFileName, targetFileName, _namespaces, serverFilesRoot, builtinsPath, log, originalIdentName, ancestorModule) || this;
        _this.isDerived = true;
        return _this;
    }
    // For removing dupes during second pass of codegen
    ClassModule.prototype.clearStatements = function () {
        this._constructorStatements = [];
        this._hoistedContent = new Set();
        this._specialVars = {};
    };
    ClassModule.prototype.registerSpecialVar = function () { };
    ClassModule.prototype.checkSpecialVarIdentifier = function () {
        /* Makes no sense: override, do nothing */
        return false;
    };
    ClassModule.prototype.addStaticConst = function (identifier, value, inferredType) {
        var doc = "/**\n     * @var " + inferredType + " " + identifier + "\n     */";
        this._hoistedContent.add((doc ? doc + '\n' : '') + "const " + identifier + " = " + value + ";");
    };
    ClassModule.prototype.generateContent = function () {
        var fullyQualifiedNamespace = moduleRegistry_1.ModuleRegistry.pathToNamespace(this.targetFileName);
        return "<?php\n/* NOTICE: autogenerated file; Do not edit by hand */\nnamespace " + fullyQualifiedNamespace + ";\nuse " + this._namespaces.builtins + "\\CJSModule;\n\nclass " + this.className + " extends CJSModule {\n  " + Array.from(this._hoistedContent.values()).join('\n') + "\n}\n";
    };
    return ClassModule;
}(commonjsModule_1.CommonjsModule));
exports.ClassModule = ClassModule;
