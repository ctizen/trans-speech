"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderModule = void 0;
var usageGraph_1 = require("../unusedCodeElimination/usageGraph");
var context_1 = require("../context");
var log_1 = require("../../utils/log");
var renderNodes_1 = require("./renderNodes");
/**
 * Module-level codegen. May emit one or more modules (in case of extracted component)
 *
 * @param checker
 * @param options
 * @param root
 * @param nodeFlagsStore
 * @param baseDir - Note! This should be the SAME baseDir as passed into typescript as compilerOptions.baseUrl!
 * @param namespaces
 * @param encoding
 * @param registry
 * @param currentModule
 * @param log
 * @param disableCodeElimination
 * @param builtinsNs
 * @param jsxPreferences
 * @param hooks
 */
function renderModule(checker, options, root, nodeFlagsStore, baseDir, namespaces, encoding, registry, currentModule, log, disableCodeElimination, builtinsNs, jsxPreferences, hooks) {
    if (disableCodeElimination === void 0) { disableCodeElimination = false; }
    if (builtinsNs === void 0) { builtinsNs = ''; }
    usageGraph_1.Scope._forceDisableUnusedVarsElimination = disableCodeElimination;
    var moduleScope = usageGraph_1.Scope.newRootScope({ flags: {} }, currentModule.sourceFileName, log, [
        'console',
        'document',
        'window',
        'Math',
        'Object',
        'Array',
    ]);
    var contextDry = new context_1.Context(moduleScope, checker, nodeFlagsStore, options, currentModule, true, baseDir, namespaces, encoding, registry, log, builtinsNs, jsxPreferences, hooks);
    // First pass: build trees and collect var usage info
    renderNodes_1.renderNode(root, contextDry);
    // Trigger usage vars graph traversal
    moduleScope.terminalNode.markUsage();
    if (log.verbosity & log_1.LogVerbosity.WITH_USAGE_GRAPH_DUMP) {
        moduleScope.terminalNode._dump(function (msg) { return log.info(msg, []); });
    }
    currentModule.clearStatements();
    registry.clearClasses();
    nodeFlagsStore.clear();
    var context = new context_1.Context(moduleScope, checker, nodeFlagsStore, options, currentModule, false, baseDir, namespaces, encoding, registry, log, builtinsNs, jsxPreferences, hooks);
    // Second pass: build code with cleaned unused vars
    renderNodes_1.renderNode(root, context);
}
exports.renderModule = renderModule;
