"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBuildProgram = void 0;
var ts = require("typescript");
var fs_1 = require("fs");
var resolveModules_1 = require("../../cjsModules/resolveModules");
var sourceFilesHelper_1 = require("../sourceFilesHelper");
// internals. Not good thing to import them this way, but it's hard to customize transpileModule the way we want.
var addRange = require('typescript').addRange;
/**
 * Create typescript `Program` object for one-time build.
 *
 * @param filenames
 * @param ignoredImports
 * @param replacedImports
 * @param baseDir
 * @param tsPaths
 * @param transpileOptions
 * @param writeFile
 * @param log
 */
function getBuildProgram(filenames, ignoredImports, replacedImports, baseDir, tsPaths, transpileOptions, writeFile, log) {
    var diagnostics = [];
    var options = __assign({}, transpileOptions.compilerOptions || {});
    // mix in default options
    var defaultOptions = ts.getDefaultCompilerOptions();
    for (var key in defaultOptions) {
        if (defaultOptions.hasOwnProperty(key) && options[key] === undefined) {
            options[key] = defaultOptions[key];
        }
    }
    // transpileModule does not write anything to disk so there is no need to verify that there are no conflicts between input and output paths.
    options.suppressOutputPathCheck = true;
    // Filename can be non-ts file.
    options.allowNonTsExtensions = true;
    // Create a compilerHost object to allow the compiler to read and write files
    var resolutionFun = resolveModules_1.resolveModules(options, ignoredImports, replacedImports, baseDir, tsPaths, log);
    var replacements = [];
    var compilerHost = {
        resolveModuleNames: function (moduleNames, containingFile) {
            var _a = __read(resolutionFun(moduleNames, containingFile), 2), resolvedModules = _a[0], importReplacements = _a[1];
            replacements = replacements.concat(importReplacements);
            return resolvedModules;
        },
        getSourceFile: sourceFilesHelper_1.compilerHostSourceGetter(options.target),
        writeFile: writeFile,
        getDefaultLibFileName: function () { return 'lib.d.ts'; },
        useCaseSensitiveFileNames: function () { return false; },
        getCanonicalFileName: function (fileName) { return fileName; },
        getCurrentDirectory: function () { return ''; },
        getNewLine: function () { return '\n'; },
        fileExists: function (fileName) {
            return fs_1.existsSync(fileName);
        },
        readFile: function () { return ''; },
        directoryExists: function () { return true; },
        getDirectories: function () { return []; },
    };
    var program = ts.createProgram(filenames, options, compilerHost);
    if (transpileOptions.reportDiagnostics) {
        addRange(/* to*/ diagnostics, /* from*/ program.getSyntacticDiagnostics());
        addRange(/* to*/ diagnostics, /* from*/ program.getOptionsDiagnostics());
    }
    return [program, replacements];
}
exports.getBuildProgram = getBuildProgram;
