"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateProgram = void 0;
var moduleRegistry_1 = require("../../cjsModules/moduleRegistry");
var renderModule_1 = require("../renderModule");
var prettier = require("prettier/standalone");
var phpPrettierOptions_1 = require("../../../internalConfig/phpPrettierOptions");
var defaultCompilerOptions_1 = require("../defaultCompilerOptions");
var commonjsExternalModule_1 = require("../../cjsModules/commonjsExternalModule");
var path = require("path");
/**
 * Transform typescript `Program` object (build or watch) to php file set.
 *
 * @param program
 * @param replacements
 * @param nodeFlagStore
 * @param log
 * @param onData
 * @param onBeforeRender
 * @param baseDir
 * @param disableCodeElimination
 * @param aliases
 * @param serverFilesRoot
 * @param namespaces
 * @param encoding
 * @param printImportTree
 * @param options
 * @param onFinish
 */
function translateProgram(program, replacements, nodeFlagStore, log, _a) {
    var e_1, _b;
    var onData = _a.onData, _c = _a.onBeforeRender, onBeforeRender = _c === void 0 ? function () { return undefined; } : _c, baseDir = _a.baseDir, _d = _a.disableCodeElimination, disableCodeElimination = _d === void 0 ? false : _d, _e = _a.aliases, aliases = _e === void 0 ? {} : _e, serverFilesRoot = _a.serverFilesRoot, builtinsPath = _a.builtinsPath, namespaces = _a.namespaces, encoding = _a.encoding, printImportTree = _a.printImportTree, _f = _a.options, options = _f === void 0 ? defaultCompilerOptions_1.defaultOptions : _f, _g = _a.jsxPreferences, jsxPreferences = _g === void 0 ? {} : _g, _h = _a.hooks, hooks = _h === void 0 ? {} : _h, _j = _a.onFinish, onFinish = _j === void 0 ? function () { return undefined; } : _j;
    if (typeof jest === 'undefined') {
        console.time('Elephize recompilation done');
    }
    if (!builtinsPath) {
        builtinsPath = path.resolve(__dirname, '..', '..', '..', '..', 'builtins');
    }
    var registry = new moduleRegistry_1.ModuleRegistry(baseDir, aliases, options.paths || {}, namespaces, serverFilesRoot, builtinsPath, replacements, log);
    var checker = program.getTypeChecker();
    var _loop_1 = function (sourceFile) {
        var isReplaced = replacements.find(function (rule) { return rule.modulePath === sourceFile.fileName; });
        if (!isReplaced && !sourceFile.isDeclarationFile) { // skip .d.ts if any
            var currentModule = registry.registerClass(sourceFile.fileName);
            if (!currentModule) {
                return "continue";
            }
            onBeforeRender(sourceFile.fileName, sourceFile, nodeFlagStore);
            renderModule_1.renderModule(checker, options, sourceFile, nodeFlagStore, baseDir, namespaces, encoding, registry, currentModule, log, disableCodeElimination, '', jsxPreferences, hooks);
        }
    };
    try {
        for (var _k = __values(program.getSourceFiles()), _l = _k.next(); !_l.done; _l = _k.next()) {
            var sourceFile = _l.value;
            _loop_1(sourceFile);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
        }
        finally { if (e_1) throw e_1.error; }
    }
    function print(name, list, depth, modulesInStack) {
        if (modulesInStack.includes(name) && modulesInStack[modulesInStack.length - 1] !== name) {
            console.log(depth + '├─ ' + name.replace(baseDir, '[base]') + ' [RECURSION!]');
        }
        else {
            console.log(depth + '├─ ' + name.replace(baseDir, '[base]'));
            Object.keys(list).forEach(function (mod) {
                if (list.hasOwnProperty(mod)) {
                    print(list[mod].name, list[mod].imports, depth + '│ ', __spreadArray(__spreadArray([], __read(modulesInStack)), [list[mod].name]));
                }
            });
        }
    }
    if (printImportTree) {
        var importsList_1 = {};
        // init list
        registry.forEachModule(function (mod) {
            importsList_1[mod.sourceFileName] = { name: mod.sourceFileName, imports: [] };
        });
        // assign import modules from list
        registry.forEachModule(function (mod) {
            var entries = [];
            mod.imports.forEach(function (idents, imp) {
                var mod = importsList_1[imp];
                if (mod) {
                    entries.push(mod);
                }
            });
            var modImport = importsList_1[mod.sourceFileName];
            importsList_1[mod.sourceFileName] = {
                name: mod.sourceFileName,
                imports: modImport ? __spreadArray(__spreadArray([], __read(modImport.imports)), __read(entries)) : entries,
            };
        });
        // Print nicely
        print('Imports tree in all entrypoints:', importsList_1, '', []);
    }
    registry.forEachModule(function (mod) {
        if (mod.isEmpty()) {
            if (mod instanceof commonjsExternalModule_1.CommonjsExternalModule) {
                // Do not emit external modules
                log.info('Module %s (%s) is external: skip emit', [mod.className, mod.targetFileName]);
            }
            else {
                // Do not emit empty modules
                log.info('Dropping module %s (%s) because it\'s empty', [mod.className, mod.targetFileName]);
            }
            return;
        }
        var content = mod.generateContent();
        try {
            content = prettier.format(content, phpPrettierOptions_1.phpPrettierOptions);
        }
        catch (e) {
            console.error('Prettier failed to parse & prettify generated code. Here is raw code:');
            console.log(content);
        }
        onData(mod.sourceFileName, mod.targetFileName, content);
    });
    if (typeof jest === 'undefined') {
        console.timeEnd('Elephize recompilation done');
    }
    onFinish(registry);
}
exports.translateProgram = translateProgram;
