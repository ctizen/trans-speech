"use strict";
/* eslint-disable @typescript-eslint/unbound-method */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWatchProgram = void 0;
var ts = require("typescript");
var resolveModules_1 = require("../../cjsModules/resolveModules");
var formatHost = {
    getCanonicalFileName: function (path) { return path; },
    getCurrentDirectory: ts.sys.getCurrentDirectory,
    getNewLine: function () { return ts.sys.newLine; },
};
var lastDiagCode;
/**
 * Create typescript `Program` object with incremental compilation on any change.
 *
 * @param filenames
 * @param ignoredImports
 * @param replacedImports
 * @param baseDir
 * @param tsPaths
 * @param compilerOptions
 * @param onProgramReady
 * @param log
 * @param getCloseHandle
 */
function getWatchProgram(filenames, ignoredImports, replacedImports, baseDir, tsPaths, compilerOptions, onProgramReady, log, getCloseHandle) {
    var options = __assign({}, compilerOptions || {});
    // mix in default options
    var defaultOptions = ts.getDefaultCompilerOptions();
    for (var key in defaultOptions) {
        if (defaultOptions.hasOwnProperty(key) && options[key] === undefined) {
            options[key] = defaultOptions[key];
        }
    }
    // transpileModule does not write anything to disk so there is no need to verify that there are no conflicts between input and output paths.
    options.suppressOutputPathCheck = true;
    // Filename can be non-ts file.
    options.allowNonTsExtensions = true;
    // Force disable output
    options.noEmit = true;
    var createProgram = ts.createSemanticDiagnosticsBuilderProgram;
    var host = ts.createWatchCompilerHost(filenames, options, ts.sys, createProgram, reportDiagnostic(log), reportWatchStatusChanged);
    // TODO: непонятно как подключить дефолтные либы (которые в buildProgram подключаются через getSourceFile). Скорее всего завалится вывод типов, проверить
    var origCreateProgram = host.createProgram;
    // host.resolveModuleNames() <- // TODO: customize just like in buildProgramFactory
    host.createProgram = function (rootNames, options, host, oldProgram) {
        lastDiagCode = undefined;
        return origCreateProgram(rootNames, options, host, oldProgram);
    };
    var origPostProgramCreate = host.afterProgramCreate;
    var resolutionFun = resolveModules_1.resolveModules(options, ignoredImports, replacedImports, baseDir, tsPaths, log);
    var replacements = [];
    host.resolveModuleNames = function (moduleNames, containingFile) {
        var _a = __read(resolutionFun(moduleNames, containingFile), 2), resolvedModules = _a[0], importReplacements = _a[1];
        replacements = replacements.concat(importReplacements);
        return resolvedModules;
    };
    host.afterProgramCreate = function (program) {
        setTimeout(function () {
            origPostProgramCreate(program);
            onProgramReady(program.getProgram(), replacements, lastDiagCode);
            lastDiagCode = undefined;
        }, 100);
    };
    var opt = ts.createWatchProgram(host);
    if (getCloseHandle) {
        getCloseHandle(function () { return opt.close(); });
    }
}
exports.getWatchProgram = getWatchProgram;
function reportDiagnostic(log) {
    return function (diagnostic) {
        lastDiagCode = diagnostic.code;
        log.error(ts.formatDiagnostic(diagnostic, formatHost), []);
    };
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function reportWatchStatusChanged(diagnostic) {
    // Do nothing, just suppress default messages
}
