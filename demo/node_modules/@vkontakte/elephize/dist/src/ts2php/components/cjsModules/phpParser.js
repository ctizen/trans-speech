"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhpParsedStruct = void 0;
var fs = require("fs");
var SyntaxWalker_1 = require("../../../vendor/php-parser/language/syntax/SyntaxWalker");
var main_1 = require("../../../vendor/php-parser/main");
var PhpParsedStruct = /** @class */ (function (_super) {
    __extends(PhpParsedStruct, _super);
    function PhpParsedStruct(_filename) {
        var _this = _super.call(this) || this;
        _this._filename = _filename;
        _this._className = '';
        _this._namespace = '';
        _this._decls = {};
        _this._retvals = {};
        _this._src = fs.readFileSync(_this._filename, { encoding: 'utf-8' });
        var phpAst = main_1.PhpSyntaxTree.fromText(_this._src);
        _this.visit(phpAst.root);
        return _this;
    }
    PhpParsedStruct.prototype.getDecl = function (name) {
        return this._decls[name];
    };
    PhpParsedStruct.prototype.getRetval = function (name) {
        return this._retvals[name];
    };
    PhpParsedStruct.prototype.getClassName = function () {
        return this._className;
    };
    PhpParsedStruct.prototype.getNamespace = function () {
        return this._namespace;
    };
    PhpParsedStruct.prototype._get = function (span) {
        if (!span) {
            return '';
        }
        return this._src.slice(span.start, span.start + span.length);
    };
    PhpParsedStruct.prototype.visitClassDeclaration = function (node) {
        this._className = this._get(node.identifier.span);
        _super.prototype.visitClassDeclaration.call(this, node);
    };
    PhpParsedStruct.prototype.visitNamespaceDeclaration = function (node) {
        this._namespace = this._get(node.name.span);
        _super.prototype.visitNamespaceDeclaration.call(this, node);
    };
    PhpParsedStruct.prototype.visitMethodDeclaration = function (node) {
        var e_1, _a;
        var _this = this;
        var _b, _c, _d;
        var mods = ((_b = node.modifiers) === null || _b === void 0 ? void 0 : _b.allChildren().map(function (c) { return _this._get(c.span); })) || [];
        var name = this._get(node.identifierOrKeyword.span);
        try {
            for (var _e = __values((node.leadingTrivia || [])), _f = _e.next(); !_f.done; _f = _e.next()) {
                var triv = _f.value;
                if (!this._get(triv.span).includes('@return')) {
                    continue;
                }
                var matches = this._get(triv.span).match(/@return ([?a-z]+(\[\])?)/);
                if (matches) {
                    this._retvals[name] = matches[1];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (mods.includes('public')) {
            var parameters = (((_c = node.parameters) === null || _c === void 0 ? void 0 : _c.allChildren()) || [])
                .filter(function (c) { return !c.isToken; });
            var args = parameters
                .map(function (c) { return _this._get(c.span); }).join(', ') || '';
            var callableArgs = parameters
                .map(function (c) {
                var r = '';
                if (c.ellipsis) {
                    r += _this._get(c.ellipsis.span);
                }
                r += _this._get(c.variable.span);
                return r;
            });
            this._decls[name] = this._get((_d = node.leadingTrivia) === null || _d === void 0 ? void 0 : _d.span) + ("public function " + name + "(" + args + ") {\n        return " + (mods.includes('static') ? '\\' + this._namespace + '\\' + this._className + "::" : '$this->_impl->') + name + "(" + callableArgs + ");\n      }\n");
        }
        _super.prototype.visitMethodDeclaration.call(this, node);
    };
    return PhpParsedStruct;
}(SyntaxWalker_1.SyntaxWalker));
exports.PhpParsedStruct = PhpParsedStruct;
