"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonjsExternalModule = void 0;
var commonjsModule_1 = require("./commonjsModule");
var phpParser_1 = require("./phpParser");
var moduleRegistry_1 = require("./moduleRegistry");
var CommonjsExternalModule = /** @class */ (function (_super) {
    __extends(CommonjsExternalModule, _super);
    function CommonjsExternalModule(className, sourceFileName, targetFileName, _namespaces, serverFilesRoot, builtinsPath, log, originalIdentName, ancestorModule) {
        var _this = _super.call(this, className + 'CjsWrapper', sourceFileName, targetFileName, _namespaces, serverFilesRoot, builtinsPath, log, originalIdentName, ancestorModule) || this;
        _this.isDerived = false;
        _this.isExternal = true;
        _this._implPath = '';
        return _this;
    }
    CommonjsExternalModule.prototype.useImplementationFromPath = function (path) {
        this._implPath = path;
        this._phpStruct = new phpParser_1.PhpParsedStruct(this._implPath);
    };
    // For removing dupes during second pass of codegen
    CommonjsExternalModule.prototype.clearStatements = function () {
        this._constructorStatements = [];
        this._hoistedContent = new Set();
        this._specialVars = {};
    };
    CommonjsExternalModule.prototype.registerSpecialVar = function () { };
    CommonjsExternalModule.prototype.checkSpecialVarIdentifier = function () {
        /* Makes no sense: override, do nothing */
        return false;
    };
    CommonjsExternalModule.prototype.addProperty = function (identifier) {
        this.log.error('Access to properties for substituted modules is not supported: @ %s accessing %s', [this.sourceFileName, identifier]);
    };
    CommonjsExternalModule.prototype.addMethod = function (identifier) {
        this._hoistedContent.add(this._phpStruct.getDecl(identifier));
    };
    CommonjsExternalModule.prototype.generateContent = function () {
        var fullyQualifiedNamespace = moduleRegistry_1.ModuleRegistry.pathToNamespace(this.targetFileName);
        var implementationClassName = "\\" + this._phpStruct.getNamespace() + "\\" + this._phpStruct.getClassName();
        return "<?php\n/* NOTICE: autogenerated file; Do not edit by hand */\nnamespace " + fullyQualifiedNamespace + ";\nuse " + this._namespaces.builtins + "\\Stdlib;\nuse " + this._namespaces.builtins + "\\CJSModule;\n\nclass " + this.className + " extends CJSModule {\n  /**\n   * @var " + implementationClassName + " $_impl\n   */\n  private $_impl;\n\n  /**\n   * @var " + this.className + " $_mod\n   */\n  private static $_mod;\n\n  public static function getInstance(): " + this.className + " {\n    if (!self:: $_mod) {\n      self:: $_mod = new " + this.className + " ();\n    }\n    return self:: $_mod;\n  }\n\n  " + Array.from(this._hoistedContent.values()).join('\n') + "\n\n  private function __construct() {\n    $this->_impl = new " + implementationClassName + "();\n  }\n}\n";
    };
    return CommonjsExternalModule;
}(commonjsModule_1.CommonjsModule));
exports.CommonjsExternalModule = CommonjsExternalModule;
