"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonjsModule = void 0;
var ts = require("typescript");
var moduleRegistry_1 = require("./moduleRegistry");
var pathsAndNames_1 = require("../../utils/pathsAndNames");
var CommonjsModule = /** @class */ (function () {
    function CommonjsModule(className, sourceFileName, targetFileName, _namespaces, _serverFilesRoot, builtinsPath, log, originalIdentName, ancestorModule) {
        this.className = className;
        this.sourceFileName = sourceFileName;
        this.targetFileName = targetFileName;
        this._namespaces = _namespaces;
        this._serverFilesRoot = _serverFilesRoot;
        this.builtinsPath = builtinsPath;
        this.log = log;
        this.originalIdentName = originalIdentName;
        this.ancestorModule = ancestorModule;
        this.isDerived = false;
        this.isExternal = false;
        this._hoistedContent = new Set();
        this._properties = new Set();
        this._methods = new Set();
        this._imports = new Map();
        /**
         * Exports should strictly contain _final_ path
         */
        this._exports = new Map();
        this._requiredFiles = new Map();
        this._constructorStatements = [];
        this._specialVars = {};
    }
    Object.defineProperty(CommonjsModule.prototype, "imports", {
        get: function () {
            return this._imports;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CommonjsModule.prototype, "exports", {
        get: function () {
            return this._exports;
        },
        enumerable: false,
        configurable: true
    });
    // For removing dupes during second pass of codegen
    CommonjsModule.prototype.clearStatements = function () {
        this._constructorStatements = [];
        this._hoistedContent = new Set();
        this._specialVars = {};
    };
    CommonjsModule.prototype.addProperty = function (identifier, inferredType, visibility) {
        if (visibility === void 0) { visibility = 'public'; }
        var doc = "/**\n     * @var " + inferredType + " " + identifier + "\n     */";
        this._properties.add(identifier);
        this._hoistedContent.add("" + (doc ? doc + '\n' : '') + visibility + " " + identifier + ";");
    };
    CommonjsModule.prototype.addMethod = function (identifier, block, args, inferredTypes, visibility) {
        if (visibility === void 0) { visibility = 'public'; }
        var phpdoc = '';
        if (inferredTypes) {
            var params = Object.keys(inferredTypes.args)
                .map(function (arg) { return "     * @param " + inferredTypes.args[arg] + " " + arg; }).join('\n');
            phpdoc = "/**" + (params ? '\n' + params : '') + "\n     * @return " + inferredTypes.return + "\n     */";
        }
        this._methods.add(identifier);
        this._hoistedContent.add(phpdoc + "\n    " + visibility + " function " + identifier + "(" + args + ") " + block);
    };
    CommonjsModule.prototype.registerImport = function (from, method) {
        this._imports.set(from, __spreadArray(__spreadArray([], __read(this._imports.get(from) || [])), [method]));
    };
    CommonjsModule.prototype.findImportedIdentifier = function (ident) {
        var e_1, _a;
        try {
            for (var _b = __values(this._imports.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), file = _d[0], idents = _d[1];
                if (idents.includes(ident)) {
                    return [file, ident];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    CommonjsModule.prototype.registerExport = function (from, method) {
        this._exports.set(from, __spreadArray(__spreadArray([], __read(this._exports.get(from) || [])), [method]));
    };
    CommonjsModule.prototype.hasMethod = function (name) {
        return this._methods.has(name);
    };
    CommonjsModule.prototype.hasProperty = function (name) {
        return this._properties.has(name);
    };
    CommonjsModule.prototype.hasExport = function (name) {
        return this.findExportSource(name) !== null;
    };
    CommonjsModule.prototype.findExportSource = function (name) {
        var result = null;
        this._exports.forEach(function (exportedKeys, sourceName) {
            if (result) {
                return;
            }
            if (exportedKeys.includes(name)) {
                result = sourceName;
            }
        });
        return result;
    };
    CommonjsModule.prototype.addStatement = function (statement) {
        this._constructorStatements.push(statement);
    };
    CommonjsModule.prototype.registerSpecialVar = function (kind, name, node) {
        if (this._specialVars[kind] && this._specialVars[kind] !== name) {
            this.log.error('Duplicate special variable assignment: %s := %s', [kind, name], node && this.log.ctx(node));
        }
        this._specialVars[kind] = name;
    };
    CommonjsModule.prototype.registerRequiredFile = function (path, currentModulePath, originalModule) {
        if (path === currentModulePath || !originalModule) {
            return;
        }
        path = path
            .replace(/\.[jt]sx?$/, '.php')
            .split('/')
            .map(function (n) { return pathsAndNames_1.escapeKeyword(n); })
            .join('/');
        currentModulePath = currentModulePath.replace(/\.[jt]sx?$/, '.php');
        this._requiredFiles.set(this._normalizeRelativePath(path, currentModulePath), originalModule);
    };
    CommonjsModule.prototype._normalizeRelativePath = function (path, currentModulePath) {
        var piecesTarget = path.split('/').map(function (n) { return pathsAndNames_1.escapeKeyword(n); });
        var piecesCurrent = currentModulePath.split('/').map(function (n) { return pathsAndNames_1.escapeKeyword(n); });
        while (piecesTarget[0] === piecesCurrent[0]) {
            piecesTarget.shift();
            piecesCurrent.shift();
        }
        var relpath;
        if (piecesCurrent.length === 1 && piecesTarget.length === 1) {
            // Files in same folder
            relpath = piecesTarget[0];
        }
        else {
            relpath = '../'.repeat(piecesCurrent.length - 1) + piecesTarget.join('/');
        }
        return relpath;
    };
    CommonjsModule.prototype.checkSpecialVarIdentifier = function (node, kind) {
        return !!node && node.kind === ts.SyntaxKind.Identifier && this._specialVars[kind] === node.getText();
    };
    CommonjsModule.prototype.isEmpty = function () {
        return this._hoistedContent.size === 0 && this._constructorStatements.length === 0;
    };
    CommonjsModule.prototype.generateContent = function () {
        var fullyQualifiedNamespace = moduleRegistry_1.ModuleRegistry.pathToNamespace(this.targetFileName);
        return "<?php\n/* NOTICE: autogenerated file; Do not edit by hand */\nnamespace " + fullyQualifiedNamespace + ";\nuse " + this._namespaces.builtins + "\\Stdlib;\nuse " + this._namespaces.builtins + "\\CJSModule;\n\nclass " + this.className + " extends CJSModule {\n    /**\n     * @var " + this.className + " $_mod\n     */\n    private static $_mod;\n    public static function getInstance(): " + this.className + " {\n        if (!self::$_mod) {\n            self::$_mod = new " + this.className + "();\n        }\n        return self::$_mod;\n    }\n\n    " + Array.from(this._hoistedContent.values()).join('\n') + "\n\n    private function __construct() {\n        " + this._constructorStatements.join('\n') + "\n    }\n}\n";
    };
    return CommonjsModule;
}());
exports.CommonjsModule = CommonjsModule;
