"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.traverseReferences = exports.checkCustomTypehints = void 0;
var ts = require("typescript");
var customTypehintsList_1 = require("./customTypehintsList");
function checkCustomTypehints(type, checker) {
    var typeNode = checker.typeToTypeNode(type, undefined, undefined);
    if (!typeNode) {
        return false;
    }
    var typeRefs = traverseReferences(type, checker);
    if (typeRefs.length === 1 && typeRefs[0] === type) {
        return false;
    }
    if (typeRefs.some(function (t) { var _a; return ((_a = t.symbol) === null || _a === void 0 ? void 0 : _a.escapedName) === customTypehintsList_1.mixedTypehintId; })) {
        return { foundTypes: ['mixed'], typesToDrop: [] };
    }
    var typesToDrop = [];
    var foundTypes = typeRefs.map(function (t) {
        var typeNode = checker.typeToTypeNode(t, undefined, undefined);
        if (!typeNode) {
            return t;
        }
        var sym = t.symbol || t.aliasSymbol;
        if (!sym) {
            return t;
        }
        var decls = sym.getDeclarations();
        var _a = __read((decls === null || decls === void 0 ? void 0 : decls.filter(function (d) { return d.kind === ts.SyntaxKind.InterfaceDeclaration; })) || [], 1), ifaceDecl = _a[0];
        if (!ifaceDecl) {
            return t;
        }
        var customType = customTypehintsList_1.customTypehints[ifaceDecl.name.getText()];
        if (customType) {
            typesToDrop = typesToDrop.concat(customType.drop);
            return customType.replacement;
        }
        return t;
    });
    return { foundTypes: foundTypes, typesToDrop: typesToDrop };
}
exports.checkCustomTypehints = checkCustomTypehints;
function traverseReferences(type, checker) {
    var e_1, _a;
    if (!type.isUnionOrIntersection()) {
        return [type];
    }
    var types = [];
    try {
        for (var _b = __values(type.types), _c = _b.next(); !_c.done; _c = _b.next()) {
            var t = _c.value;
            var typeNode = checker.typeToTypeNode(t, undefined, undefined);
            if (typeNode) {
                if (typeNode.kind === ts.SyntaxKind.TypeReference || typeNode.kind === ts.SyntaxKind.TypeAliasDeclaration) {
                    types = types.concat(traverseReferences(t, checker));
                }
                else {
                    types.push(t);
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return types;
}
exports.traverseReferences = traverseReferences;
