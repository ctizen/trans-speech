"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectVars = exports.markUsedVars = void 0;
var ts = require("typescript");
var ast_1 = require("../../utils/ast");
var usageGraph_1 = require("./usageGraph");
function markUsedVars(node, lExp, usedVars, context) {
    var e_1, _a, e_2, _b;
    // Unused vars elimination related:
    var stopExpressions = [
        ts.SyntaxKind.FunctionExpression,
        ts.SyntaxKind.FunctionDeclaration,
        ts.SyntaxKind.VariableDeclaration,
        ts.SyntaxKind.ArrowFunction,
        ts.SyntaxKind.SourceFile,
    ];
    var upperStatement = ast_1.getClosestOrigParentByPredicate(node, function (p) { return stopExpressions.includes(p.kind); });
    if (upperStatement) {
        switch (upperStatement.kind) {
            case ts.SyntaxKind.FunctionDeclaration:
            case ts.SyntaxKind.ArrowFunction:
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.SourceFile:
                // connect expression terminal node to scope terminal node
                context.scope.terminateCall(lExp.getText(), { dryRun: context.dryRun });
                // also connect all used vars to scope terminal node as side-effect usage
                usedVars.forEach(function (ident) { return context.scope.terminateCall(ident, { dryRun: context.dryRun }); });
                break;
            case ts.SyntaxKind.VariableDeclaration:
                var bindings = ast_1.fetchAllBindingIdents(upperStatement.name);
                try {
                    for (var bindings_1 = __values(bindings), bindings_1_1 = bindings_1.next(); !bindings_1_1.done; bindings_1_1 = bindings_1.next()) {
                        var binding = bindings_1_1.value;
                        // connect expression terminal node to varname node (assigned var name)
                        context.scope.terminateCall(lExp.getText(), { traceSourceIdent: binding.getText(), dryRun: context.dryRun });
                        try {
                            // also connect all used vars to varname node as side-effect usage
                            for (var _c = (e_2 = void 0, __values(Array.from(usedVars))), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var ident = _d.value;
                                context.scope.terminateCall(ident, { traceSourceIdent: binding.getText(), dryRun: context.dryRun });
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (bindings_1_1 && !bindings_1_1.done && (_a = bindings_1.return)) _a.call(bindings_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                break;
            default:
                context.log.info('Unsupported expression kind; this may lead to unexpected behavior od dead code elimination, check your result', []);
        }
    }
    // end of unused vars elimination related
}
exports.markUsedVars = markUsedVars;
/**
 * This helper collects vars that are added with addUsage when running `runner` callable.
 *
 * @param runner
 * @param context
 */
function collectVars(runner, context) {
    var usedVars = new Set();
    var onUsage = function (ident) { return usedVars.add(ident); };
    context.scope.addEventListener(usageGraph_1.Scope.EV_USAGE, onUsage);
    var retval = runner();
    context.scope.removeEventListener(usageGraph_1.Scope.EV_USAGE, onUsage);
    return [usedVars, retval];
}
exports.collectVars = collectVars;
