"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LogVerbosity = exports.LogSeverity = void 0;
var chalk = require("chalk");
var fs_1 = require("fs");
var crypto_1 = require("crypto");
var util_1 = require("util");
var LogSeverity;
(function (LogSeverity) {
    LogSeverity[LogSeverity["INFO"] = 0] = "INFO";
    LogSeverity[LogSeverity["WARN"] = 1] = "WARN";
    LogSeverity[LogSeverity["ERROR"] = 2] = "ERROR";
    LogSeverity[LogSeverity["SPECIAL"] = 3] = "SPECIAL";
    LogSeverity[LogSeverity["TYPEHINT"] = 4] = "TYPEHINT";
})(LogSeverity = exports.LogSeverity || (exports.LogSeverity = {}));
var LogVerbosity;
(function (LogVerbosity) {
    LogVerbosity[LogVerbosity["INFO"] = 1] = "INFO";
    LogVerbosity[LogVerbosity["WARN"] = 2] = "WARN";
    LogVerbosity[LogVerbosity["ERROR"] = 4] = "ERROR";
    LogVerbosity[LogVerbosity["WITH_CONTEXT"] = 8] = "WITH_CONTEXT";
    LogVerbosity[LogVerbosity["WITH_ELIMINATION_HINTS"] = 16] = "WITH_ELIMINATION_HINTS";
    LogVerbosity[LogVerbosity["WITH_USAGE_GRAPH_DUMP"] = 32] = "WITH_USAGE_GRAPH_DUMP";
    LogVerbosity[LogVerbosity["WITH_TYPEHINTS"] = 64] = "WITH_TYPEHINTS";
    LogVerbosity[LogVerbosity["ALL"] = 127] = "ALL"; // fix this if there is more flags
})(LogVerbosity = exports.LogVerbosity || (exports.LogVerbosity = {}));
var STDERR_FILE_DESCRIPTOR = 2; // should match process.stderr.fd
var STDOUT_FILE_DESCRIPTOR = 1; // should match process.stdout.fd
var Logger = /** @class */ (function () {
    function Logger(options, printer) {
        this._errCount = 0;
        this._warnCount = 0;
        this.noOutput = options.noOutput;
        this.baseDir = options.baseDir;
        this.outDir = options.outDir;
        this._verbosity = options.verbosity || (LogVerbosity.ERROR | LogVerbosity.WARN | LogVerbosity.WITH_CONTEXT); // Default for non-testing env
        this.forceStderr = options.forceStderr;
        this._printer = printer || this._printLog.bind(this);
    }
    Object.defineProperty(Logger.prototype, "errCount", {
        get: function () {
            return this._errCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "warnCount", {
        get: function () {
            return this._warnCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "verbosity", {
        get: function () {
            return this._verbosity;
        },
        enumerable: false,
        configurable: true
    });
    Logger.prototype.error = function (message, params, context) {
        if (context === void 0) { context = ''; }
        this._errCount++;
        if (this._verbosity & LogVerbosity.ERROR) {
            this._printer(message, this._msgid(message), params, LogSeverity.ERROR, this._verbosity & LogVerbosity.WITH_CONTEXT ? context : '');
        }
    };
    Logger.prototype.info = function (message, params, context) {
        if (context === void 0) { context = ''; }
        if (this._verbosity & LogVerbosity.INFO) {
            this._printer(message, this._msgid(message), params, LogSeverity.INFO, this._verbosity & LogVerbosity.WITH_CONTEXT ? context : '');
        }
    };
    Logger.prototype.special = function (message, params, context) {
        if (context === void 0) { context = ''; }
        if (this._verbosity & LogVerbosity.INFO) {
            this._printer(message, this._msgid(message), params, LogSeverity.SPECIAL, this._verbosity & LogVerbosity.WITH_CONTEXT ? context : '');
        }
    };
    Logger.prototype.typehint = function (message, params, context) {
        if (context === void 0) { context = ''; }
        if (this._verbosity & LogVerbosity.WITH_TYPEHINTS) {
            this._printer(message, this._msgid(message), params, LogSeverity.TYPEHINT, this._verbosity & LogVerbosity.WITH_CONTEXT ? context : '');
        }
    };
    Logger.prototype.warn = function (message, params, context) {
        if (context === void 0) { context = ''; }
        this._warnCount++;
        if (this._verbosity & LogVerbosity.WARN) {
            this._printer(message, this._msgid(message), params, LogSeverity.WARN, this._verbosity & LogVerbosity.WITH_CONTEXT ? context : '');
        }
    };
    Logger.prototype.ctx = function (node) {
        if (!node) {
            return '';
        }
        var _a = node.getSourceFile().getLineAndCharacterOfPosition(node.getStart()), line = _a.line, character = _a.character;
        var filename = this.baseDir ?
            node.getSourceFile().fileName.replace(this.baseDir, '[base]') :
            node.getSourceFile().fileName;
        return "@" + filename + ":" + (line + 1) + ":" + (character + 1);
    };
    Logger.prototype.shortCtx = function (fn) {
        var filename = this.baseDir ?
            fn.replace(this.baseDir, '[base]') :
            fn;
        return "@" + filename;
    };
    Logger.prototype._msgid = function (message) {
        var hash = crypto_1.createHash('md4');
        hash.update(message);
        return hash.digest('hex').substr(0, 5);
    };
    Logger.prototype._printLog = function (message, msgid, params, severity, context) {
        if (context === void 0) { context = ''; }
        if (this.baseDir && severity !== LogSeverity.SPECIAL) {
            message = message.replace(this.baseDir, '[base]');
        }
        if (this.outDir && severity !== LogSeverity.SPECIAL) {
            message = message.replace(this.outDir, '[out]');
        }
        var marker = chalk.dim("[i #" + msgid + "]");
        switch (severity) {
            case LogSeverity.ERROR:
                marker = chalk.bgRedBright(chalk.black("[E #" + msgid + "]"));
                break;
            case LogSeverity.WARN:
                marker = chalk.bgYellowBright(chalk.black("[W #" + msgid + "]"));
                break;
            case LogSeverity.SPECIAL:
                marker = chalk.bgGreenBright(chalk.black("[! #" + msgid + "]"));
                break;
            case LogSeverity.INFO:
            default:
                break;
        }
        message = util_1.format.apply(void 0, __spreadArray([message], __read(params))); // apply parameters to string strictly after hashing
        var dt = new Date();
        var pieces = [dt.getHours(), dt.getMinutes(), dt.getSeconds()].map(function (p) { return p.toString().padStart(2, '0'); });
        var timer = chalk.ansi(90)("[" + pieces.join(':') + ":" + dt.getMilliseconds().toString().padStart(3, '0') + "]");
        var str = "" + marker + timer + " " + message + (context ? '\n   ' + context : '');
        if (severity === LogSeverity.ERROR || this.forceStderr) {
            fs_1.writeSync(STDERR_FILE_DESCRIPTOR, str + (str.endsWith('\n') ? '' : '\n'));
        }
        else {
            fs_1.writeSync(STDOUT_FILE_DESCRIPTOR, str + (str.endsWith('\n') ? '' : '\n'));
        }
    };
    return Logger;
}());
exports.Logger = Logger;
