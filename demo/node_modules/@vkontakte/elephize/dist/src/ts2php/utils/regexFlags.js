"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractRegexFlags = void 0;
var extractRegexFlags = function (regex, log, ctx) {
    var _a = __read(regex.match(/^"\/(.*?)\/([a-zA-Z]+)?"$/) || [], 3), matched = _a[0], expression = _a[1], flags = _a[2];
    var output = {
        phpFlags: '',
        globalSearch: false,
        expression: expression,
    };
    if (!matched) {
        log.error('Failed to parse regexp: %s', [regex], log.ctx(ctx));
        return output;
    }
    if (!flags) {
        flags = '';
    }
    if (flags.includes('g')) {
        output.globalSearch = true;
        flags = flags.replace('g', '');
    }
    if (flags.includes('i')) {
        output.phpFlags += 'i';
        flags = flags.replace('i', '');
    }
    if (flags !== '') {
        log.error('Unsupported regexp modifiers encountered: %s', [flags], log.ctx(ctx));
    }
    return output;
};
exports.extractRegexFlags = extractRegexFlags;
