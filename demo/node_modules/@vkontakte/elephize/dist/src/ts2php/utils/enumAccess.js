"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleEnumMemberAccess = void 0;
var ts = require("typescript");
var path = require("path");
var ast_1 = require("./ast");
var pathsAndNames_1 = require("./pathsAndNames");
function handleEnumMemberAccess(node, context) {
    var _a, _b, _c;
    var symAccessor = context.checker.getSymbolAtLocation(node.name);
    // Note: we check node.name first, because it will be EnumMember in both local and imported enum cases.
    if (symAccessor && ((_a = symAccessor.valueDeclaration) === null || _a === void 0 ? void 0 : _a.kind) === ts.SyntaxKind.EnumMember) {
        var symIdent = context.checker.getSymbolAtLocation(node.expression);
        if (symIdent && ((_b = symIdent.valueDeclaration) === null || _b === void 0 ? void 0 : _b.kind) === ts.SyntaxKind.EnumDeclaration) { // local enum
            return context.registry.getEnumConst(context.moduleDescriptor.sourceFileName, node.expression.getText(), node.name.getText().toUpperCase());
        }
        if (symIdent && ((_c = symIdent.declarations[0]) === null || _c === void 0 ? void 0 : _c.kind) === ts.SyntaxKind.ImportSpecifier) { // imported enum
            var importDecl = ast_1.getClosestParentOfType(symIdent.declarations[0], ts.SyntaxKind.ImportDeclaration);
            if (!importDecl) {
                context.log.error('Import not found: tried to find specification of %s', [node.expression.getText()], context.log.ctx(node));
                return true; // error, outer code should return ''
            }
            var currentFilePath = node.getSourceFile().fileName;
            var moduleSpec = importDecl.moduleSpecifier.text;
            var sourceFilename = pathsAndNames_1.resolveAliasesAndPaths(context.log, moduleSpec, path.dirname(currentFilePath), context.baseDir, context.compilerOptions.paths || {}, context.registry._aliases);
            if (sourceFilename === null) {
                if (moduleSpec.includes('/')) {
                    context.log.error('Module not found: tried to find %s', [moduleSpec], context.log.ctx(node));
                }
                else {
                    context.log.error('Importing arbitrary node modules is not supported. Only "react" module is allowed at the moment.' +
                        ' Also you may want to import specific file from module - this is supported.', [], context.log.ctx(node));
                }
                return true; // error, outer code should return ''
            }
            return context.registry.getEnumConst(sourceFilename, node.expression.getText(), node.name.getText().toUpperCase());
        }
    }
    return false; // no error
}
exports.handleEnumMemberAccess = handleEnumMemberAccess;
